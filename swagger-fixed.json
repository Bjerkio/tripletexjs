{
  "swagger": "2.0",
  "info": {
    "description": "## Usage\n\n- **Download the spec** [swagger.json](/v2/swagger.json) file, it is a [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification).\n\n- **Generating a client** can easily be done using tools like [swagger-codegen](https://github.com/swagger-api/swagger-codegen) or other that accepts [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) specs.\n\n\n## Overview\n\n- Partial resource updating is done using the `PUT` method with optional fields instead of the `PATCH` method.\n\n- **Actions** or **commands** are represented in our RESTful path with a prefixed `:`. Example: `/v2/hours/123/:approve`.\n\n- **Summaries** or **aggregated** results are represented in our RESTful path with a prefixed `>`. Example: `/v2/hours/>thisWeeksBillables`.\n\n- **Request ID** is a key found in all responses in the header with the name `x-tlx-request-id`. For validation and error responses it is also in the response body. If additional log information is absolutely necessary, our support division can locate the key value.\n\n- **version** This is a revision number found on all persisted resources. If included, it will prevent your PUT/POST from overriding any updates to the resource since your GET.\n\n- **Date** follows the **[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)** standard, meaning the format `YYYY-MM-DD`.\n\n- **DateTime** follows the **[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)** standard, meaning the format `YYYY-MM-DDThh:mm:ss`.\n\n- **Searching** is done by entering values in the optional fields for each API call. The values fall into the following categories: range, in, exact and like.\n\n- **Missing fields** or even **no response data** can occur because result objects and fields are filtered on authorization.\n\n- **See [GitHub](https://github.com/Tripletex/tripletex-api2) for more documentation, examples, changelog and more.**\n\n- **See [FAQ](https://tripletex.no/execute/docViewer?articleId=906&language=0) for additional information.**\n\n\n## Authentication\n\n- **Tokens:** The Tripletex API uses 3 different tokens\n\n  - **consumerToken** is a token provided to the consumer by Tripletex after the API 2.0 registration is completed.\n\n  - **employeeToken** is a token created by an administrator in your Tripletex account via the user settings and the tab \"API access\". Each employee token must be given a set of entitlements. [Read more here.](https://tripletex.no/execute/docViewer?articleId=853&language=0)\n\n  - **sessionToken** is the token from `/token/session/:create` which requires a consumerToken and an employeeToken created with the same consumer token, but not an authentication header. See how to create a sessionToken [here](https://tripletex.no/execute/docViewer?articleId=855&language=0).\n\n- **Authentication** is done via [Basic access authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)\n\n  - **username** is used to specify what company to access.\n\n    - `0` or blank means the company of the employee.\n\n    - Any other value means accountant clients. Use `/company/>withLoginAccess` to get a list of those.\n\n  - **password** is the **sessionToken**.\n\n  - If you need to create the header yourself use `Authorization: Basic <encoded token>` where `encoded token` is the string `<target company id or 0>:<your session token>` Base64 encoded.\n\n\n## Tags\n\n- `[BETA]` This is a beta endpoint and can be subject to change.\n- `[DEPRECATED]` Deprecated means that we intend to remove/change this feature or capability in a future \"major\" API release. We therefore discourage all use of this feature/capability.\n\n\n## Fields\n\nUse the `fields` parameter to specify which fields should be returned. This also supports fields from sub elements, done via `<field>(<subResourceFields>)`. `*` means all fields for that resource. Example values:\n- `project,activity,hours`  returns `{project:..., activity:...., hours:...}`.\n- just `project` returns `\"project\" : { \"id\": 12345, \"url\": \"tripletex.no/v2/projects/12345\"  }`.\n- `project(*)` returns `\"project\" : { \"id\": 12345 \"name\":\"ProjectName\" \"number.....startDate\": \"2013-01-07\" }`.\n- `project(name)` returns `\"project\" : { \"name\":\"ProjectName\" }`.\n- All resources and some subResources :  `*,activity(name),employee(*)`.\n\n\n## Sorting\n\nUse the `sorting` parameter to specify sorting. It takes a comma separated list, where a `-` prefix denotes descending. You can sort by sub object with the following format: `<field>.<subObjectField>`. Example values:\n- `date`\n- `project.name`\n- `project.name, -date`\n\n\n## Changes\n\nTo get the changes for a resource, `changes` have to be explicitly specified as part of the `fields` parameter, e.g. `*,changes`.\nThere are currently two types of change available: \n- `CREATE` for when the resource was created\n- `UPDATE` for when the resource was updated\n\n**NOTE**\n> For objects created prior to October 24th 2018 the list may be incomplete, but will always contain the CREATE and the last change (if the object has been changed after creation).\n\n\n## Rate limiting\n\nRate limiting is performed on the API calls for an employee for each API consumer. Status regarding the rate limit is returned as headers:\n- `X-Rate-Limit-Limit` - The number of allowed requests in the current period.\n- `X-Rate-Limit-Remaining` - The number of remaining requests.\n- `X-Rate-Limit-Reset` - The number of seconds left in the current period.\n\nOnce the rate limit is hit, all requests will return HTTP status code `429` for the remainder of the current period.\n\n\n## Response envelope\n\n#### Multiple values\n\n```json\n{\n  \"fullResultSize\": ###, // {number} [DEPRECATED]\n  \"from\": ###, // {number} Paging starting from\n  \"count\": ###, // {number} Paging count\n  \"versionDigest\": \"###\", // {string} Hash of full result, null if no result\n  \"values\": [...{...object...},{...object...},{...object...}...]\n}\n```\n\n#### Single value\n\n```json\n{\n  \"value\": {...single object...}\n}\n```\n\n\n## WebHook envelope\n\n```json\n{\n  \"subscriptionId\": ###, // Subscription id\n  \"event\": \"object.verb\", // As listed from /v2/event/\n  \"id\": ###, // Id of object this event is for\n  \"value\": {... single object, null if object.deleted ...}\n}\n```\n\n\n## Error/warning envelope\n\n```json\n{\n  \"status\": ###, // {number} HTTP status code\n  \"code\": #####, // {number} internal status code of event\n  \"message\": \"###\", // {string} Basic feedback message in your language\n  \"link\": \"###\", // {string} Link to doc\n  \"developerMessage\": \"###\", // {string} More technical message\n  \"validationMessages\": [ // {array} List of validation messages, can be null\n    {\n      \"field\": \"###\", // {string} Name of field\n      \"message\": \"###\" // {string} Validation message for field\n    }\n  ],\n  \"requestId\": \"###\" // {string} Same as x-tlx-request-id \n}\n```\n\n\n## Status codes / Error codes\n\n- **200 OK**\n- **201 Created** - From POSTs that create something new.\n- **204 No Content** - When there is no answer, ex: \"/:anAction\" or DELETE.\n- **400 Bad request** -\n  -  **4000** Bad Request Exception\n  - **11000** Illegal Filter Exception\n  - **12000** Path Param Exception\n  - **24000** Cryptography Exception\n- **401 Unauthorized** - When authentication is required and has failed or has not yet been provided\n  -  **3000** Authentication Exception\n- **403 Forbidden** - When AuthorisationManager says no.\n  -  **9000** Security Exception\n- **404 Not Found** - For resources that does not exist.\n  -  **6000** Not Found Exception\n- **409 Conflict** - Such as an edit conflict between multiple simultaneous updates\n  -  **7000** Object Exists Exception\n  -  **8000** Revision Exception\n  - **10000** Locked Exception\n  - **14000** Duplicate entry\n- **422 Bad Request** - For Required fields or things like malformed payload.\n  - **15000** Value Validation Exception\n  - **16000** Mapping Exception\n  - **17000** Sorting Exception\n  - **18000** Validation Exception\n  - **21000** Param Exception\n  - **22000** Invalid JSON Exception\n  - **23000** Result Set Too Large Exception\n- **429 Too Many Requests** - Request rate limit hit\n- **500 Internal Error** - Unexpected condition was encountered and no more specific message is suitable\n  - **1000** Exception\n",
    "version": "2.46.3",
    "title": "Tripletex API",
    "contact": {
      "name": "tripletex-api2 on GitHub",
      "url": "https://github.com/Tripletex/tripletex-api2"
    }
  },
  "host": "tripletex.no",
  "basePath": "/v2",
  "schemes": [
    "https"
  ],
  "paths": {
    "/activity": {
      "get": {
        "tags": [
          "activity"
        ],
        "summary": "Find activities corresponding with sent data.",
        "description": "",
        "operationId": "ActivitySearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isProjectActivity",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isGeneral",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isChargeable",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isTask",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "activity"
        ],
        "summary": "Add activity.",
        "description": "",
        "operationId": "ActivityPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/activity/>forTimeSheet": {
      "get": {
        "tags": [
          "activity"
        ],
        "summary": "Find applicable time sheet activities for an employee on a specific day.",
        "description": "",
        "operationId": "ActivityForTimeSheetGetForTimeSheet",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/activity/list": {
      "post": {
        "tags": [
          "activity"
        ],
        "summary": "Add multiple activities.",
        "description": "",
        "operationId": "ActivityListPostList",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Activity"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/activity/{id}": {
      "get": {
        "tags": [
          "activity"
        ],
        "summary": "Find activity by ID.",
        "description": "",
        "operationId": "ActivityGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank": {
      "get": {
        "tags": [
          "bank"
        ],
        "summary": "[BETA] Find bank corresponding with sent data.",
        "description": "",
        "operationId": "BankSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "registerNumbers",
            "in": "query",
            "description": "Bank register number (four digits)",
            "required": false,
            "type": "string"
          },
          {
            "name": "isBankReconciliationSupport",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBank"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation": {
      "get": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Find bank reconciliation corresponding with sent data.",
        "description": "",
        "operationId": "BankReconciliationSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountingPeriodId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Post a bank reconciliation.",
        "description": "",
        "operationId": "BankReconciliationPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/>lastClosed": {
      "get": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Get last closed reconciliation by account ID.",
        "description": "",
        "operationId": "BankReconciliationLastClosedLastClosed",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "after",
            "in": "query",
            "description": "Format is yyyy-MM-dd",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/match": {
      "get": {
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Find bank reconciliation match corresponding with sent data.",
        "description": "",
        "operationId": "BankReconciliationMatchSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "bankReconciliationId",
            "in": "query",
            "description": "List of bank reconciliation IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Create a bank reconciliation match.",
        "description": "",
        "operationId": "BankReconciliationMatchPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliationMatch"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/match/:suggest": {
      "put": {
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Suggest matches for a bank reconciliation by ID.",
        "description": "",
        "operationId": "BankReconciliationMatchSuggestSuggest",
        "parameters": [
          {
            "name": "bankReconciliationId",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/match/{id}": {
      "get": {
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Get bank reconciliation match by ID.",
        "description": "",
        "operationId": "BankReconciliationMatchGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Update a bank reconciliation match by ID.",
        "description": "",
        "operationId": "BankReconciliationMatchPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliationMatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Delete a bank reconciliation match by ID.",
        "description": "",
        "operationId": "BankReconciliationMatchDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/paymentType": {
      "get": {
        "tags": [
          "bank/reconciliation/paymentType"
        ],
        "summary": "[BETA] Find payment type corresponding with sent data.",
        "description": "",
        "operationId": "BankReconciliationPaymentTypeSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/paymentType/{id}": {
      "get": {
        "tags": [
          "bank/reconciliation/paymentType"
        ],
        "summary": "[BETA] Get payment type by ID.",
        "description": "",
        "operationId": "BankReconciliationPaymentTypeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/{id}": {
      "get": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Get bank reconciliation.",
        "description": "",
        "operationId": "BankReconciliationGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Update a bank reconciliation.",
        "description": "",
        "operationId": "BankReconciliationPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Delete bank reconciliation by ID.",
        "description": "",
        "operationId": "BankReconciliationDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/{id}/:adjustment": {
      "put": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Add an adjustment to reconciliation by ID.",
        "description": "",
        "operationId": "BankReconciliationAdjustmentAdjustment",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Adjustments",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/BankReconciliationAdjustment"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationAdjustment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement": {
      "get": {
        "tags": [
          "bank/statement"
        ],
        "summary": "[BETA] Find bank statement corresponding with sent data.",
        "description": "",
        "operationId": "BankStatementSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankStatement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/import": {
      "post": {
        "tags": [
          "bank/statement"
        ],
        "summary": "[BETA] Upload bank statement file.",
        "description": "",
        "operationId": "BankStatementImportImportBankStatement",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "bankId",
            "in": "query",
            "description": "Bank ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "External ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "fileFormat",
            "in": "query",
            "description": "File format",
            "required": true,
            "type": "string",
            "enum": [
              "DNB_CSV",
              "EIKA_TELEPAY",
              "SPAREBANK1_TELEPAY",
              "VISMA_ACCOUNT_STATEMENT",
              "HANDELSBANKEN_TELEPAY",
              "SPAREBANKEN_VEST_TELEPAY",
              "NORDEA_CSV",
              "TRANSFERWISE",
              "SPAREBANKEN_SOR_TELEPAY",
              "SPAREBANKEN_OST_TELEPAY",
              "DANSKE_BANK_CSV"
            ]
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The bank statement file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankStatement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/transaction": {
      "get": {
        "tags": [
          "bank/statement/transaction"
        ],
        "summary": "[BETA] Find bank transaction corresponding with sent data.",
        "description": "",
        "operationId": "BankStatementTransactionSearch",
        "parameters": [
          {
            "name": "bankStatementId",
            "in": "query",
            "description": "Bank statement ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankTransaction"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/transaction/{id}": {
      "get": {
        "tags": [
          "bank/statement/transaction"
        ],
        "summary": "[BETA] Get bank transaction by ID.",
        "description": "",
        "operationId": "BankStatementTransactionGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankTransaction"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/transaction/{id}/details": {
      "get": {
        "tags": [
          "bank/statement/transaction"
        ],
        "summary": "[BETA] Get additional details about transaction by ID.",
        "description": "",
        "operationId": "BankStatementTransactionDetailsGetDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperObject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/{id}": {
      "get": {
        "tags": [
          "bank/statement"
        ],
        "summary": "[BETA] Get bank statement.",
        "description": "",
        "operationId": "BankStatementGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankStatement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "bank/statement"
        ],
        "summary": "[BETA] Delete bank statement by ID.",
        "description": "",
        "operationId": "BankStatementDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company": {
      "put": {
        "tags": [
          "company"
        ],
        "summary": "Update company information.",
        "description": "",
        "operationId": "CompanyPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompany"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/>withLoginAccess": {
      "get": {
        "tags": [
          "company"
        ],
        "summary": "Returns client customers (with accountant/auditor relation) where the current user has login access (proxy login).",
        "description": "",
        "operationId": "CompanyWithLoginAccessGetWithLoginAccess",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompany"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/divisions": {
      "get": {
        "tags": [
          "company"
        ],
        "summary": "[DEPRECATED] Find divisions.",
        "description": "",
        "operationId": "CompanyDivisionsGetDivisions",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompany"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/salesmodules": {
      "get": {
        "tags": [
          "company/salesmodules"
        ],
        "summary": "[BETA] Get active sales modules.",
        "description": "",
        "operationId": "CompanySalesmodulesGet",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSalesModuleDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "company/salesmodules"
        ],
        "summary": "[BETA] Add (activate) a new sales module.",
        "description": "",
        "operationId": "CompanySalesmodulesPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesModuleDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalesModuleDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/settings/altinn": {
      "get": {
        "tags": [
          "company/altinn"
        ],
        "summary": "[BETA] Find Altinn id for login in company.",
        "description": "",
        "operationId": "CompanySettingsAltinnSearch",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAltinnCompanyModule"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "company/altinn"
        ],
        "summary": "[BETA] Update AltInn id and password.",
        "description": "",
        "operationId": "CompanySettingsAltinnPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AltinnCompanyModule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAltinnCompanyModule"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/{id}": {
      "get": {
        "tags": [
          "company"
        ],
        "summary": "Find company by ID.",
        "description": "",
        "operationId": "CompanyGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompany"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/contact": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "Find contacts corresponding with sent data.",
        "description": "",
        "operationId": "ContactSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseContact"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "Create contact.",
        "description": "",
        "operationId": "ContactPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperContact"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/contact/{id}": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "Get contact by ID.",
        "description": "",
        "operationId": "ContactGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperContact"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "contact"
        ],
        "summary": "[BETA] Update contact.",
        "description": "",
        "operationId": "ContactPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperContact"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/country": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Find countries corresponding with sent data.",
        "description": "",
        "operationId": "CountrySearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCountry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/country/{id}": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Get country by ID.",
        "description": "",
        "operationId": "CountryGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCountry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/crm/prospect": {
      "get": {
        "tags": [
          "crm/prospect"
        ],
        "summary": "Find prospects corresponding with sent data.",
        "description": "",
        "operationId": "CrmProspectSearch",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "salesEmployeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "isClosed",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "closedReason",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "closedDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "closedDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "competitor",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "prospectType",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectOfferId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProspect"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/crm/prospect/{id}": {
      "get": {
        "tags": [
          "crm/prospect"
        ],
        "summary": "Get prospect by ID.",
        "description": "",
        "operationId": "CrmProspectGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProspect"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/currency": {
      "get": {
        "tags": [
          "currency"
        ],
        "summary": "Find currencies corresponding with sent data.",
        "description": "",
        "operationId": "CurrencySearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Currency codes",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCurrency"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/currency/{id}": {
      "get": {
        "tags": [
          "currency"
        ],
        "summary": "Get currency by ID.",
        "description": "",
        "operationId": "CurrencyGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCurrency"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/currency/{id}/rate": {
      "get": {
        "tags": [
          "currency"
        ],
        "summary": "Find currency exchange rate corresponding with sent data.",
        "description": "",
        "operationId": "CurrencyRateGetRate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Currency id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Format is yyyy-MM-dd",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCurrencyExchangeRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Find customers corresponding with sent data.",
        "description": "",
        "operationId": "CustomerSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerAccountNumber",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "organizationNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoiceEmail",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "accountManagerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Create customer. Related customer addresses may also be created.",
        "description": "",
        "operationId": "CustomerPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer/category": {
      "get": {
        "tags": [
          "customer/category"
        ],
        "summary": "Find customer/supplier categories corresponding with sent data.",
        "description": "",
        "operationId": "CustomerCategorySearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomerCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "customer/category"
        ],
        "summary": "Add new customer/supplier category.",
        "description": "",
        "operationId": "CustomerCategoryPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomerCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomerCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer/category/{id}": {
      "get": {
        "tags": [
          "customer/category"
        ],
        "summary": "Find customer/supplier category by ID.",
        "description": "",
        "operationId": "CustomerCategoryGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomerCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "customer/category"
        ],
        "summary": "Update customer/supplier category.",
        "description": "",
        "operationId": "CustomerCategoryPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomerCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomerCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer/list": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "[BETA] Create multiple customers. Related supplier addresses may also be created.",
        "description": "",
        "operationId": "CustomerListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "[BETA] Update multiple customers. Addresses can also be updated.",
        "description": "",
        "operationId": "CustomerListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer/{id}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get customer by ID.",
        "description": "",
        "operationId": "CustomerGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "Update customer. ",
        "description": "",
        "operationId": "CustomerPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/deliveryAddress": {
      "get": {
        "tags": [
          "deliveryAddress"
        ],
        "summary": "Find addresses corresponding with sent data.",
        "description": "",
        "operationId": "DeliveryAddressSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "addressLine1",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "addressLine2",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "postalCode",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "city",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDeliveryAddress"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/deliveryAddress/{id}": {
      "get": {
        "tags": [
          "deliveryAddress"
        ],
        "summary": "Get address by ID.",
        "description": "",
        "operationId": "DeliveryAddressGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeliveryAddress"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "deliveryAddress"
        ],
        "summary": "Update address.",
        "description": "",
        "operationId": "DeliveryAddressPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeliveryAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeliveryAddress"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/department": {
      "get": {
        "tags": [
          "department"
        ],
        "summary": "Find department corresponding with sent data.",
        "description": "",
        "operationId": "DepartmentSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "departmentNumber",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "departmentManagerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "department"
        ],
        "summary": "[BETA] Add new department.",
        "description": "",
        "operationId": "DepartmentPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/department/list": {
      "post": {
        "tags": [
          "department"
        ],
        "summary": "[BETA] Register new departments.",
        "description": "",
        "operationId": "DepartmentListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Department"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "department"
        ],
        "summary": "[BETA] Update multiple departments.",
        "description": "",
        "operationId": "DepartmentListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Department"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/department/{id}": {
      "get": {
        "tags": [
          "department"
        ],
        "summary": "Get department by ID.",
        "description": "",
        "operationId": "DepartmentGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "department"
        ],
        "summary": "[BETA] Update department.",
        "description": "",
        "operationId": "DepartmentPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "department"
        ],
        "summary": "Delete department by ID",
        "description": "",
        "operationId": "DepartmentDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/division": {
      "get": {
        "tags": [
          "division"
        ],
        "summary": "[BETA] Get divisions.",
        "description": "",
        "operationId": "DivisionSearch",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "division"
        ],
        "summary": "[BETA] Create division.",
        "description": "",
        "operationId": "DivisionPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Division"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/division/list": {
      "post": {
        "tags": [
          "division"
        ],
        "summary": "[BETA] Create divisions.",
        "description": "",
        "operationId": "DivisionListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Division"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "division"
        ],
        "summary": "[BETA] Update multiple divisions.",
        "description": "",
        "operationId": "DivisionListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Division"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/division/{id}": {
      "put": {
        "tags": [
          "division"
        ],
        "summary": "[BETA] Update division information.",
        "description": "",
        "operationId": "DivisionPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Division"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/document/{id}": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "[BETA] Get document by ID.",
        "description": "",
        "operationId": "DocumentGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocument"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/document/{id}/content": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "[BETA] Get content of document given by ID.",
        "description": "",
        "operationId": "DocumentContentDownloadContent",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of document to download content from.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/account/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with account object type.",
        "description": "",
        "operationId": "DocumentArchiveAccountGetAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Account Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveAccountAccountPost",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/customer/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with customer object type.",
        "description": "",
        "operationId": "DocumentArchiveCustomerGetCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Customer Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveCustomerCustomerPost",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/employee/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with employee object type.",
        "description": "",
        "operationId": "DocumentArchiveEmployeeGetEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Employee Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveEmployeeEmployeePost",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/product/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with product object type.",
        "description": "",
        "operationId": "DocumentArchiveProductGetProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Product Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveProductProductPost",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/project/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with project object type.",
        "description": "",
        "operationId": "DocumentArchiveProjectGetProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Project Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveProjectProjectPost",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/prospect/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with prospect object type.",
        "description": "",
        "operationId": "DocumentArchiveProspectGetProspect",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Prospect Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveProspectProspectPost",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/reception": {
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload a file to the document archive reception. Send as multipart form.",
        "description": "",
        "operationId": "DocumentArchiveReceptionReceptionPost",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/supplier/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with supplier object type.",
        "description": "",
        "operationId": "DocumentArchiveSupplierGetSupplier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Supplier Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveSupplierSupplierPost",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/{id}": {
      "put": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Update document archive.",
        "description": "",
        "operationId": "DocumentArchivePut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DocumentArchive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Delete document archive.",
        "description": "",
        "operationId": "DocumentArchiveDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Find employees corresponding with sent data.",
        "description": "",
        "operationId": "EmployeeSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "allowInformationRegistration",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeContacts",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "onlyProjectManagers",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "periodStart",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodEnd",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "employee"
        ],
        "summary": "[BETA] Create one employee.",
        "description": "",
        "operationId": "EmployeePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment": {
      "get": {
        "tags": [
          "employee/employment"
        ],
        "summary": "Find all employments for employee.",
        "description": "",
        "operationId": "EmployeeEmploymentSearch",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "employee/employment"
        ],
        "summary": "[BETA] Create employment.",
        "description": "",
        "operationId": "EmployeeEmploymentPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/details": {
      "get": {
        "tags": [
          "employee/employment/details"
        ],
        "summary": "[BETA] Find all employmentdetails for employment.",
        "description": "",
        "operationId": "EmployeeEmploymentDetailsSearch",
        "parameters": [
          {
            "name": "employmentId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "employee/employment/details"
        ],
        "summary": "[BETA] Create employment details.",
        "description": "",
        "operationId": "EmployeeEmploymentDetailsPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmploymentDetails"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmploymentDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/details/{id}": {
      "get": {
        "tags": [
          "employee/employment/details"
        ],
        "summary": "[BETA] Find employment details by ID.",
        "description": "",
        "operationId": "EmployeeEmploymentDetailsGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmploymentDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee/employment/details"
        ],
        "summary": "[BETA] Update employment details. ",
        "description": "",
        "operationId": "EmployeeEmploymentDetailsPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmploymentDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmploymentDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType": {
      "get": {
        "tags": [
          "employee/employment/employmentType"
        ],
        "summary": "[BETA] Find all employment type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeSearch",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType/maritimeEmploymentType": {
      "get": {
        "tags": [
          "employee/employment/employmentType"
        ],
        "summary": "[BETA] Find all maritime employment type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeGetMaritimeEmploymentType",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "maritimeEmploymentType",
            "required": true,
            "type": "string",
            "enum": [
              "SHIP_REGISTER",
              "SHIP_TYPE",
              "TRADE_AREA"
            ]
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType/salaryType": {
      "get": {
        "tags": [
          "employee/employment/employmentType"
        ],
        "summary": "[BETA] Find all salary type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeSalaryTypeGetSalaryType",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType/scheduleType": {
      "get": {
        "tags": [
          "employee/employment/employmentType"
        ],
        "summary": "[BETA] Find all schedule type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeScheduleTypeGetScheduleType",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/leaveOfAbsence": {
      "post": {
        "tags": [
          "employee/employment/leaveOfAbsence"
        ],
        "summary": "[BETA] Create leave of absence.",
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsencePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LeaveOfAbsence"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/leaveOfAbsence/list": {
      "post": {
        "tags": [
          "employee/employment/leaveOfAbsence"
        ],
        "summary": "[BETA] Create multiple leave of absences.",
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsenceListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/LeaveOfAbsence"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/leaveOfAbsence/{id}": {
      "get": {
        "tags": [
          "employee/employment/leaveOfAbsence"
        ],
        "summary": "[BETA] Find leave of absence by ID.",
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsenceGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee/employment/leaveOfAbsence"
        ],
        "summary": "[BETA] Update leave of absence. ",
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsencePut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LeaveOfAbsence"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/leaveOfAbsenceType": {
      "get": {
        "tags": [
          "employee/employment/leaveOfAbsenceType"
        ],
        "summary": "[BETA] Find all leave of absence type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsenceTypeSearch",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLeaveOfAbsenceType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/occupationCode": {
      "get": {
        "tags": [
          "employee/employment/occupationCode"
        ],
        "summary": "[BETA] Find all profession codes.",
        "description": "",
        "operationId": "EmployeeEmploymentOccupationCodeSearch",
        "parameters": [
          {
            "name": "nameNO",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseOccupationCode"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/remunerationType": {
      "get": {
        "tags": [
          "employee/employment/remunerationType"
        ],
        "summary": "[BETA] Find all remuneration type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentRemunerationTypeSearch",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseRemunerationType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/workingHoursScheme": {
      "get": {
        "tags": [
          "employee/employment/workingHoursScheme"
        ],
        "summary": "[BETA] Find working hours scheme ID.",
        "description": "",
        "operationId": "EmployeeEmploymentWorkingHoursSchemeSearch",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseWorkingHoursScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/{id}": {
      "get": {
        "tags": [
          "employee/employment"
        ],
        "summary": "Find employment by ID.",
        "description": "",
        "operationId": "EmployeeEmploymentGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee/employment"
        ],
        "summary": "[BETA] Update employemnt. ",
        "description": "",
        "operationId": "EmployeeEmploymentPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement": {
      "get": {
        "tags": [
          "employee/entitlement"
        ],
        "summary": "Find all entitlements for user.",
        "description": "",
        "operationId": "EmployeeEntitlementSearch",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEntitlement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement/:grantClientEntitlementsByTemplate": {
      "put": {
        "tags": [
          "employee/entitlement"
        ],
        "summary": "[BETA] Update employee entitlements in client account.",
        "description": "",
        "operationId": "EmployeeEntitlementGrantClientEntitlementsByTemplateGrantClientEntitlementsByTemplate",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Client ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "template",
            "in": "query",
            "description": "Template",
            "required": true,
            "type": "string",
            "enum": [
              "NONE_PRIVILEGES",
              "STANDARD_PRIVILEGES_ACCOUNTANT",
              "STANDARD_PRIVILEGES_AUDITOR",
              "ALL_PRIVILEGES",
              "AGRO_READ_ONLY",
              "AGRO_READ_APPROVE",
              "AGRO_READ_WRITE",
              "AGRO_READ_WRITE_APPROVE",
              "MAMUT_PAYROLL_ADMIN",
              "MAMUT_PAYROLL_CLERK",
              "AGRO_PAYROLL_ADMIN",
              "AGRO_PAYROLL_CLERK",
              "AGRO_INVOICE_ADMIN",
              "AGRO_INVOICE_CLERK"
            ]
          },
          {
            "name": "addToExisting",
            "in": "query",
            "description": "Add template to existing entitlements",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement/:grantEntitlementsByTemplate": {
      "put": {
        "tags": [
          "employee/entitlement"
        ],
        "summary": "[BETA] Update employee entitlements.",
        "description": "The user will only receive the entitlements which are possible with the registered user type",
        "operationId": "EmployeeEntitlementGrantEntitlementsByTemplateGrantEntitlementsByTemplate",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "template",
            "in": "query",
            "description": "Template",
            "required": true,
            "type": "string",
            "enum": [
              "NONE_PRIVILEGES",
              "ALL_PRIVILEGES",
              "INVOICING_MANAGER",
              "PERSONELL_MANAGER",
              "ACCOUNTANT",
              "AUDITOR",
              "DEPARTMENT_LEADER",
              "MAMUT_USER_ADMIN",
              "MAMUT_USER"
            ]
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement/client": {
      "get": {
        "tags": [
          "employee/entitlement"
        ],
        "summary": "[BETA] Find all entitlements at client for user.",
        "description": "",
        "operationId": "EmployeeEntitlementClientClient",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Client ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEntitlement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement/{id}": {
      "get": {
        "tags": [
          "employee/entitlement"
        ],
        "summary": "Get entitlement by ID.",
        "description": "",
        "operationId": "EmployeeEntitlementGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEntitlement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/hourlyCostAndRate": {
      "get": {
        "tags": [
          "employee/hourlyCostAndRate"
        ],
        "summary": "Find all hourly cost and rates for employee.",
        "description": "",
        "operationId": "EmployeeHourlyCostAndRateSearch",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseHourlyCostAndRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "employee/hourlyCostAndRate"
        ],
        "summary": "[BETA] Create hourly cost and rate.",
        "description": "",
        "operationId": "EmployeeHourlyCostAndRatePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HourlyCostAndRate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperHourlyCostAndRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/hourlyCostAndRate/{id}": {
      "get": {
        "tags": [
          "employee/hourlyCostAndRate"
        ],
        "summary": "[BETA] Find hourly cost and rate by ID.",
        "description": "",
        "operationId": "EmployeeHourlyCostAndRateGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperHourlyCostAndRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee/hourlyCostAndRate"
        ],
        "summary": "[BETA] Update hourly cost and rate. ",
        "description": "",
        "operationId": "EmployeeHourlyCostAndRatePut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HourlyCostAndRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperHourlyCostAndRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/list": {
      "post": {
        "tags": [
          "employee"
        ],
        "summary": "[BETA] Create several employees.",
        "description": "",
        "operationId": "EmployeeListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Employee"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/nextOfKin": {
      "get": {
        "tags": [
          "employee/nextOfKin"
        ],
        "summary": "Find all next of kin for employee.",
        "description": "",
        "operationId": "EmployeeNextOfKinSearch",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseNextOfKin"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "employee/nextOfKin"
        ],
        "summary": "[BETA] Create next of kin.",
        "description": "",
        "operationId": "EmployeeNextOfKinPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NextOfKin"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperNextOfKin"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/nextOfKin/{id}": {
      "get": {
        "tags": [
          "employee/nextOfKin"
        ],
        "summary": "[BETA] Find next of kin by ID.",
        "description": "",
        "operationId": "EmployeeNextOfKinGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperNextOfKin"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee/nextOfKin"
        ],
        "summary": "[BETA] Update next of kin. ",
        "description": "",
        "operationId": "EmployeeNextOfKinPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NextOfKin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperNextOfKin"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/standardTime": {
      "get": {
        "tags": [
          "employee/standardTime"
        ],
        "summary": "[BETA] Find all standard times for employee.",
        "description": "",
        "operationId": "EmployeeStandardTimeSearch",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "employee/standardTime"
        ],
        "summary": "[BETA] Create standard time.",
        "description": "",
        "operationId": "EmployeeStandardTimePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StandardTime"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/standardTime/{id}": {
      "get": {
        "tags": [
          "employee/standardTime"
        ],
        "summary": "[BETA] Find standard time by ID.",
        "description": "",
        "operationId": "EmployeeStandardTimeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee/standardTime"
        ],
        "summary": "[BETA] Update standard time. ",
        "description": "",
        "operationId": "EmployeeStandardTimePut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StandardTime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/{id}": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Get employee by ID.",
        "description": "",
        "operationId": "EmployeeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee"
        ],
        "summary": "Update employee.",
        "description": "",
        "operationId": "EmployeePut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/event": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "[BETA] Get all (WebHook) event keys.",
        "description": "",
        "operationId": "EventGet",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMapStringEventInfoDescription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/event/subscription": {
      "get": {
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Find all ongoing subscriptions.",
        "description": "",
        "operationId": "EventSubscriptionSearch",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Create a new subscription for current EmployeeToken.",
        "description": "",
        "operationId": "EventSubscriptionPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/event/subscription/{id}": {
      "get": {
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Get subscription by ID.",
        "description": "",
        "operationId": "EventSubscriptionGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Change a current subscription, based on id.",
        "description": "",
        "operationId": "EventSubscriptionPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Delete the given subscription.",
        "description": "",
        "operationId": "EventSubscriptionDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/event/{eventType}": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "[BETA] Get example webhook payload",
        "description": "",
        "operationId": "EventExample",
        "parameters": [
          {
            "name": "eventType",
            "in": "path",
            "description": "Event type, from /event endpoint",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEventInfoDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Find inventory corresponding with sent data.",
        "description": "",
        "operationId": "InventorySearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isMainInventory",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInventory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "[BETA] Create new inventory.",
        "description": "",
        "operationId": "InventoryPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Inventory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/inventories": {
      "get": {
        "tags": [
          "inventory/inventories"
        ],
        "summary": "[BETA] Find inventories corresponding with sent data.",
        "description": "",
        "operationId": "InventoryInventoriesSearch",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInventories"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/stocktaking": {
      "get": {
        "tags": [
          "inventory/stocktaking"
        ],
        "summary": "[BETA] Find stocktaking corresponding with sent data.",
        "description": "",
        "operationId": "InventoryStocktakingSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "isCompleted",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "inventoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseStocktaking"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "inventory/stocktaking"
        ],
        "summary": "[BETA] Create new stocktaking.",
        "description": "",
        "operationId": "InventoryStocktakingPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Stocktaking"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStocktaking"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/stocktaking/productline": {
      "get": {
        "tags": [
          "inventory/stocktaking/productline"
        ],
        "summary": "[BETA] Find all product lines by stocktaking ID.",
        "description": "",
        "operationId": "InventoryStocktakingProductlineSearch",
        "parameters": [
          {
            "name": "stocktakingId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "inventory/stocktaking/productline"
        ],
        "summary": "[BETA] Create product line. When creating several product lines, use /list for better performance.",
        "description": "",
        "operationId": "InventoryStocktakingProductlinePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductLine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/stocktaking/productline/{id}": {
      "get": {
        "tags": [
          "inventory/stocktaking/productline"
        ],
        "summary": "[BETA] Get product line by ID.",
        "description": "",
        "operationId": "InventoryStocktakingProductlineGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "inventory/stocktaking/productline"
        ],
        "summary": "[BETA] Update product line.",
        "description": "",
        "operationId": "InventoryStocktakingProductlinePut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "inventory/stocktaking/productline"
        ],
        "summary": "[BETA] Delete product line.",
        "description": "",
        "operationId": "InventoryStocktakingProductlineDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/stocktaking/{id}": {
      "get": {
        "tags": [
          "inventory/stocktaking"
        ],
        "summary": "[BETA] Get stocktaking by ID.",
        "description": "",
        "operationId": "InventoryStocktakingGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStocktaking"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "inventory/stocktaking"
        ],
        "summary": "[BETA] Update stocktaking.",
        "description": "",
        "operationId": "InventoryStocktakingPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Stocktaking"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStocktaking"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "inventory/stocktaking"
        ],
        "summary": "[BETA] Delete stocktaking.",
        "description": "",
        "operationId": "InventoryStocktakingDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/{id}": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Get inventory by ID.",
        "description": "",
        "operationId": "InventoryGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "inventory"
        ],
        "summary": "[BETA] Update inventory.",
        "description": "",
        "operationId": "InventoryPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Inventory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "inventory"
        ],
        "summary": "[BETA] Delete inventory.",
        "description": "",
        "operationId": "InventoryDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Find invoices corresponding with sent data. Includes charged outgoing invoices only.",
        "description": "",
        "operationId": "InvoiceSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoiceDateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "kid",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "voucherId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Create invoice.",
        "description": "",
        "operationId": "InvoicePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          {
            "name": "sendToCustomer",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "paymentTypeId",
            "in": "query",
            "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "paidAmount",
            "in": "query",
            "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/details": {
      "get": {
        "tags": [
          "invoice/details"
        ],
        "summary": "Find ProjectInvoiceDetails corresponding with sent data.",
        "description": "",
        "operationId": "InvoiceDetailsSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoiceDateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectInvoiceDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/details/{id}": {
      "get": {
        "tags": [
          "invoice/details"
        ],
        "summary": "Get ProjectInvoiceDetails by ID.",
        "description": "",
        "operationId": "InvoiceDetailsGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectInvoiceDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/paymentType": {
      "get": {
        "tags": [
          "invoice/paymentType"
        ],
        "summary": "Find payment type corresponding with sent data.",
        "description": "",
        "operationId": "InvoicePaymentTypeSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/paymentType/{id}": {
      "get": {
        "tags": [
          "invoice/paymentType"
        ],
        "summary": "Get payment type by ID.",
        "description": "",
        "operationId": "InvoicePaymentTypeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Get invoice by ID.",
        "description": "",
        "operationId": "InvoiceGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}/:createCreditNote": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Creates a new Invoice representing a credit memo that nullifies the given invoice. Updates this invoice and any pre-existing inverse invoice.",
        "description": "",
        "operationId": "InvoiceCreateCreditNoteCreateCreditNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Credit note date",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "type": "string"
          },
          {
            "name": "creditNoteEmail",
            "in": "query",
            "description": "The credit note will be sent electronically if this field is filled out",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}/:createReminder": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Create invoice reminder and sends it by the given dispatch type. Supports the reminder types SOFT_REMINDER, REMINDER and NOTICE_OF_DEBT_COLLECTION. DispatchType NETS_PRINT must have type NOTICE_OF_DEBT_COLLECTION. SMS and NETS_PRINT must be activated prior to usage in the API.",
        "description": "",
        "operationId": "InvoiceCreateReminderCreateReminder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": true,
            "type": "string",
            "enum": [
              "SOFT_REMINDER",
              "REMINDER",
              "NOTICE_OF_DEBT_COLLECTION",
              "DEBT_COLLECTION"
            ]
          },
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeCharge",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "includeInterest",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "dispatchType",
            "in": "query",
            "description": "dispatchType",
            "required": true,
            "type": "string",
            "enum": [
              "NETS_PRINT",
              "EMAIL",
              "SMS"
            ]
          },
          {
            "name": "smsNumber",
            "in": "query",
            "description": "SMS number (must be a valid Norwegian telephone number)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}/:payment": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Update invoice. The invoice is updated with payment information. The amount is in the invoice’s currency.",
        "description": "",
        "operationId": "InvoicePaymentPayment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "paymentDate",
            "in": "query",
            "description": "Payment date",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentTypeId",
            "in": "query",
            "description": "PaymentType id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "paidAmount",
            "in": "query",
            "description": "Amount paid by customer in the company currency, typically NOK.",
            "required": true,
            "type": "number"
          },
          {
            "name": "paidAmountCurrency",
            "in": "query",
            "description": "Amount paid by customer in the invoice currency. Optional, but required for invoices in alternate currencies.",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}/:send": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Send invoice by ID and sendType. Optionally override email recipient.",
        "description": "",
        "operationId": "InvoiceSendSend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sendType",
            "in": "query",
            "description": "SendType",
            "required": true,
            "type": "string",
            "enum": [
              "EMAIL",
              "EHF",
              "EFAKTURA",
              "VIPPS",
              "PAPER"
            ]
          },
          {
            "name": "overrideEmailAddress",
            "in": "query",
            "description": "Will override email address if sendType = EMAIL",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{invoiceId}/pdf": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Get invoice document by invoice ID.",
        "description": "",
        "operationId": "InvoicePdfDownloadPdf",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice ID from which PDF is downloaded.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger": {
      "get": {
        "tags": [
          "ledger"
        ],
        "summary": "Get ledger (hovedbok).",
        "description": "",
        "operationId": "LedgerSearch",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "openPostings",
            "in": "query",
            "description": "Deprecated",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLedgerAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/account": {
      "get": {
        "tags": [
          "ledger/account"
        ],
        "summary": "Find accounts corresponding with sent data.",
        "description": "",
        "operationId": "LedgerAccountSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "isBankAccount",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isApplicableForSupplierInvoice",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Create a new account.",
        "description": "",
        "operationId": "LedgerAccountPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/account/list": {
      "post": {
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Create several accounts.",
        "description": "",
        "operationId": "LedgerAccountListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Update multiple accounts.",
        "description": "",
        "operationId": "LedgerAccountListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Delete multiple accounts.",
        "description": "",
        "operationId": "LedgerAccountListDeleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/account/{id}": {
      "get": {
        "tags": [
          "ledger/account"
        ],
        "summary": "Get account by ID.",
        "description": "",
        "operationId": "LedgerAccountGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Update account.",
        "description": "",
        "operationId": "LedgerAccountPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Delete account.",
        "description": "",
        "operationId": "LedgerAccountDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/accountingPeriod": {
      "get": {
        "tags": [
          "ledger/accountingPeriod"
        ],
        "summary": "Find accounting periods corresponding with sent data.",
        "description": "",
        "operationId": "LedgerAccountingPeriodSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "numberFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "numberTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "endFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1400,
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccountingPeriod"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/accountingPeriod/{id}": {
      "get": {
        "tags": [
          "ledger/accountingPeriod"
        ],
        "summary": "Get accounting period by ID.",
        "description": "",
        "operationId": "LedgerAccountingPeriodGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccountingPeriod"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/annualAccount": {
      "get": {
        "tags": [
          "ledger/annualAccount"
        ],
        "summary": "Find annual accounts corresponding with sent data.",
        "description": "",
        "operationId": "LedgerAnnualAccountSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "yearFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "yearTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAnnualAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/annualAccount/{id}": {
      "get": {
        "tags": [
          "ledger/annualAccount"
        ],
        "summary": "Get annual account by ID.",
        "description": "",
        "operationId": "LedgerAnnualAccountGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAnnualAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/closeGroup": {
      "get": {
        "tags": [
          "ledger/closeGroup"
        ],
        "summary": "Find close groups corresponding with sent data.",
        "description": "",
        "operationId": "LedgerCloseGroupSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCloseGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/closeGroup/{id}": {
      "get": {
        "tags": [
          "ledger/closeGroup"
        ],
        "summary": "Get close group by ID.",
        "description": "",
        "operationId": "LedgerCloseGroupGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCloseGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/openPost": {
      "get": {
        "tags": [
          "ledger"
        ],
        "summary": "Find open posts corresponding with sent data.",
        "description": "",
        "operationId": "LedgerOpenPostOpenPost",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLedgerAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/paymentTypeOut": {
      "get": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Gets payment types for outgoing payments",
        "description": "This is an API endpoint for getting payment types for outgoing payments. This is equivalent to the section 'Outgoing Payments' under Accounts Settings in Tripletex. These are the payment types listed in supplier invoices, vat returns, salary payments and Tax/ENI",
        "operationId": "LedgerPaymentTypeOutSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Create new payment type for outgoing payments",
        "description": "",
        "operationId": "LedgerPaymentTypeOutPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTypeOut"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/paymentTypeOut/list": {
      "post": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Create multiple payment types for outgoing payments at once",
        "description": "",
        "operationId": "LedgerPaymentTypeOutListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/PaymentTypeOut"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Update multiple payment types for outgoing payments at once",
        "description": "",
        "operationId": "LedgerPaymentTypeOutListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/PaymentTypeOut"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/paymentTypeOut/{id}": {
      "get": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Get payment type for outgoing payments by ID.",
        "description": "",
        "operationId": "LedgerPaymentTypeOutGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Update existing payment type for outgoing payments",
        "description": "",
        "operationId": "LedgerPaymentTypeOutPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTypeOut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Delete payment type for outgoing payments by ID.",
        "description": "",
        "operationId": "LedgerPaymentTypeOutDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/posting": {
      "get": {
        "tags": [
          "ledger/posting"
        ],
        "summary": "Find postings corresponding with sent data.",
        "description": "",
        "operationId": "LedgerPostingSearch",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "openPostings",
            "in": "query",
            "description": "Deprecated",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePosting"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/posting/openPost": {
      "get": {
        "tags": [
          "ledger/posting"
        ],
        "summary": "Find open posts corresponding with sent data.",
        "description": "",
        "operationId": "LedgerPostingOpenPostOpenPost",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePosting"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/posting/{id}": {
      "get": {
        "tags": [
          "ledger/posting"
        ],
        "summary": "Find postings by ID.",
        "description": "",
        "operationId": "LedgerPostingGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPosting"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/vatType": {
      "get": {
        "tags": [
          "ledger/vatType"
        ],
        "summary": "Find vat types corresponding with sent data.",
        "description": "",
        "operationId": "LedgerVatTypeSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVatType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/vatType/{id}": {
      "get": {
        "tags": [
          "ledger/vatType"
        ],
        "summary": "Get vat type by ID.",
        "description": "",
        "operationId": "LedgerVatTypeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVatType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher": {
      "get": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Find vouchers corresponding with sent data.",
        "description": "",
        "operationId": "LedgerVoucherSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "numberFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "numberTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VoucherSearchResponse"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Add new voucher. IMPORTANT: Also creates postings. Only the gross amounts will be used",
        "description": "",
        "operationId": "LedgerVoucherPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sendToLedger",
            "in": "query",
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Voucher"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/>nonPosted": {
      "get": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Find non-posted vouchers.",
        "description": "",
        "operationId": "LedgerVoucherNonPostedNonPosted",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeNonApproved",
            "in": "query",
            "description": "Include non-approved vouchers in the result.",
            "required": true,
            "type": "boolean",
            "default": false
          },
          {
            "name": "changedSince",
            "in": "query",
            "description": "Only return elements that have changed since this date and time",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/importDocument": {
      "post": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Upload a document to create one or more vouchers. Valid document formats are PDF, PNG, JPEG, TIFF and EHF. Send as multipart form.",
        "description": "",
        "operationId": "LedgerVoucherImportDocumentImportDocument",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "Optional description to use for the voucher(s). If omitted the file name will be used.",
            "required": false,
            "type": "string"
          },
          {
            "name": "split",
            "in": "query",
            "description": "If the document consists of several pages, should the document be split into one voucher per page?",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/importGbat10": {
      "post": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Import GBAT10. Send as multipart form.",
        "description": "",
        "operationId": "LedgerVoucherImportGbat10ImportGbat10",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "generateVatPostings",
            "in": "formData",
            "description": "If the import should generate VAT postings",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "encoding",
            "in": "formData",
            "description": "The file encoding",
            "required": false,
            "type": "string",
            "default": "utf-8"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/list": {
      "put": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Update multiple vouchers. Postings with guiRow==0 will be deleted and regenerated.",
        "description": "",
        "operationId": "LedgerVoucherListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sendToLedger",
            "in": "query",
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Voucher"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}": {
      "get": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Get voucher by ID.",
        "description": "",
        "operationId": "LedgerVoucherGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Update voucher. Postings with guiRow==0 will be deleted and regenerated.",
        "description": "",
        "operationId": "LedgerVoucherPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sendToLedger",
            "in": "query",
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Voucher"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Delete voucher by ID.",
        "description": "",
        "operationId": "LedgerVoucherDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/:reverse": {
      "put": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Reverses the voucher, and returns the reversed voucher. Supports reversing most voucher types, except salary transactions.",
        "description": "",
        "operationId": "LedgerVoucherReverseReverse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of voucher that should be reversed.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Reverse voucher date",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/:sendToInbox": {
      "put": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Send voucher to inbox.",
        "description": "",
        "operationId": "LedgerVoucherSendToInboxSendToInbox",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of voucher that should be sent to inbox.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of voucher that should be sent to inbox.",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Description of why the voucher was rejected. This parameter is only used if the approval feature is enabled.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/:sendToLedger": {
      "put": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Send voucher to ledger.",
        "description": "",
        "operationId": "LedgerVoucherSendToLedgerSendToLedger",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of voucher that should be sent to ledger.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of voucher that should be sent to ledger.",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Voucher number to use. If omitted or 0 the system will assign the number.",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/options": {
      "get": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Returns a data structure containing meta information about operations that are available for this voucher. Currently only implemented for DELETE: It is possible to check if the voucher is deletable.",
        "description": "",
        "operationId": "LedgerVoucherOptionsOptions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherOptions"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{voucherId}/attachment": {
      "post": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Upload attachment to voucher. If the voucher already has an attachment the content will be appended to the existing attachment as new PDF page(s). Valid document formats are PDF, PNG, JPEG and TIFF. Non PDF formats will be converted to PDF. Send as multipart form.",
        "description": "",
        "operationId": "LedgerVoucherAttachmentUploadAttachment",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "description": "Voucher ID to upload attachment to.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Delete attachment.",
        "description": "",
        "operationId": "LedgerVoucherAttachmentDeleteAttachment",
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "description": "ID of voucher containing the attachment to delete.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of voucher containing the attachment to delete.",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "sendToInbox",
            "in": "query",
            "description": "Should the attachment be sent to inbox rather than deleted?",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "split",
            "in": "query",
            "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{voucherId}/pdf": {
      "get": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Get PDF representation of voucher by ID.",
        "description": "",
        "operationId": "LedgerVoucherPdfDownloadPdf",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "description": "Voucher ID from which PDF is downloaded.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{voucherId}/pdf/{fileName}": {
      "post": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[DEPRECATED] Use POST ledger/voucher/{voucherId}/attachment instead.",
        "description": "",
        "operationId": "LedgerVoucherPdfUploadPdf",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "description": "Voucher ID to upload PDF to.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "File name to store the pdf under. Will not be the same as the filename on the file returned.",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucherType": {
      "get": {
        "tags": [
          "ledger/voucherType"
        ],
        "summary": "Find voucher types corresponding with sent data.",
        "description": "",
        "operationId": "LedgerVoucherTypeSearch",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucherType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucherType/{id}": {
      "get": {
        "tags": [
          "ledger/voucherType"
        ],
        "summary": "Get voucher type by ID.",
        "description": "",
        "operationId": "LedgerVoucherTypeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/municipality": {
      "get": {
        "tags": [
          "municipality"
        ],
        "summary": "[BETA] Get municipalities.",
        "description": "",
        "operationId": "MunicipalitySearch",
        "parameters": [
          {
            "name": "includePayrollTaxZones",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMunicipality"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Find orders corresponding with sent data.",
        "description": "",
        "operationId": "OrderSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderDateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "isClosed",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isSubscription",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Create order.",
        "description": "",
        "operationId": "OrderPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/:invoiceMultipleOrders": {
      "put": {
        "tags": [
          "order"
        ],
        "summary": "[BETA] Charges a single customer invoice from multiple orders. The orders must be to the same customer, currency, due date, receiver email and attn.",
        "description": "",
        "operationId": "OrderInvoiceMultipleOrdersInvoiceMultipleOrders",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of Order IDs - to the same customer, separated by comma.",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceDate",
            "in": "query",
            "description": "The invoice date",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/orderline": {
      "post": {
        "tags": [
          "order/orderline"
        ],
        "summary": "Create order line. When creating several order lines, use /list for better performance.",
        "description": "",
        "operationId": "OrderOrderlinePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderLine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/orderline/list": {
      "post": {
        "tags": [
          "order/orderline"
        ],
        "summary": "Create multiple order lines.",
        "description": "",
        "operationId": "OrderOrderlineListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/OrderLine"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/orderline/{id}": {
      "get": {
        "tags": [
          "order/orderline"
        ],
        "summary": "Get order line by ID.",
        "description": "",
        "operationId": "OrderOrderlineGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "order/orderline"
        ],
        "summary": "[BETA] Delete order line by ID.",
        "description": "",
        "operationId": "OrderOrderlineDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Get order by ID.",
        "description": "",
        "operationId": "OrderGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "order"
        ],
        "summary": "Update order.",
        "description": "",
        "operationId": "OrderPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}/:approveSubscriptionInvoice": {
      "put": {
        "tags": [
          "order"
        ],
        "summary": "To create a subscription invoice, first create a order with the subscription enabled, then approve it with this method. This approves the order for subscription invoicing.",
        "description": "",
        "operationId": "OrderApproveSubscriptionInvoiceApproveSubscriptionInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order to approve for subscription invoicing.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "invoiceDate",
            "in": "query",
            "description": "The approval date for the subscription.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}/:attach": {
      "put": {
        "tags": [
          "order"
        ],
        "summary": "Attach document to specified order ID.",
        "description": "",
        "operationId": "OrderAttachAttach",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}/:invoice": {
      "put": {
        "tags": [
          "order"
        ],
        "summary": "Create new invoice from order.",
        "description": "",
        "operationId": "OrderInvoiceInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order to invoice.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "invoiceDate",
            "in": "query",
            "description": "The invoice date",
            "required": true,
            "type": "string"
          },
          {
            "name": "sendToCustomer",
            "in": "query",
            "description": "Send invoice to customer",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "paymentTypeId",
            "in": "query",
            "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. The payment type must be related to an account with the same currency as the invoice.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "paidAmount",
            "in": "query",
            "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. This amount is in the invoice currency.",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}/:unApproveSubscriptionInvoice": {
      "put": {
        "tags": [
          "order"
        ],
        "summary": "Unapproves the order for subscription invoicing.",
        "description": "",
        "operationId": "OrderUnApproveSubscriptionInvoiceUnApproveSubscriptionInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order to unapprove for subscription invoicing.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Find products corresponding with sent data.",
        "description": "",
        "operationId": "ProductSearch",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "description": "DEPRECATED. List of product numbers (Integer only)",
            "required": false,
            "type": "string"
          },
          {
            "name": "productNumber",
            "in": "query",
            "description": "List of valid product numbers",
            "required": false,
            "type": "array",
"maxItems": 2,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "ean",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isStockItem",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "currencyId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "vatTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "productUnitId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "costExcludingVatCurrencyFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "costExcludingVatCurrencyTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "priceExcludingVatCurrencyFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "priceExcludingVatCurrencyTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "priceIncludingVatCurrencyFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "priceIncludingVatCurrencyTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "product"
        ],
        "summary": "Create new product.",
        "description": "",
        "operationId": "ProductPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/external": {
      "get": {
        "tags": [
          "product/external"
        ],
        "summary": "[BETA] Find external products corresponding with sent data. The sorting-field is not in use on this endpoint.",
        "description": "",
        "operationId": "ProductExternalSearch",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "wholesaler",
            "in": "query",
            "description": "Wholesaler",
            "required": false,
            "type": "string",
            "enum": [
              "AHLSELL",
              "BROEDRENE_DAHL",
              "ELEKTROSKANDIA",
              "HEIDENREICH",
              "ONNINEN",
              "OTRA",
              "SOLAR",
              "BERGAARD_AMUNDSEN",
              "BERGAARD_AMUNDSEN_STAVANGER",
              "SORLANDET_ELEKTRO",
              "ETMAN_DISTRIBUSJON",
              "ETM_OST",
              "CENIKA",
              "EP_ENGROS",
              "BETEK",
              "DGROUP",
              "FAGERHULT",
              "GLAMOX",
              "SCHNEIDER",
              "STOKKAN",
              "WURTH",
              "ELEKTROIMPORTOEREN",
              "THERMOFLOOR",
              "LYSKOMPONENTER",
              "NORDESIGN"
            ]
          },
          {
            "name": "organizationNumber",
            "in": "query",
            "description": "Wholesaler organization number. Mandatory if Wholesaler is not selected. If Wholesaler is selected, this field is ignored.",
            "required": false,
            "type": "string"
          },
          {
            "name": "elNumber",
            "in": "query",
            "description": "List of valid el numbers",
            "required": false,
            "type": "string"
          },
          {
            "name": "nrfNumber",
            "in": "query",
            "description": "List of valid nrf numbers",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseExternalProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/external/{id}": {
      "get": {
        "tags": [
          "product/external"
        ],
        "summary": "[BETA] Get external product by ID.",
        "description": "",
        "operationId": "ProductExternalGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperExternalProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/group": {
      "get": {
        "tags": [
          "product/group"
        ],
        "summary": "[BETA] Find product group with sent data",
        "description": "",
        "operationId": "ProductGroupSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "product/group"
        ],
        "summary": "[BETA] Create new product group.",
        "description": "",
        "operationId": "ProductGroupPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductGroup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/group/list": {
      "post": {
        "tags": [
          "product/group"
        ],
        "summary": "[BETA] Add multiple products groups.",
        "description": "",
        "operationId": "ProductGroupListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/ProductGroup"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "product/group"
        ],
        "summary": "[BETA] Update a list of product groups.",
        "description": "",
        "operationId": "ProductGroupListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/ProductGroup"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "product/group"
        ],
        "summary": "[BETA] Delete multiple product groups.",
        "description": "",
        "operationId": "ProductGroupListDeleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/group/{id}": {
      "get": {
        "tags": [
          "product/group"
        ],
        "summary": "[BETA] Find product group by ID.",
        "description": "",
        "operationId": "ProductGroupGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "product/group"
        ],
        "summary": "[BETA] Update product group.",
        "description": "",
        "operationId": "ProductGroupPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "product/group"
        ],
        "summary": "[BETA] Delete product group.",
        "description": "",
        "operationId": "ProductGroupDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/groupRelation": {
      "get": {
        "tags": [
          "product/groupRelation"
        ],
        "summary": "[BETA] Find product group relation with sent data.",
        "description": "",
        "operationId": "ProductGroupRelationSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "productGroupId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroupRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "product/groupRelation"
        ],
        "summary": "[BETA] Create new product group relation.",
        "description": "",
        "operationId": "ProductGroupRelationPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductGroupRelation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroupRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/groupRelation/list": {
      "post": {
        "tags": [
          "product/groupRelation"
        ],
        "summary": "[BETA] Add multiple products group relations.",
        "description": "",
        "operationId": "ProductGroupRelationListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/ProductGroupRelation"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroupRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "product/groupRelation"
        ],
        "summary": "[BETA] Delete multiple product group relations.",
        "description": "",
        "operationId": "ProductGroupRelationListDeleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/groupRelation/{id}": {
      "get": {
        "tags": [
          "product/groupRelation"
        ],
        "summary": "[BETA] Find product group relation by ID.",
        "description": "",
        "operationId": "ProductGroupRelationGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroupRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "product/groupRelation"
        ],
        "summary": "[BETA] Delete product group relation.",
        "description": "",
        "operationId": "ProductGroupRelationDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/list": {
      "post": {
        "tags": [
          "product"
        ],
        "summary": "[BETA] Add multiple products.",
        "description": "",
        "operationId": "ProductListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "product"
        ],
        "summary": "[BETA] Update a list of products.",
        "description": "",
        "operationId": "ProductListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/unit": {
      "get": {
        "tags": [
          "product/unit"
        ],
        "summary": "Find product units corresponding with sent data.",
        "description": "",
        "operationId": "ProductUnitSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Names",
            "required": false,
            "type": "string"
          },
          {
            "name": "nameShort",
            "in": "query",
            "description": "Short names",
            "required": false,
            "type": "string"
          },
          {
            "name": "commonCode",
            "in": "query",
            "description": "Common codes",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/unit/{id}": {
      "get": {
        "tags": [
          "product/unit"
        ],
        "summary": "Get product unit by ID.",
        "description": "",
        "operationId": "ProductUnitGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/{id}": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Get product by ID.",
        "description": "",
        "operationId": "ProductGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "product"
        ],
        "summary": "Update product.",
        "description": "",
        "operationId": "ProductPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "product"
        ],
        "summary": "[BETA] Delete product.",
        "description": "",
        "operationId": "ProductDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Find projects corresponding with sent data.",
        "description": "",
        "operationId": "ProjectSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "isOffer",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "projectManagerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeInProjectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "isClosed",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalAccountsNumber",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Add new project.",
        "description": "",
        "operationId": "ProjectPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Delete multiple projects.",
        "description": "",
        "operationId": "ProjectDeleteList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing objects to delete. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/>forTimeSheet": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Find projects applicable for time sheet registration on a specific day.",
        "description": "",
        "operationId": "ProjectForTimeSheetGetForTimeSheet",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/category": {
      "get": {
        "tags": [
          "project/category"
        ],
        "summary": "Find project categories corresponding with sent data.",
        "description": "",
        "operationId": "ProjectCategorySearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "project/category"
        ],
        "summary": "Add new project category.",
        "description": "",
        "operationId": "ProjectCategoryPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/category/{id}": {
      "get": {
        "tags": [
          "project/category"
        ],
        "summary": "Find project category by ID.",
        "description": "",
        "operationId": "ProjectCategoryGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/category"
        ],
        "summary": "Update project category.",
        "description": "",
        "operationId": "ProjectCategoryPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/controlForm": {
      "get": {
        "tags": [
          "project/controlForm"
        ],
        "summary": "[BETA] Get project control forms by project ID.",
        "description": "",
        "operationId": "ProjectControlFormSearch",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectControlForm"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/controlForm/{id}": {
      "get": {
        "tags": [
          "project/controlForm"
        ],
        "summary": "[BETA] Get project control form by ID.",
        "description": "",
        "operationId": "ProjectControlFormGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectControlForm"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates": {
      "get": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Find project hourly rates corresponding with sent data.",
        "description": "",
        "operationId": "ProjectHourlyRatesSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string",
            "enum": [
              "TYPE_PREDEFINED_HOURLY_RATES",
              "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
              "TYPE_FIXED_HOURLY_RATE"
            ]
          },
          {
            "name": "startDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "showInProjectOrder",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Create a project hourly rate. ",
        "description": "",
        "operationId": "ProjectHourlyRatesPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectHourlyRate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/list": {
      "post": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Create multiple project hourly rates.",
        "description": "",
        "operationId": "ProjectHourlyRatesListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/ProjectHourlyRate"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Update multiple project hourly rates.",
        "description": "",
        "operationId": "ProjectHourlyRatesListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/ProjectHourlyRate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Delete project hourly rates.",
        "description": "",
        "operationId": "ProjectHourlyRatesListDeleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/projectSpecificRates": {
      "get": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Find project specific rates corresponding with sent data.",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectHourlyRateId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Create new project specific rate. ",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectSpecificRate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/projectSpecificRates/list": {
      "post": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Create multiple new project specific rates.",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/ProjectSpecificRate"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Update multiple project specific rates.",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/ProjectSpecificRate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Delete project specific rates.",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesListDeleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/projectSpecificRates/{id}": {
      "get": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Find project specific rate by ID.",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Update a project specific rate.",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectSpecificRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Delete project specific rate ",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/{id}": {
      "get": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Find project hourly rate by ID.",
        "description": "",
        "operationId": "ProjectHourlyRatesGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Update a project hourly rate.",
        "description": "",
        "operationId": "ProjectHourlyRatesPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectHourlyRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Delete Project Hourly Rate ",
        "description": "",
        "operationId": "ProjectHourlyRatesDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/list": {
      "post": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Register new projects. Multiple projects for different users can be sent in the same request.",
        "description": "",
        "operationId": "ProjectListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Update multiple projects.",
        "description": "",
        "operationId": "ProjectListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Delete projects.",
        "description": "",
        "operationId": "ProjectListDeleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/orderline": {
      "get": {
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Find all order lines for project.",
        "description": "",
        "operationId": "ProjectOrderlineSearch",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Create order line. When creating several order lines, use /list for better performance.",
        "description": "",
        "operationId": "ProjectOrderlinePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectOrderLine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/orderline/list": {
      "post": {
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Create multiple order lines.",
        "description": "",
        "operationId": "ProjectOrderlineListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/ProjectOrderLine"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/orderline/{id}": {
      "get": {
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Get order line by ID.",
        "description": "",
        "operationId": "ProjectOrderlineGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Update project orderline.",
        "description": "",
        "operationId": "ProjectOrderlinePut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectOrderLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/orderline"
        ],
        "summary": "Delete order line by ID.",
        "description": "",
        "operationId": "ProjectOrderlineDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/participant": {
      "post": {
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Add new project participant.",
        "description": "",
        "operationId": "ProjectParticipantPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectParticipant"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectParticipant"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/participant/list": {
      "post": {
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Add new project participant. Multiple project participants can be sent in the same request.",
        "description": "",
        "operationId": "ProjectParticipantListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/ProjectParticipant"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectParticipant"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Delete project participants.",
        "description": "",
        "operationId": "ProjectParticipantListDeleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/participant/{id}": {
      "get": {
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Find project participant by ID.",
        "description": "",
        "operationId": "ProjectParticipantGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectParticipant"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Update project participant.",
        "description": "",
        "operationId": "ProjectParticipantPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectParticipant"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectParticipant"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/projectActivity": {
      "post": {
        "tags": [
          "project/projectActivity"
        ],
        "summary": "Add project activity.",
        "description": "",
        "operationId": "ProjectProjectActivityPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectActivity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/projectActivity/list": {
      "delete": {
        "tags": [
          "project/projectActivity"
        ],
        "summary": "Delete project activities",
        "description": "",
        "operationId": "ProjectProjectActivityListDeleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/projectActivity/{id}": {
      "get": {
        "tags": [
          "project/projectActivity"
        ],
        "summary": "Find project activity by id",
        "description": "",
        "operationId": "ProjectProjectActivityGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/projectActivity"
        ],
        "summary": "Delete project activity",
        "description": "",
        "operationId": "ProjectProjectActivityDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/task": {
      "get": {
        "tags": [
          "project/task"
        ],
        "summary": "Find all tasks for project.",
        "description": "",
        "operationId": "ProjectTaskSearch",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTask"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Find project by ID.",
        "description": "",
        "operationId": "ProjectGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Update project.",
        "description": "",
        "operationId": "ProjectPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Delete project.",
        "description": "",
        "operationId": "ProjectDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/hourlistReport": {
      "get": {
        "tags": [
          "project/period"
        ],
        "summary": "Find hourlist report by project period.",
        "description": "",
        "operationId": "ProjectPeriodHourlistReportHourlistReport",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectPeriodHourlyReport"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/invoiced": {
      "get": {
        "tags": [
          "project/period"
        ],
        "summary": "Find invoiced info by project period.",
        "description": "",
        "operationId": "ProjectPeriodInvoicedInvoiced",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectPeriodInvoiced"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/invoicingReserve": {
      "get": {
        "tags": [
          "project/period"
        ],
        "summary": "Find invoicing reserve by project period.",
        "description": "",
        "operationId": "ProjectPeriodInvoicingReserveInvoicingReserve",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectPeriodInvoicingReserve"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/monthlyStatus": {
      "get": {
        "tags": [
          "project/period"
        ],
        "summary": "Find overall status by project period.",
        "description": "",
        "operationId": "ProjectPeriodMonthlyStatusMonthlyStatus",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectPeriodMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/overallStatus": {
      "get": {
        "tags": [
          "project/period"
        ],
        "summary": "Find overall status by project period.",
        "description": "",
        "operationId": "ProjectPeriodOverallStatusOverallStatus",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectPeriodOverallStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder": {
      "get": {
        "tags": [
          "purchaseOrder"
        ],
        "summary": "[BETA] Find purchase orders with send data",
        "description": "",
        "operationId": "PurchaseOrderSearch",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "deliveryDateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": false,
            "type": "string"
          },
          {
            "name": "deliveryDateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "required": false,
            "type": "string"
          },
          {
            "name": "creationDateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": false,
            "type": "string"
          },
          {
            "name": "creationDateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "isClosed",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "withDeviationOnly",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "purchaseOrder"
        ],
        "summary": "[BETA] Creates a new purchase order",
        "description": "",
        "operationId": "PurchaseOrderPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/deviation": {
      "get": {
        "tags": [
          "purchaseOrder/deviation"
        ],
        "summary": "[BETA] Find handled deviations for purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationSearch",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "purchaseOrder/deviation"
        ],
        "summary": "[BETA] Register deviation on goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Deviation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/deviation/list": {
      "post": {
        "tags": [
          "purchaseOrder/deviation"
        ],
        "summary": "[BETA] Register multiple deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Deviation"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "purchaseOrder/deviation"
        ],
        "summary": "[BETA] Update multiple deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Deviation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/deviation/{id}": {
      "get": {
        "tags": [
          "purchaseOrder/deviation"
        ],
        "summary": " [BETA] Get deviation by order line ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "purchaseOrder/deviation"
        ],
        "summary": "Update deviation. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Deviation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "purchaseOrder/deviation"
        ],
        "summary": "[BETA] Delete goods receipt by purchase order ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/deviation/{id}/:approve": {
      "put": {
        "tags": [
          "purchaseOrder/deviation"
        ],
        "summary": "[BETA] Approve deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationApproveApprove",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/deviation/{id}/:deliver": {
      "put": {
        "tags": [
          "purchaseOrder/deviation"
        ],
        "summary": "[BETA] Send deviations to approval. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationDeliverDeliver",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/deviation/{id}/:undeliver": {
      "put": {
        "tags": [
          "purchaseOrder/deviation"
        ],
        "summary": "[BETA] Undeliver the deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationUndeliverUndeliver",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt": {
      "get": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Get goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptSearch",
        "parameters": [
          {
            "name": "receivedDateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": false,
            "type": "string"
          },
          {
            "name": "receivedDateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string",
            "enum": [
              "STATUS_OPEN",
              "STATUS_CONFIRMED"
            ]
          },
          {
            "name": "withoutPurchase",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Register goods receipt without an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoodsReceipt"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/list": {
      "post": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Register multiple goods receipt without an existing purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/GoodsReceipt"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Delete multiple goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptListDeleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}": {
      "get": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Get goods receipt by purchase order ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Update goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Goods Receipt ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoodsReceipt"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Delete goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}/:confirm": {
      "put": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Confirm goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptConfirmConfirm",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "createRestOrder",
            "in": "query",
            "description": "Create restorder if quantity received is less than ordered",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}/:receiveAndConfirm": {
      "put": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA]  Receive all ordered products and approve goods receipt. Only available for users that have activated the Logistics/Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptReceiveAndConfirmReceiveAndConfirm",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "receivedDate",
            "in": "query",
            "description": "The approval date for the subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "inventoryId",
            "in": "query",
            "description": "ID of inventory. Main inventory is set as default",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}/:registerGoodsReceipt": {
      "put": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Register goods receipt. Quantity received on the products is set to the same as quantity ordered. To update the quantity received, use PUT /purchaseOrder/goodsReceiptLine/{id}. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptRegisterGoodsReceiptRegisterGoodsReceipt",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "registrationDate",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": true,
            "type": "string"
          },
          {
            "name": "inventoryId",
            "in": "query",
            "description": "ID of inventory. Main inventory is set as default",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceiptLine": {
      "get": {
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ],
        "summary": "[BETA] Find goods receipt lines for purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLineSearch",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ],
        "summary": "[BETA] Register new goods receipt; new product on an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLinePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoodsReceiptLine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceiptLine/list": {
      "post": {
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ],
        "summary": "[BETA] Register multiple new goods receipt on an existing purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLineListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/GoodsReceiptLine"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceiptLine/{id}": {
      "get": {
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ],
        "summary": "[BETA] Get goods receipt line by purchase order line ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLineGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ],
        "summary": "[BETA] Enter goods receipt on purchase order line. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLinePut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order Line ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoodsReceiptLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ],
        "summary": "[BETA] Delete goods receipt line by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLineDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/orderline": {
      "post": {
        "tags": [
          "purchaseOrder/orderline"
        ],
        "summary": " [BETA] Creates purchase order line.",
        "description": "",
        "operationId": "PurchaseOrderOrderlinePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrderline"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderline"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/orderline/{id}": {
      "get": {
        "tags": [
          "purchaseOrder/orderline"
        ],
        "summary": " [BETA] Find purchase order line by ID.",
        "description": "",
        "operationId": "PurchaseOrderOrderlineGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderline"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "purchaseOrder/orderline"
        ],
        "summary": " [BETA] Updates purchase order line",
        "description": "",
        "operationId": "PurchaseOrderOrderlinePut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrderline"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderline"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "purchaseOrder/orderline"
        ],
        "summary": " [BETA] Delete purchase order line.",
        "description": "",
        "operationId": "PurchaseOrderOrderlineDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/{id}": {
      "get": {
        "tags": [
          "purchaseOrder"
        ],
        "summary": " [BETA] Find purchase order by ID.",
        "description": "",
        "operationId": "PurchaseOrderGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "purchaseOrder"
        ],
        "summary": " [BETA] Update purchase order.",
        "description": "",
        "operationId": "PurchaseOrderPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "purchaseOrder"
        ],
        "summary": " [BETA] Delete purchase order.",
        "description": "",
        "operationId": "PurchaseOrderDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/{id}/:send": {
      "put": {
        "tags": [
          "purchaseOrder"
        ],
        "summary": "[BETA] Send purchase order by id and sendType.",
        "description": "",
        "operationId": "PurchaseOrderSendSend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sendType",
            "in": "query",
            "description": "Send type.DEFAULT will determine the send parameter based on the supplier type.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": [
              "DEFAULT",
              "EMAIL",
              "FTP"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/{id}/:sendByEmail": {
      "put": {
        "tags": [
          "purchaseOrder"
        ],
        "summary": "[BETA] Send purchase order by customisable email.",
        "description": "",
        "operationId": "PurchaseOrderSendByEmailSendByEmail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "emailAddress",
            "in": "query",
            "description": "Email address",
            "required": true,
            "type": "string"
          },
          {
            "name": "subject",
            "in": "query",
            "description": "Subject",
            "required": true,
            "type": "string"
          },
          {
            "name": "message",
            "in": "query",
            "description": "Message",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/reminder": {
      "get": {
        "tags": [
          "reminder"
        ],
        "summary": "Find reminders corresponding with sent data.",
        "description": "",
        "operationId": "ReminderSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "termOfPaymentTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "termOfPaymentFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoiceId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseReminder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/reminder/{id}": {
      "get": {
        "tags": [
          "reminder"
        ],
        "summary": "Get reminder by ID.",
        "description": "",
        "operationId": "ReminderGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperReminder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/compilation": {
      "get": {
        "tags": [
          "salary/compilation"
        ],
        "summary": "[BETA] Find salary compilation by employee.",
        "description": "",
        "operationId": "SalaryCompilationGet",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Must be between 1900-2100. Defaults to previous year.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryCompilation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/compilation/pdf": {
      "get": {
        "tags": [
          "salary/compilation"
        ],
        "summary": "[BETA] Find salary compilation (PDF document) by employee.",
        "description": "",
        "operationId": "SalaryCompilationPdfDownloadPdf",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Must be between 1900-2100. Defaults to previous year.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/payslip": {
      "get": {
        "tags": [
          "salary/payslip"
        ],
        "summary": "[BETA] Find payslips corresponding with sent data.",
        "description": "",
        "operationId": "SalaryPayslipSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "wageTransactionId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "yearFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "yearTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "monthFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "monthTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "voucherDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "voucherDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePayslip"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/payslip/{id}": {
      "get": {
        "tags": [
          "salary/payslip"
        ],
        "summary": "[BETA] Find payslip by ID.",
        "description": "",
        "operationId": "SalaryPayslipGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPayslip"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/payslip/{id}/pdf": {
      "get": {
        "tags": [
          "salary/payslip"
        ],
        "summary": "[BETA] Find payslip (PDF document) by ID.",
        "description": "",
        "operationId": "SalaryPayslipPdfDownloadPdf",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings": {
      "get": {
        "tags": [
          "salary/settings"
        ],
        "summary": "[BETA] Get salary settings of logged in company.",
        "description": "",
        "operationId": "SalarySettingsGet",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalarySettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "salary/settings"
        ],
        "summary": "[BETA] Update settings of logged in company.",
        "description": "",
        "operationId": "SalarySettingsPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalarySettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalarySettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings/holiday": {
      "get": {
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] Find holiday settings of current logged in company.",
        "description": "",
        "operationId": "SalarySettingsHolidaySearch",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] Create a holiday setting of current logged in company.",
        "description": "",
        "operationId": "SalarySettingsHolidayPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompanyHoliday"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings/holiday/list": {
      "post": {
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] Create multiple holiday settings of current logged in company.",
        "description": "",
        "operationId": "SalarySettingsHolidayListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/CompanyHoliday"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] update multiple holiday settings of current logged in company.",
        "description": "",
        "operationId": "SalarySettingsHolidayListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/CompanyHoliday"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] delete multiple holiday settings of current logged in company.",
        "description": "",
        "operationId": "SalarySettingsHolidayListDeleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings/holiday/{id}": {
      "put": {
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] update a holiday setting of current logged in company.",
        "description": "",
        "operationId": "SalarySettingsHolidayPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompanyHoliday"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/transaction": {
      "post": {
        "tags": [
          "salary/transaction"
        ],
        "summary": "[BETA] Create a new salary transaction.",
        "description": "",
        "operationId": "SalaryTransactionPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalaryTransaction"
            }
          },
          {
            "name": "generateTaxDeduction",
            "in": "query",
            "description": "Generate tax deduction",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryTransaction"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/transaction/{id}": {
      "get": {
        "tags": [
          "salary/transaction"
        ],
        "summary": "[BETA] Find salary transaction by ID.",
        "description": "",
        "operationId": "SalaryTransactionGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryTransaction"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "salary/transaction"
        ],
        "summary": "[BETA] Delete salary transaction by ID.",
        "description": "",
        "operationId": "SalaryTransactionDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/type": {
      "get": {
        "tags": [
          "salary/type"
        ],
        "summary": "[BETA] Find salary type corresponding with sent data.",
        "description": "",
        "operationId": "SalaryTypeSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "showInTimesheet",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSalaryType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/type/{id}": {
      "get": {
        "tags": [
          "salary/type"
        ],
        "summary": "[BETA] Find salary type by ID.",
        "description": "",
        "operationId": "SalaryTypeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplier": {
      "get": {
        "tags": [
          "supplier"
        ],
        "summary": "Find suppliers corresponding with sent data.",
        "description": "",
        "operationId": "SupplierSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "supplierNumber",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "organizationNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoiceEmail",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "accountManagerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "changedSince",
            "in": "query",
            "description": "Only return elements that have changed since this date and time",
            "required": false,
            "type": "string"
          },
          {
            "name": "isWholesaler",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showProducts",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "supplier"
        ],
        "summary": "Create supplier. Related supplier addresses may also be created.",
        "description": "",
        "operationId": "SupplierPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplier/list": {
      "post": {
        "tags": [
          "supplier"
        ],
        "summary": "[BETA] Create multiple suppliers. Related supplier addresses may also be created.",
        "description": "",
        "operationId": "SupplierListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Supplier"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "supplier"
        ],
        "summary": "[BETA] Update multiple suppliers. Addresses can also be updated.",
        "description": "",
        "operationId": "SupplierListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/Supplier"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplier/{id}": {
      "get": {
        "tags": [
          "supplier"
        ],
        "summary": "Get supplier by ID.",
        "description": "",
        "operationId": "SupplierGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "supplier"
        ],
        "summary": "Update supplier. ",
        "description": "",
        "operationId": "SupplierPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice": {
      "get": {
        "tags": [
          "supplierInvoice"
        ],
        "summary": "[BETA] Find supplierInvoices corresponding with sent data.",
        "description": "",
        "operationId": "SupplierInvoiceSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoiceDateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "kid",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "voucherId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/{id}": {
      "get": {
        "tags": [
          "supplierInvoice"
        ],
        "summary": "[BETA] Get supplierInvoice by ID.",
        "description": "",
        "operationId": "SupplierInvoiceGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/{invoiceId}/pdf": {
      "get": {
        "tags": [
          "supplierInvoice"
        ],
        "summary": "[BETA] Get supplierInvoice document by invoice ID.",
        "description": "",
        "operationId": "SupplierInvoicePdfDownloadPdf",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice ID from which document is downloaded.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry": {
      "get": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find timesheet entry corresponding with sent data.",
        "description": "",
        "operationId": "TimesheetEntrySearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimesheetEntrySearchResponse"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Add new timesheet entry. Only one entry per employee/date/activity/project combination is supported.",
        "description": "",
        "operationId": "TimesheetEntryPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/>recentActivities": {
      "get": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find recently used timesheet activities.",
        "description": "",
        "operationId": "TimesheetEntryRecentActivitiesGetRecentActivities",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "ID of employee to find activities for. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of project to find activities for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/>recentProjects": {
      "get": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find projects with recent activities (timesheet entry registered).",
        "description": "",
        "operationId": "TimesheetEntryRecentProjectsGetRecentProjects",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "ID of employee with recent project hours Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/>totalHours": {
      "get": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find total hours registered on an employee in a specific period.",
        "description": "",
        "operationId": "TimesheetEntryTotalHoursGetTotalHours",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "ID of employee to find hours for. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.). Defaults to today.",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.). Defaults to tomorrow.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDouble"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/list": {
      "post": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Add new timesheet entry. Multiple objects for several users can be sent in the same request.",
        "description": "",
        "operationId": "TimesheetEntryListPostList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of timesheet entry objects",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/TimesheetEntry"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Update timesheet entry. Multiple objects for different users can be sent in the same request.",
        "description": "",
        "operationId": "TimesheetEntryListPutList",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of timesheet entry objects to update",
            "required": false,
            "schema": {
              "type": "array",
"maxItems": 2,
              "items": {
                "$ref": "#/definitions/TimesheetEntry"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/{id}": {
      "get": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find timesheet entry by ID.",
        "description": "",
        "operationId": "TimesheetEntryGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Update timesheet entry by ID. Note: Timesheet entry object fields which are present but not set, or set to 0, will be nulled.",
        "description": "",
        "operationId": "TimesheetEntryPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Delete timesheet entry by ID.",
        "description": "",
        "operationId": "TimesheetEntryDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Number of current version",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/month/:approve": {
      "put": {
        "tags": [
          "timesheet/month"
        ],
        "summary": "approve month(s).  If id is provided the other args are ignored",
        "description": "",
        "operationId": "TimesheetMonthApproveApprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs. Defaults to ID of token owner.",
            "required": false,
            "type": "string"
          },
          {
            "name": "monthYear",
            "in": "query",
            "description": "2020-01",
            "required": false,
            "type": "string"
          },
          {
            "name": "approvedUntilDate",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.. Defaults to end of month",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/month/:complete": {
      "put": {
        "tags": [
          "timesheet/month"
        ],
        "summary": "complete month(s).  If id is provided the other args are ignored",
        "description": "",
        "operationId": "TimesheetMonthCompleteComplete",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs. Defaults to ID of token owner.",
            "required": false,
            "type": "string"
          },
          {
            "name": "monthYear",
            "in": "query",
            "description": "2020-01",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/month/:reopen": {
      "put": {
        "tags": [
          "timesheet/month"
        ],
        "summary": "reopen month(s).  If id is provided the other args are ignored",
        "description": "",
        "operationId": "TimesheetMonthReopenReopen",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs. Defaults to ID of token owner.",
            "required": false,
            "type": "string"
          },
          {
            "name": "monthYear",
            "in": "query",
            "description": "2020-01",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/month/:unapprove": {
      "put": {
        "tags": [
          "timesheet/month"
        ],
        "summary": "unapprove month(s).  If id is provided the other args are ignored",
        "description": "",
        "operationId": "TimesheetMonthUnapproveUnapprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs. Defaults to ID of token owner.",
            "required": false,
            "type": "string"
          },
          {
            "name": "monthYear",
            "in": "query",
            "description": "2020-01",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/month/byMonthNumber": {
      "get": {
        "tags": [
          "timesheet/month"
        ],
        "summary": "Find monthly status for given month.",
        "description": "",
        "operationId": "TimesheetMonthByMonthNumberGetByMonthNumber",
        "parameters": [
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs. Defaults to ID of token owner.",
            "required": true,
            "type": "string"
          },
          {
            "name": "monthYear",
            "in": "query",
            "description": "2020-01",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/month/{id}": {
      "get": {
        "tags": [
          "timesheet/month"
        ],
        "summary": "Find monthly status entry by ID.",
        "description": "",
        "operationId": "TimesheetMonthGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/salaryTypeSpecification": {
      "get": {
        "tags": [
          "timesheet/salaryTypeSpecification"
        ],
        "summary": "[BETA] Get list of timesheet SalaryType Specifications",
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecificationSearch",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "timesheet/salaryTypeSpecification"
        ],
        "summary": "[BETA] Create a timesheet SalaryType Specification. Only one entry per employee/date/SalaryType",
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecificationPost",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetSalaryTypeSpecification"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/salaryTypeSpecification/{id}": {
      "get": {
        "tags": [
          "timesheet/salaryTypeSpecification"
        ],
        "summary": "[BETA] Get timesheet SalaryType Specification for a specific ID",
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecificationGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "timesheet/salaryTypeSpecification"
        ],
        "summary": "[BETA] Update a timesheet SalaryType Specification",
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecificationPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetSalaryTypeSpecification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "timesheet/salaryTypeSpecification"
        ],
        "summary": "[BETA] Delete a timesheet SalaryType Specification",
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecificationDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/settings": {
      "get": {
        "tags": [
          "timesheet/settings"
        ],
        "summary": "[BETA] Get timesheet settings of logged in company.",
        "description": "",
        "operationId": "TimesheetSettingsGet",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock": {
      "get": {
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Find time clock entries corresponding with sent data.",
        "description": "",
        "operationId": "TimesheetTimeClockSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "hourId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "isRunning",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock/:start": {
      "put": {
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Start time clock.",
        "description": "",
        "operationId": "TimesheetTimeClockStartStart",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Project ID",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "Activity ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Optional. Default is today’s date",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock/present": {
      "get": {
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Find a user’s present running time clock.",
        "description": "",
        "operationId": "TimesheetTimeClockPresentGetPresent",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock/{id}": {
      "get": {
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Find time clock entry by ID.",
        "description": "",
        "operationId": "TimesheetTimeClockGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Update time clock by ID.",
        "description": "",
        "operationId": "TimesheetTimeClockPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimeClock"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock/{id}/:stop": {
      "put": {
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Stop time clock.",
        "description": "",
        "operationId": "TimesheetTimeClockStopStop",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Number of current version",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week": {
      "get": {
        "tags": [
          "timesheet/week"
        ],
        "summary": "Find weekly status By ID, week/year combination, employeeId. or an approver",
        "description": "",
        "operationId": "TimesheetWeekSearch",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          },
          {
            "name": "approvedBy",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week/:approve": {
      "put": {
        "tags": [
          "timesheet/week"
        ],
        "summary": "Approve week. By ID or (ISO-8601 week and employeeId combination).",
        "description": "",
        "operationId": "TimesheetWeekApproveApprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week/:complete": {
      "put": {
        "tags": [
          "timesheet/week"
        ],
        "summary": "Complete week. By ID or (ISO-8601 week and employeeId combination).",
        "description": "",
        "operationId": "TimesheetWeekCompleteComplete",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week/:reopen": {
      "put": {
        "tags": [
          "timesheet/week"
        ],
        "summary": "Reopen week. By ID or (ISO-8601 week and employeeId combination).",
        "description": "",
        "operationId": "TimesheetWeekReopenReopen",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week/:unapprove": {
      "put": {
        "tags": [
          "timesheet/week"
        ],
        "summary": "Unapprove week. By ID or (ISO-8601 week and employeeId combination).",
        "description": "",
        "operationId": "TimesheetWeekUnapproveUnapprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/consumer/byToken": {
      "get": {
        "tags": [
          "token/consumer"
        ],
        "summary": "Get consumer token by token string.",
        "description": "",
        "operationId": "TokenConsumerByTokenGetByToken",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperConsumerToken"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/employee/:create": {
      "put": {
        "tags": [
          "token/employee"
        ],
        "summary": "Create an employee token. Only selected consumers are allowed",
        "description": "",
        "operationId": "TokenEmployeeCreateCreate",
        "parameters": [
          {
            "name": "tokenName",
            "in": "query",
            "description": "A user defined name for the new token",
            "required": true,
            "type": "string"
          },
          {
            "name": "consumerName",
            "in": "query",
            "description": "The name of the consumer",
            "required": true,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The id of the employee",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "companyOwned",
            "in": "query",
            "description": "Is the key company owned",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "expirationDate",
            "in": "query",
            "description": "Expiration date for the employeeToken",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeeToken"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/session/:create": {
      "put": {
        "tags": [
          "token/session"
        ],
        "summary": "Create session token.",
        "description": "",
        "operationId": "TokenSessionCreateCreate",
        "parameters": [
          {
            "name": "consumerToken",
            "in": "query",
            "description": "Token of the API consumer",
            "required": true,
            "type": "string"
          },
          {
            "name": "employeeToken",
            "in": "query",
            "description": "The employees token",
            "required": true,
            "type": "string"
          },
          {
            "name": "expirationDate",
            "in": "query",
            "description": "Expiration date for the combined token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSessionToken"
            }
          }
        }
      }
    },
    "/token/session/>whoAmI": {
      "get": {
        "tags": [
          "token/session"
        ],
        "summary": "Find information about the current user.",
        "description": "",
        "operationId": "TokenSessionWhoAmIWhoAmI",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLoggedInUserInfoDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/session/{token}": {
      "delete": {
        "tags": [
          "token/session"
        ],
        "summary": "Delete session token.",
        "description": "",
        "operationId": "TokenSessionDelete",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "The login token string to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense": {
      "get": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Find travel expenses corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseSearch",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectManagerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "departureDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "returnDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "category",
            "required": false,
            "type": "string",
            "default": "ALL",
            "enum": [
              "ALL",
              "OPEN",
              "APPROVED",
              "SALARY_PAID",
              "DELIVERED"
            ]
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Create travel expense.",
        "description": "",
        "operationId": "TravelExpensePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TravelExpense"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:approve": {
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Approve travel expenses.",
        "description": "",
        "operationId": "TravelExpenseApproveApprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:copy": {
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Copy travel expense.",
        "description": "",
        "operationId": "TravelExpenseCopyCopy",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:createVouchers": {
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Create vouchers",
        "description": "",
        "operationId": "TravelExpenseCreateVouchersCreateVouchers",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:deliver": {
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Deliver travel expenses.",
        "description": "",
        "operationId": "TravelExpenseDeliverDeliver",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:unapprove": {
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Unapprove travel expenses.",
        "description": "",
        "operationId": "TravelExpenseUnapproveUnapprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:undeliver": {
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Undeliver travel expenses.",
        "description": "",
        "operationId": "TravelExpenseUndeliverUndeliver",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/accommodationAllowance": {
      "get": {
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Find accommodation allowances corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowanceSearch",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateCategoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "rateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "countFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "countTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "address",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccommodationAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Create accommodation allowance.",
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowancePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccommodationAllowance"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccommodationAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/accommodationAllowance/{id}": {
      "get": {
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Get travel accommodation allowance by ID.",
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowanceGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccommodationAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Update accommodation allowance.",
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowancePut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccommodationAllowance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccommodationAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Delete accommodation allowance.",
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowanceDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/cost": {
      "get": {
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Find costs corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseCostSearch",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "vatTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "rateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "countFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "countTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "address",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Create cost.",
        "description": "",
        "operationId": "TravelExpenseCostPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Cost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/cost/{id}": {
      "get": {
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Get cost by ID.",
        "description": "",
        "operationId": "TravelExpenseCostGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Update cost.",
        "description": "",
        "operationId": "TravelExpenseCostPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Cost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Delete cost.",
        "description": "",
        "operationId": "TravelExpenseCostDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/costCategory": {
      "get": {
        "tags": [
          "travelExpense/costCategory"
        ],
        "summary": "[BETA] Find cost category corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseCostCategorySearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnEmployeeExpenses",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelCostCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/costCategory/{id}": {
      "get": {
        "tags": [
          "travelExpense/costCategory"
        ],
        "summary": "[BETA] Get cost category by ID.",
        "description": "",
        "operationId": "TravelExpenseCostCategoryGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelCostCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/mileageAllowance": {
      "get": {
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Find mileage allowances corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseMileageAllowanceSearch",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateCategoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "kmFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "kmTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "rateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "rateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "departureLocation",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "destination",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "isCompanyCar",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMileageAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Create mileage allowance.",
        "description": "",
        "operationId": "TravelExpenseMileageAllowancePost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MileageAllowance"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMileageAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/mileageAllowance/{id}": {
      "get": {
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Get mileage allowance by ID.",
        "description": "",
        "operationId": "TravelExpenseMileageAllowanceGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMileageAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Update mileage allowance.",
        "description": "",
        "operationId": "TravelExpenseMileageAllowancePut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MileageAllowance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMileageAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Delete mileage allowance.",
        "description": "",
        "operationId": "TravelExpenseMileageAllowanceDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/passenger": {
      "get": {
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Find passengers corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpensePassengerSearch",
        "parameters": [
          {
            "name": "mileageAllowance",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePassenger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Create passenger.",
        "description": "",
        "operationId": "TravelExpensePassengerPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Passenger"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPassenger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/passenger/{id}": {
      "get": {
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Get passenger by ID.",
        "description": "",
        "operationId": "TravelExpensePassengerGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPassenger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Update passenger.",
        "description": "",
        "operationId": "TravelExpensePassengerPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Passenger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPassenger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Delete passenger.",
        "description": "",
        "operationId": "TravelExpensePassengerDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/paymentType": {
      "get": {
        "tags": [
          "travelExpense/paymentType"
        ],
        "summary": "[BETA] Find payment type corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpensePaymentTypeSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnEmployeeExpenses",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/paymentType/{id}": {
      "get": {
        "tags": [
          "travelExpense/paymentType"
        ],
        "summary": "[BETA] Get payment type by ID.",
        "description": "",
        "operationId": "TravelExpensePaymentTypeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/perDiemCompensation": {
      "get": {
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Find per diem compensations corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpensePerDiemCompensationSearch",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateCategoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "overnightAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string",
            "enum": [
              "NONE",
              "HOTEL",
              "BOARDING_HOUSE_WITHOUT_COOKING",
              "BOARDING_HOUSE_WITH_COOKING"
            ]
          },
          {
            "name": "countFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "countTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "rateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "rateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "address",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDeductionForBreakfast",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isLunchDeduction",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isDinnerDeduction",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePerDiemCompensation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Create per diem compensation.",
        "description": "",
        "operationId": "TravelExpensePerDiemCompensationPost",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PerDiemCompensation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPerDiemCompensation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/perDiemCompensation/{id}": {
      "get": {
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Get per diem compensation by ID.",
        "description": "",
        "operationId": "TravelExpensePerDiemCompensationGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPerDiemCompensation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Update per diem compensation.",
        "description": "",
        "operationId": "TravelExpensePerDiemCompensationPut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PerDiemCompensation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPerDiemCompensation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Delete per diem compensation.",
        "description": "",
        "operationId": "TravelExpensePerDiemCompensationDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rate": {
      "get": {
        "tags": [
          "travelExpense/rate"
        ],
        "summary": "[BETA] Find rates corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseRateSearch",
        "parameters": [
          {
            "name": "rateCategoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string",
            "enum": [
              "PER_DIEM",
              "ACCOMMODATION_ALLOWANCE",
              "MILEAGE_ALLOWANCE"
            ]
          },
          {
            "name": "isValidDayTrip",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isValidAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isValidDomestic",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isValidForeignTravel",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "requiresZone",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "requiresOvernightAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rate/{id}": {
      "get": {
        "tags": [
          "travelExpense/rate"
        ],
        "summary": "[BETA] Get travel expense rate by ID.",
        "description": "",
        "operationId": "TravelExpenseRateGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rateCategory": {
      "get": {
        "tags": [
          "travelExpense/rateCategory"
        ],
        "summary": "[BETA] Find rate categories corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseRateCategorySearch",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string",
            "enum": [
              "PER_DIEM",
              "ACCOMMODATION_ALLOWANCE",
              "MILEAGE_ALLOWANCE"
            ]
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "travelReportRateCategoryGroupId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ameldingWageCode",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "wageCodeNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "isValidDayTrip",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isValidAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isValidDomestic",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "requiresZone",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isRequiresOvernightAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseRateCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rateCategory/{id}": {
      "get": {
        "tags": [
          "travelExpense/rateCategory"
        ],
        "summary": "[BETA] Get travel expense rate category by ID.",
        "description": "",
        "operationId": "TravelExpenseRateCategoryGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseRateCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rateCategoryGroup": {
      "get": {
        "tags": [
          "travelExpense/rateCategoryGroup"
        ],
        "summary": "[BETA] Find rate categoriy groups corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseRateCategoryGroupSearch",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isForeignTravel",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseRateCategoryGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rateCategoryGroup/{id}": {
      "get": {
        "tags": [
          "travelExpense/rateCategoryGroup"
        ],
        "summary": "[BETA] Get travel report rate category group by ID.",
        "description": "",
        "operationId": "TravelExpenseRateCategoryGroupGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseRateCategoryGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/settings": {
      "get": {
        "tags": [
          "travelExpense/settings"
        ],
        "summary": "[BETA] Get travel expense settings of logged in company.",
        "description": "",
        "operationId": "TravelExpenseSettingsGet",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/zone": {
      "get": {
        "tags": [
          "travelExpensezone"
        ],
        "summary": "Find travel expense zones corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseZoneSearch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDisabled",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseZone"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/zone/{id}": {
      "get": {
        "tags": [
          "travelExpensezone"
        ],
        "summary": "Get travel expense zone by ID.",
        "description": "",
        "operationId": "TravelExpenseZoneGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseZone"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/{id}": {
      "get": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Get travel expense by ID.",
        "description": "",
        "operationId": "TravelExpenseGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Update travel expense.",
        "description": "",
        "operationId": "TravelExpensePut",
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TravelExpense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Delete travel expense.",
        "description": "",
        "operationId": "TravelExpenseDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/{travelExpenseId}/attachment": {
      "get": {
        "tags": [
          "travelExpense"
        ],
        "summary": "Get attachment by travel expense ID.",
        "description": "",
        "operationId": "TravelExpenseAttachmentDownloadAttachment",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "path",
            "description": "Travel Expense ID from which PDF is downloaded.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense"
        ],
        "summary": "Upload attachment to travel expense.",
        "description": "",
        "operationId": "TravelExpenseAttachmentUploadAttachment",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "path",
            "description": "Travel Expense ID to upload attachment to.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "createNewCost",
            "in": "query",
            "description": "Create new cost row when you add the attachment",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Delete attachment.",
        "description": "",
        "operationId": "TravelExpenseAttachmentDeleteAttachment",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "path",
            "description": "ID of attachment containing the attachment to delete.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of voucher containing the attachment to delete.",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "sendToInbox",
            "in": "query",
            "description": "Should the attachment be sent to inbox rather than deleted?",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "split",
            "in": "query",
            "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/{travelExpenseId}/attachment/list": {
      "post": {
        "tags": [
          "travelExpense"
        ],
        "summary": "Upload multiple attachments to travel expense.",
        "description": "",
        "operationId": "TravelExpenseAttachmentListUploadAttachments",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "path",
            "description": "Travel Expense ID to upload attachment to.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Multipart files",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FormDataMultiPart"
            }
          },
          {
            "name": "createNewCost",
            "in": "query",
            "description": "Create new cost row when you add the attachment",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "tokenAuthScheme": {
      "description": "Basic AUTH where username is company/customer id for proxy use (or 0 for default), password should be set to the session token",
      "type": "basic"
    }
  },
  "definitions": {
    "Delete": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean",
          "default": false
        },
        "reasons": {
          "type": "array",
"maxItems": 2,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseWrapperPayslip": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Payslip"
        }
      }
    },
    "ResponseWrapperProspect": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Prospect"
        }
      }
    },
    "Customer": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "organizationNumber": {
          "type": "string",
          "maxLength": 100
        },
        "supplierNumber": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "customerNumber": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "isSupplier": {
          "type": "boolean",
          "default": false
        },
        "isCustomer": {
          "type": "boolean",
          "default": false
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        },
        "accountManager": {
          "$ref": "#/definitions/Employee"
        },
        "email": {
          "type": "string",
          "format": "email",
          "minLength": 0,
          "maxLength": 254
        },
        "invoiceEmail": {
          "type": "string",
          "minLength": 0,
          "maxLength": 254
        },
        "overdueNoticeEmail": {
          "type": "string",
          "format": "email",
          "minLength": 0,
          "maxLength": 254
        },
        "bankAccounts": {
          "type": "array",
"maxItems": 2,
          "items": {
            "type": "string"
          }
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        },
        "isPrivateIndividual": {
          "type": "boolean",
          "default": false
        },
        "singleCustomerInvoice": {
          "type": "boolean",
          "default": false
        },
        "invoiceSendMethod": {
          "type": "string",
          "enum": [
            "EMAIL",
            "EHF",
            "EFAKTURA",
            "VIPPS",
            "PAPER",
            "MANUAL"
          ]
        },
        "emailAttachmentType": {
          "type": "string",
          "enum": [
            "LINK",
            "ATTACHMENT"
          ]
        },
        "postalAddress": {
          "$ref": "#/definitions/Address"
        },
        "physicalAddress": {
          "$ref": "#/definitions/Address"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress"
        },
        "category1": {
          "$ref": "#/definitions/CustomerCategory"
        },
        "category2": {
          "$ref": "#/definitions/CustomerCategory"
        },
        "category3": {
          "$ref": "#/definitions/CustomerCategory"
        },
        "invoicesDueIn": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 10000
        },
        "invoicesDueInType": {
          "type": "string",
          "enum": [
            "DAYS",
            "MONTHS",
            "RECURRING_DAY_OF_MONTH"
          ]
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        },
        "ean": {
          "type": "string",
          "maxLength": 14
        },
        "elNumber": {
          "type": "string",
          "maxLength": 14
        },
        "nrfNumber": {
          "type": "string",
          "maxLength": 14
        },
        "costExcludingVatCurrency": {
          "type": "number"
        },
        "priceExcludingVatCurrency": {
          "type": "number"
        },
        "priceIncludingVatCurrency": {
          "type": "number"
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        },
        "productUnit": {
          "$ref": "#/definitions/ProductUnit"
        },
        "isStockItem": {
          "type": "boolean",
          "default": false
        },
        "stockOfGoods": {
          "type": "number"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "discountPrice": {
          "type": "number"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "resaleProduct": {
          "$ref": "#/definitions/Product"
        }
      }
    },
    "ListResponseTimeClock": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TimeClock"
          }
        }
      }
    },
    "ListResponseEmploymentDetails": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/EmploymentDetails"
          }
        }
      }
    },
    "ResponseWrapperCompanyHoliday": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/CompanyHoliday"
        }
      }
    },
    "ListResponsePayslip": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Payslip"
          }
        }
      }
    },
    "ProjectControlForm": {
      "type": "object",
      "required": [
        "comment",
        "title"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "comment": {
          "type": "string",
          "minLength": 1
        },
        "completed": {
          "type": "boolean",
          "default": false
        },
        "signatureRequired": {
          "type": "boolean",
          "default": false
        },
        "signed": {
          "type": "boolean",
          "default": false
        },
        "controlForm": {
          "type": "string"
        }
      }
    },
    "Employee": {
      "type": "object",
      "required": [
        "firstName",
        "lastName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "firstName": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100
        },
        "employeeNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "dateOfBirth": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 100
        },
        "phoneNumberMobileCountry": {
          "$ref": "#/definitions/Country"
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberHome": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberWork": {
          "type": "string",
          "maxLength": 100
        },
        "nationalIdentityNumber": {
          "type": "string",
          "maxLength": 100
        },
        "dnumber": {
          "type": "string",
          "maxLength": 11
        },
        "internationalId": {
          "$ref": "#/definitions/InternationalId"
        },
        "bankAccountNumber": {
          "type": "string",
          "maxLength": 100
        },
        "iban": {
          "type": "string"
        },
        "bic": {
          "type": "string"
        },
        "creditorBankCountryId": {
          "type": "integer",
          "format": "int32"
        },
        "usesAbroadPayment": {
          "type": "boolean",
          "default": false
        },
        "userType": {
          "type": "string",
          "enum": [
            "STANDARD",
            "EXTENDED",
            "NO_ACCESS"
          ]
        },
        "allowInformationRegistration": {
          "type": "boolean",
          "default": false
        },
        "isContact": {
          "type": "boolean",
          "default": false
        },
        "comments": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "employments": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Employment"
          }
        },
        "holidayAllowanceEarned": {
          "$ref": "#/definitions/HolidayAllowanceEarned"
        }
      }
    },
    "Week": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "timesheetEntries": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          }
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "week": {
          "type": "integer",
          "format": "int32"
        },
        "completed": {
          "type": "boolean",
          "default": false
        },
        "approved": {
          "type": "boolean",
          "default": false
        },
        "approvedBy": {
          "$ref": "#/definitions/Employee"
        },
        "approvedDate": {
          "type": "string"
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "rel": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "POST",
            "PUT",
            "GET",
            "DELETE"
          ]
        },
        "href": {
          "type": "string"
        }
      }
    },
    "ListResponseBankReconciliationMatch": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/BankReconciliationMatch"
          }
        }
      }
    },
    "AnnualAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "type": "string"
        },
        "end": {
          "type": "string"
        }
      }
    },
    "ListResponseCurrency": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Currency"
          }
        }
      }
    },
    "ListResponseWeek": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Week"
          }
        }
      }
    },
    "ListResponseActivity": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Activity"
          }
        }
      }
    },
    "TimesheetEntrySearchResponse": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          }
        },
        "sumAllHours": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ListResponseVoucher": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Voucher"
          }
        }
      }
    },
    "OrderLine": {
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "description": {
          "type": "string"
        },
        "count": {
          "type": "number",
          "format": "double"
        },
        "unitCostCurrency": {
          "type": "number"
        },
        "unitPriceExcludingVatCurrency": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "markup": {
          "type": "number",
          "format": "double"
        },
        "discount": {
          "type": "number",
          "format": "double"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "amountExcludingVatCurrency": {
          "type": "number"
        },
        "amountIncludingVatCurrency": {
          "type": "number"
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "unitPriceIncludingVatCurrency": {
          "type": "number"
        },
        "isSubscription": {
          "type": "boolean",
          "default": false
        },
        "subscriptionPeriodStart": {
          "type": "string"
        },
        "subscriptionPeriodEnd": {
          "type": "string"
        }
      }
    },
    "ListResponseCost": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Cost"
          }
        }
      }
    },
    "ApiConsumer": {
      "type": "object",
      "required": [
        "consumerName",
        "emails"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "consumerName": {
          "type": "string",
          "minLength": 5,
          "maxLength": 100
        },
        "emails": {
          "type": "string",
          "format": "email",
          "maxLength": 255
        }
      }
    },
    "ProjectPeriodInvoiced": {
      "type": "object",
      "properties": {
        "sumAmountPaid": {
          "type": "number"
        },
        "sumAmountOutstanding": {
          "type": "number"
        },
        "sumAmountDue": {
          "type": "number"
        },
        "sumAmountDueOutstanding": {
          "type": "number"
        },
        "sumAmount": {
          "type": "number"
        }
      }
    },
    "ListResponseProjectParticipant": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectParticipant"
          }
        }
      }
    },
    "ResponseWrapperMileageAllowance": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/MileageAllowance"
        }
      }
    },
    "ResponseWrapperTravelPaymentType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelPaymentType"
        }
      }
    },
    "Reminder": {
      "type": "object",
      "required": [
        "termOfPayment",
        "type"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "reminderDate": {
          "type": "string"
        },
        "charge": {
          "type": "number"
        },
        "chargeCurrency": {
          "type": "number"
        },
        "totalCharge": {
          "type": "number"
        },
        "totalChargeCurrency": {
          "type": "number"
        },
        "totalAmountCurrency": {
          "type": "number"
        },
        "interests": {
          "type": "number"
        },
        "interestRate": {
          "type": "number"
        },
        "termOfPayment": {
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "type": {
          "type": "string",
          "enum": [
            "SOFT_REMINDER",
            "REMINDER",
            "NOTICE_OF_DEBT_COLLECTION",
            "DEBT_COLLECTION"
          ]
        },
        "comment": {
          "type": "string"
        },
        "kid": {
          "type": "string",
          "maxLength": 25
        },
        "bankAccountNumber": {
          "type": "string",
          "maxLength": 255
        },
        "bankAccountIBAN": {
          "type": "string",
          "maxLength": 255
        },
        "bankAccountSWIFT": {
          "type": "string",
          "maxLength": 255
        },
        "bank": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "ResponseWrapperMapStringEventInfoDescription": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EventInfoDescription"
          }
        }
      }
    },
    "ResponseWrapperStandardTime": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/StandardTime"
        }
      }
    },
    "ResponseWrapperProjectControlForm": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectControlForm"
        }
      }
    },
    "ResponseWrapperObject": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object"
        }
      }
    },
    "ListResponseProductGroup": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProductGroup"
          }
        }
      }
    },
    "GoodsReceiptLine": {
      "type": "object",
      "required": [
        "product",
        "quantityReceived"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "purchaseOrder": {
          "$ref": "#/definitions/PurchaseOrder"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "quantityOrdered": {
          "type": "number",
          "format": "double"
        },
        "quantityReceived": {
          "type": "number",
          "format": "double"
        },
        "quantityRest": {
          "type": "number",
          "format": "double"
        },
        "deviation": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ResponseWrapperBankTransaction": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankTransaction"
        }
      }
    },
    "BankReconciliation": {
      "type": "object",
      "required": [
        "account",
        "accountingPeriod",
        "type"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "accountingPeriod": {
          "$ref": "#/definitions/AccountingPeriod"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher"
        },
        "transactions": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        },
        "isClosed": {
          "type": "boolean",
          "default": false
        },
        "type": {
          "type": "string",
          "enum": [
            "MANUAL",
            "AUTOMATIC"
          ]
        },
        "bankAccountClosingBalanceCurrency": {
          "type": "number"
        },
        "closedDate": {
          "type": "string"
        },
        "closedByContact": {
          "$ref": "#/definitions/Contact"
        },
        "closedByEmployee": {
          "$ref": "#/definitions/Employee"
        },
        "approvable": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ResponseWrapperGoodsReceipt": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/GoodsReceipt"
        }
      }
    },
    "ProductUnit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 100
        },
        "nameShort": {
          "type": "string",
          "maxLength": 50
        },
        "commonCode": {
          "type": "string",
          "maxLength": 50
        }
      }
    },
    "TravelCostCategory": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "isVatLocked": {
          "type": "boolean",
          "default": false
        },
        "showOnTravelExpenses": {
          "type": "boolean",
          "default": false
        },
        "showOnEmployeeExpenses": {
          "type": "boolean",
          "default": false
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ResponseWrapperConsumerToken": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ConsumerToken"
        }
      }
    },
    "ListResponseDeliveryAddress": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/DeliveryAddress"
          }
        }
      }
    },
    "TravelExpense": {
      "type": "object",
      "required": [
        "employee"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "approvedBy": {
          "$ref": "#/definitions/Employee"
        },
        "completedBy": {
          "$ref": "#/definitions/Employee"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "payslip": {
          "$ref": "#/definitions/Payslip"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "paymentCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "travelDetails": {
          "$ref": "#/definitions/TravelDetails"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher"
        },
        "attachment": {
          "$ref": "#/definitions/Document"
        },
        "isCompleted": {
          "type": "boolean",
          "default": false
        },
        "isApproved": {
          "type": "boolean",
          "default": false
        },
        "isChargeable": {
          "type": "boolean",
          "default": false
        },
        "isFixedInvoicedAmount": {
          "type": "boolean",
          "default": false
        },
        "isIncludeAttachedReceiptsWhenReinvoicing": {
          "type": "boolean",
          "default": false
        },
        "completedDate": {
          "type": "string"
        },
        "approvedDate": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "travelAdvance": {
          "type": "number"
        },
        "fixedInvoicedAmount": {
          "type": "number"
        },
        "amount": {
          "type": "number"
        },
        "paymentAmount": {
          "type": "number"
        },
        "chargeableAmount": {
          "type": "number"
        },
        "lowRateVAT": {
          "type": "number"
        },
        "mediumRateVAT": {
          "type": "number"
        },
        "highRateVAT": {
          "type": "number"
        },
        "paymentAmountCurrency": {
          "type": "number"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "invoice": {
          "$ref": "#/definitions/Invoice"
        },
        "title": {
          "type": "string",
          "maxLength": 255
        },
        "perDiemCompensations": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/PerDiemCompensation"
          }
        },
        "mileageAllowances": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/MileageAllowance"
          }
        },
        "accommodationAllowances": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/AccommodationAllowance"
          }
        },
        "costs": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Cost"
          }
        },
        "attachmentCount": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 2147483647
        },
        "state": {
          "type": "string",
          "enum": [
            "ALL",
            "OPEN",
            "APPROVED",
            "SALARY_PAID",
            "DELIVERED"
          ]
        },
        "actions": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "isSalaryAdmin": {
          "type": "boolean",
          "default": false
        },
        "showPayslip": {
          "type": "boolean",
          "default": false
        },
        "accountingPeriodClosed": {
          "type": "boolean",
          "default": false
        },
        "accountingPeriodVATClosed": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ResponseWrapperProjectPeriodInvoiced": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectPeriodInvoiced"
        }
      }
    },
    "ListResponseGoodsReceiptLine": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/GoodsReceiptLine"
          }
        }
      }
    },
    "PurchaseOrderline": {
      "type": "object",
      "required": [
        "purchaseOrder"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "description": {
          "type": "string"
        },
        "count": {
          "type": "number",
          "format": "double",
          "minimum": 1
        },
        "unitCostCurrency": {
          "type": "number"
        },
        "unitPriceExcludingVatCurrency": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "discount": {
          "type": "number",
          "format": "double"
        },
        "amountExcludingVatCurrency": {
          "type": "number"
        },
        "amountIncludingVatCurrency": {
          "type": "number"
        }
      }
    },
    "ListResponseAccount": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Account"
          }
        }
      }
    },
    "ListResponsePerDiemCompensation": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/PerDiemCompensation"
          }
        }
      }
    },
    "VatType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 10
        },
        "percentage": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ListResponsePaymentTypeOut": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/PaymentTypeOut"
          }
        }
      }
    },
    "ResponseWrapperTravelCostCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelCostCategory"
        }
      }
    },
    "TimesheetSalaryTypeSpecification": {
      "type": "object",
      "required": [
        "count",
        "date",
        "employee",
        "salaryType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "salaryType": {
          "$ref": "#/definitions/SalaryType"
        },
        "description": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "count": {
          "type": "number"
        }
      }
    },
    "ResponseWrapperTravelExpenseRate": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseRate"
        }
      }
    },
    "SalaryCompilation": {
      "type": "object",
      "properties": {
        "employee": {
          "type": "integer",
          "format": "int32"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "vacationPayBasis": {
          "type": "number"
        },
        "wages": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/SalaryCompilationLine"
          }
        },
        "expenses": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/SalaryCompilationLine"
          }
        },
        "deductions": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/SalaryCompilationLine"
          }
        }
      }
    },
    "ResponseWrapperAltinnCompanyModule": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AltinnCompanyModule"
        }
      }
    },
    "MessageBodyWorkers": {
      "type": "object"
    },
    "ResponseWrapperSupplier": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Supplier"
        }
      }
    },
    "LeaveOfAbsenceType": {
      "type": "object",
      "required": [
        "leaveOfAbsenceType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "leaveOfAbsenceType": {
          "type": "string",
          "enum": [
            "LEAVE_OF_ABSENCE",
            "FURLOUGH",
            "PARENTAL_BENEFITS",
            "MILITARY_SERVICE",
            "EDUCATIONAL",
            "COMPASSIONATE"
          ]
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "code": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "Prediction": {
      "type": "object",
      "properties": {
        "predictedValue": {
          "type": "string"
        },
        "correctedValue": {
          "type": "string"
        },
        "confidence": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperVoucherOptions": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherOptions"
        }
      }
    },
    "ResponseWrapperPurchaseOrderline": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PurchaseOrderline"
        }
      }
    },
    "ListResponseSupplier": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Supplier"
          }
        }
      }
    },
    "ResponseWrapperProductGroupRelation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductGroupRelation"
        }
      }
    },
    "ListResponseDepartment": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Department"
          }
        }
      }
    },
    "ResponseWrapperDepartment": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Department"
        }
      }
    },
    "ListResponseAnnualAccount": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/AnnualAccount"
          }
        }
      }
    },
    "ProjectInvoiceDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "feeAmount": {
          "type": "number"
        },
        "feeAmountCurrency": {
          "type": "number"
        },
        "markupPercent": {
          "type": "number"
        },
        "markupAmount": {
          "type": "number"
        },
        "markupAmountCurrency": {
          "type": "number"
        },
        "amountOrderLinesAndReinvoicing": {
          "type": "number"
        },
        "amountOrderLinesAndReinvoicingCurrency": {
          "type": "number"
        },
        "amountTravelReportsAndExpenses": {
          "type": "number"
        },
        "amountTravelReportsAndExpensesCurrency": {
          "type": "number"
        },
        "feeInvoiceText": {
          "type": "string"
        },
        "invoiceText": {
          "type": "string"
        },
        "includeOrderLinesAndReinvoicing": {
          "type": "boolean",
          "default": false
        },
        "includeHours": {
          "type": "boolean",
          "default": false
        },
        "includeOnAccountBalance": {
          "type": "boolean",
          "default": false
        },
        "onAccountBalanceAmount": {
          "type": "number"
        },
        "onAccountBalanceAmountCurrency": {
          "type": "number"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "invoice": {
          "$ref": "#/definitions/Invoice"
        }
      }
    },
    "Deviation": {
      "type": "object",
      "required": [
        "date",
        "purchaseOrderLine"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "purchaseOrderLine": {
          "$ref": "#/definitions/OrderLine"
        },
        "date": {
          "type": "string"
        },
        "cause": {
          "type": "string",
          "enum": [
            "CAUSE_DEFECT",
            "CAUSE_TOO_FEW",
            "CAUSE_TOO_MANY",
            "CAUSE_REPLACEMENT"
          ]
        },
        "action": {
          "type": "string",
          "enum": [
            "ACTION_IGNORE",
            "ACTION_GENERATE_RESTORDER",
            "ACTION_RETURN",
            "ACTION_RETURN_GENERATE_RESTORDER"
          ]
        },
        "comment": {
          "type": "string"
        },
        "receivedBy": {
          "type": "string"
        },
        "quantityOrdered": {
          "type": "number",
          "format": "double"
        },
        "quantityReceived": {
          "type": "number",
          "format": "double"
        },
        "deviation": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ListResponseProject": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Project"
          }
        }
      }
    },
    "CompanyHoliday": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "days": {
          "type": "number"
        },
        "vacationPayPercentage1": {
          "type": "number"
        },
        "vacationPayPercentage2": {
          "type": "number"
        },
        "isMaxPercentage2Amount6G": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "Posting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "amount": {
          "type": "number"
        },
        "amountCurrency": {
          "type": "number"
        },
        "amountGross": {
          "type": "number"
        },
        "amountGrossCurrency": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "closeGroup": {
          "$ref": "#/definitions/CloseGroup"
        },
        "invoiceNumber": {
          "type": "string",
          "maxLength": 100
        },
        "termOfPayment": {
          "type": "string"
        },
        "row": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "systemGenerated": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ResponseWrapperInventory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Inventory"
        }
      }
    },
    "ListResponseSubscription": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        }
      }
    },
    "ResponseWrapperBankReconciliation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliation"
        }
      }
    },
    "TimesheetSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "timeClock": {
          "type": "boolean",
          "default": false
        },
        "timesheetCompleted": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ResponseWrapperProject": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "BankTransaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "postedDate": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "amountCurrency": {
          "type": "number"
        },
        "bankStatement": {
          "$ref": "#/definitions/BankStatement"
        }
      }
    },
    "Employment": {
      "type": "object",
      "required": [
        "startDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "employmentId": {
          "type": "string",
          "maxLength": 255
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "division": {
          "$ref": "#/definitions/Division"
        },
        "lastSalaryChangeDate": {
          "type": "string"
        },
        "noEmploymentRelationship": {
          "type": "boolean",
          "default": false
        },
        "isMainEmployer": {
          "type": "boolean",
          "default": false
        },
        "taxDeductionCode": {
          "type": "string",
          "enum": [
            "loennFraHovedarbeidsgiver",
            "loennFraBiarbeidsgiver",
            "pensjon",
            "loennTilUtenrikstjenestemann",
            "loennKunTrygdeavgiftTilUtenlandskBorger",
            "loennKunTrygdeavgiftTilUtenlandskBorgerSomGrensegjenger",
            "introduksjonsstoenad",
            "ufoereytelserFraAndre",
            "EMPTY"
          ]
        },
        "employmentDetails": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/EmploymentDetails"
          }
        }
      }
    },
    "ListResponseTravelExpenseZone": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TravelExpenseZone"
          }
        }
      }
    },
    "SupplierInvoice": {
      "type": "object",
      "required": [
        "invoiceDate",
        "invoiceDueDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "invoiceNumber": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "invoiceDate": {
          "type": "string"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "invoiceDueDate": {
          "type": "string"
        },
        "kidOrReceiverReference": {
          "type": "string"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher"
        },
        "amount": {
          "type": "number"
        },
        "amountCurrency": {
          "type": "number"
        },
        "amountExcludingVat": {
          "type": "number"
        },
        "amountExcludingVatCurrency": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "isCreditNote": {
          "type": "boolean",
          "default": false
        },
        "orderLines": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/OrderLine"
          }
        },
        "payments": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Posting"
          }
        }
      }
    },
    "ListResponseProjectOrderLine": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectOrderLine"
          }
        }
      }
    },
    "ListResponseLeaveOfAbsence": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/LeaveOfAbsence"
          }
        }
      }
    },
    "ListResponseTravelExpenseRateCategory": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TravelExpenseRateCategory"
          }
        }
      }
    },
    "InternationalId": {
      "type": "object",
      "properties": {
        "intAmeldingType": {
          "type": "string",
          "enum": [
            "PASSPORT_NO",
            "NATIONAL_INSURANCE_NO",
            "TAX_IDENTIFICATION_NO",
            "VALUE_ADDED_TAX_IDENTIFICATION_NO"
          ]
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "number": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ListResponseBankReconciliationPaymentType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/BankReconciliationPaymentType"
          }
        }
      }
    },
    "ListResponseOrderLine": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/OrderLine"
          }
        }
      }
    },
    "ResponseWrapperVoucherType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherType"
        }
      }
    },
    "ListResponseLeaveOfAbsenceType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/LeaveOfAbsenceType"
          }
        }
      }
    },
    "ProjectOrderLine": {
      "type": "object",
      "required": [
        "date",
        "project"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "description": {
          "type": "string"
        },
        "count": {
          "type": "number",
          "format": "double"
        },
        "unitCostCurrency": {
          "type": "number"
        },
        "unitPriceExcludingVatCurrency": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "markup": {
          "type": "number",
          "format": "double"
        },
        "discount": {
          "type": "number",
          "format": "double"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "amountExcludingVatCurrency": {
          "type": "number"
        },
        "amountIncludingVatCurrency": {
          "type": "number"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "date": {
          "type": "string"
        },
        "isChargeable": {
          "type": "boolean",
          "default": false
        },
        "isBudget": {
          "type": "boolean",
          "default": false
        },
        "invoice": {
          "$ref": "#/definitions/Invoice"
        }
      }
    },
    "MonthlyStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "timesheetEntries": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          }
        },
        "approvedDate": {
          "type": "string"
        },
        "completed": {
          "type": "boolean",
          "default": false
        },
        "approvedBy": {
          "$ref": "#/definitions/Employee"
        },
        "approved": {
          "type": "boolean",
          "default": false
        },
        "approvedUntilDate": {
          "type": "string"
        },
        "monthYear": {
          "type": "string"
        },
        "hoursPayout": {
          "type": "number"
        },
        "vacationPayout": {
          "type": "number"
        },
        "hourSummary": {
          "$ref": "#/definitions/HourSummary"
        },
        "flexSummary": {
          "$ref": "#/definitions/FlexSummary"
        },
        "vacationSummary": {
          "$ref": "#/definitions/EmployeePeriod"
        }
      }
    },
    "ResponseWrapperProjectPeriodHourlyReport": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectPeriodHourlyReport"
        }
      }
    },
    "Entitlement": {
      "type": "object",
      "required": [
        "customer",
        "employee",
        "entitlementId"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "name": {
          "type": "string"
        },
        "entitlementId": {
          "type": "integer",
          "format": "int32"
        },
        "customer": {
          "$ref": "#/definitions/Company"
        }
      }
    },
    "ResponseWrapperVoucher": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Voucher"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "addressLine1": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "addressLine2": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "postalCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "city": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "country": {
          "$ref": "#/definitions/Country"
        }
      }
    },
    "ListResponseCompany": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Company"
          }
        }
      }
    },
    "BankReconciliationPaymentType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "debitAccount": {
          "$ref": "#/definitions/Account"
        },
        "creditAccount": {
          "$ref": "#/definitions/Account"
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ResponseWrapperProjectInvoiceDetails": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectInvoiceDetails"
        }
      }
    },
    "ResponseWrapperNextOfKin": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/NextOfKin"
        }
      }
    },
    "SalaryType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "number": {
          "type": "string",
          "maxLength": 10
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "type": "string"
        },
        "showInTimesheet": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ResponseWrapperVatType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/VatType"
        }
      }
    },
    "Stocktaking": {
      "type": "object",
      "required": [
        "date",
        "inventory",
        "typeOfStocktaking"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "date": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "typeOfStocktaking": {
          "type": "string",
          "enum": [
            "ALL_PRODUCTS_WITH_INVENTORIES",
            "INCLUDE_PRODUCTS",
            "NO_PRODUCTS"
          ]
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "isCompleted": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "CloseGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "postings": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Posting"
          }
        }
      }
    },
    "ListResponsePaymentType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/PaymentType"
          }
        }
      }
    },
    "ProjectSpecificRate": {
      "type": "object",
      "required": [
        "hourlyRate",
        "projectHourlyRate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "hourlyRate": {
          "type": "number"
        },
        "hourlyCostPercentage": {
          "type": "number"
        },
        "projectHourlyRate": {
          "$ref": "#/definitions/ProjectHourlyRate"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "activity": {
          "$ref": "#/definitions/Activity"
        }
      }
    },
    "CurrencyExchangeRate": {
      "type": "object",
      "required": [
        "sourceCurrency",
        "targetCurrency"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "targetCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "sourceCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "rate": {
          "type": "number",
          "minimum": 0
        },
        "source": {
          "type": "string",
          "enum": [
            "NORGES_BANK",
            "HALLONEN"
          ]
        },
        "date": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperPaymentTypeOut": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PaymentTypeOut"
        }
      }
    },
    "ExternalProduct": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "elNumber": {
          "type": "string",
          "maxLength": 14
        },
        "nrfNumber": {
          "type": "string",
          "maxLength": 14
        },
        "costExcludingVatCurrency": {
          "type": "number"
        },
        "priceExcludingVatCurrency": {
          "type": "number"
        },
        "priceIncludingVatCurrency": {
          "type": "number"
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        },
        "productUnit": {
          "$ref": "#/definitions/ProductUnit"
        },
        "isStockItem": {
          "type": "boolean",
          "default": false
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "discountPrice": {
          "type": "number"
        }
      }
    },
    "CustomerCategory": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        }
      }
    },
    "NextOfKin": {
      "type": "object",
      "required": [
        "name",
        "phoneNumber"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 20
        },
        "address": {
          "type": "string",
          "maxLength": 255
        },
        "typeOfRelationship": {
          "type": "string",
          "enum": [
            "SPOUSE",
            "PARTNER",
            "PARENT",
            "CHILD",
            "SIBLING"
          ]
        }
      }
    },
    "TimeClock": {
      "type": "object",
      "required": [
        "date",
        "employee",
        "timeStart",
        "timeStop",
        "timesheetEntry"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "timesheetEntry": {
          "$ref": "#/definitions/TimesheetEntry"
        },
        "date": {
          "type": "string"
        },
        "timeStart": {
          "type": "string"
        },
        "timeStop": {
          "type": "string"
        },
        "hoursStart": {
          "type": "number",
          "format": "double",
          "minimum": 0
        }
      }
    },
    "ListResponseBankReconciliation": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/BankReconciliation"
          }
        }
      }
    },
    "ResponseWrapperTimeClock": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TimeClock"
        }
      }
    },
    "ResponseWrapperCustomer": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Customer"
        }
      }
    },
    "BankReconciliationMatch": {
      "type": "object",
      "required": [
        "bankReconciliation"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "bankReconciliation": {
          "$ref": "#/definitions/BankReconciliation"
        },
        "type": {
          "type": "string",
          "enum": [
            "MANUAL",
            "PENDING_SUGGESTION",
            "REJECTED_SUGGESTION",
            "APPROVED_SUGGESTION",
            "ADJUSTMENT",
            "AUTO_MATCHED",
            "REJECTED_AUTO_MATCH"
          ]
        },
        "transactions": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        },
        "postings": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Posting"
          }
        }
      }
    },
    "ListResponseTravelCostCategory": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TravelCostCategory"
          }
        }
      }
    },
    "FormDataContentDisposition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fileName": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "readDate": {
          "type": "string",
          "format": "date-time"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperSupplierInvoice": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SupplierInvoice"
        }
      }
    },
    "ListResponseWorkingHoursScheme": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/WorkingHoursScheme"
          }
        }
      }
    },
    "ListResponseTravelExpenseRateCategoryGroup": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TravelExpenseRateCategoryGroup"
          }
        }
      }
    },
    "LedgerAccount": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "sumAmount": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "sumAmountCurrency": {
          "type": "number"
        },
        "openingBalance": {
          "type": "number"
        },
        "openingBalanceCurrency": {
          "type": "number"
        },
        "closingBalance": {
          "type": "number"
        },
        "closingBalanceCurrency": {
          "type": "number"
        },
        "postings": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Posting"
          }
        }
      }
    },
    "ResponseWrapperBankReconciliationPaymentType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliationPaymentType"
        }
      }
    },
    "Division": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "organizationNumber": {
          "type": "string",
          "maxLength": 100
        },
        "municipality": {
          "$ref": "#/definitions/Municipality"
        }
      }
    },
    "Supplier": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "organizationNumber": {
          "type": "string",
          "maxLength": 100
        },
        "supplierNumber": {
          "type": "integer",
          "format": "int32"
        },
        "customerNumber": {
          "type": "integer",
          "format": "int32"
        },
        "isSupplier": {
          "type": "boolean",
          "default": false
        },
        "isCustomer": {
          "type": "boolean",
          "default": false
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        },
        "email": {
          "type": "string",
          "format": "email",
          "minLength": 0,
          "maxLength": 254
        },
        "bankAccounts": {
          "type": "array",
"maxItems": 2,
          "items": {
            "type": "string"
          }
        },
        "invoiceEmail": {
          "type": "string",
          "format": "email",
          "minLength": 0,
          "maxLength": 254
        },
        "overdueNoticeEmail": {
          "type": "string",
          "format": "email",
          "minLength": 0,
          "maxLength": 254
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        },
        "isPrivateIndividual": {
          "type": "boolean",
          "default": false
        },
        "showProducts": {
          "type": "boolean",
          "default": false
        },
        "accountManager": {
          "$ref": "#/definitions/Employee"
        },
        "postalAddress": {
          "$ref": "#/definitions/Address"
        },
        "physicalAddress": {
          "$ref": "#/definitions/Address"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress"
        },
        "category1": {
          "$ref": "#/definitions/CustomerCategory"
        },
        "category2": {
          "$ref": "#/definitions/CustomerCategory"
        },
        "category3": {
          "$ref": "#/definitions/CustomerCategory"
        }
      }
    },
    "ProjectParticipant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "adminAccess": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ListResponseExternalProduct": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ExternalProduct"
          }
        }
      }
    },
    "ProjectPeriodHourlyReport": {
      "type": "object",
      "properties": {
        "chargeableHours": {
          "type": "number"
        },
        "nonChargeableHours": {
          "type": "number"
        },
        "approvedButUnchargedHours": {
          "type": "number"
        },
        "nonApprovedHours": {
          "type": "number"
        },
        "registeredHours": {
          "type": "number"
        }
      }
    },
    "ListResponseOccupationCode": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/OccupationCode"
          }
        }
      }
    },
    "ResponseWrapperSalesModuleDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesModuleDTO"
        }
      }
    },
    "SessionToken": {
      "type": "object",
      "required": [
        "expirationDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "consumerToken": {
          "$ref": "#/definitions/ConsumerToken"
        },
        "employeeToken": {
          "$ref": "#/definitions/EmployeeToken"
        },
        "expirationDate": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "encryptionKey": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ListResponseContact": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Contact"
          }
        }
      }
    },
    "ResponseWrapperTravelExpense": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpense"
        }
      }
    },
    "FormDataBodyPart": {
      "type": "object",
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
"maxItems": 2,
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "formDataContentDisposition": {
          "$ref": "#/definitions/FormDataContentDisposition"
        },
        "simple": {
          "type": "boolean",
          "default": false
        },
        "parameterizedHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
"maxItems": 2,
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            }
          }
        }
      }
    },
    "PurchaseOrder": {
      "type": "object",
      "required": [
        "deliveryDate",
        "ourContact",
        "supplier"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "receiverEmail": {
          "type": "string",
          "maxLength": 100
        },
        "discount": {
          "type": "number",
          "format": "double"
        },
        "packingNoteMessage": {
          "type": "string",
          "maxLength": 50
        },
        "transporterMessage": {
          "type": "string",
          "maxLength": 255
        },
        "comments": {
          "type": "string"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "deliveryDate": {
          "type": "string"
        },
        "orderLines": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/PurchaseOrderline"
          }
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "creationDate": {
          "type": "string"
        },
        "isClosed": {
          "type": "boolean",
          "default": false
        },
        "ourContact": {
          "$ref": "#/definitions/Employee"
        },
        "supplierContact": {
          "$ref": "#/definitions/Employee"
        },
        "attention": {
          "$ref": "#/definitions/Employee"
        },
        "status": {
          "type": "string",
          "enum": [
            "STATUS_OPEN",
            "STATUS_SENT",
            "STATUS_RECEIVING",
            "STATUS_CONFIRMED_DEVIATION_DETECTED",
            "STATUS_DEVIATION_OPEN",
            "STATUS_DEVIATION_CONFIRMED",
            "STATUS_CONFIRMED"
          ]
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "restorder": {
          "$ref": "#/definitions/PurchaseOrder"
        }
      }
    },
    "Prospect": {
      "type": "object",
      "required": [
        "createdDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "type": "string"
        },
        "createdDate": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "salesEmployee": {
          "$ref": "#/definitions/Employee"
        },
        "isClosed": {
          "type": "boolean",
          "default": false
        },
        "closedReason": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "closedDate": {
          "type": "string"
        },
        "competitor": {
          "type": "string",
          "maxLength": 255
        },
        "prospectType": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "projectOffer": {
          "$ref": "#/definitions/Project"
        },
        "finalIncomeDate": {
          "type": "string"
        },
        "finalInitialValue": {
          "type": "number"
        },
        "finalMonthlyValue": {
          "type": "number"
        },
        "finalAdditionalServicesValue": {
          "type": "number"
        },
        "totalValue": {
          "type": "number"
        }
      }
    },
    "BodyPart": {
      "type": "object",
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
"maxItems": 2,
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "parameterizedHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
"maxItems": 2,
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            }
          }
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "Inventories": {
      "type": "object",
      "properties": {
        "product": {
          "$ref": "#/definitions/Product"
        },
        "stock": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Stock"
          }
        }
      }
    },
    "SalaryCompilationLine": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "taxable": {
          "type": "boolean",
          "default": false
        },
        "taxableDescription": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperDeviation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Deviation"
        }
      }
    },
    "TravelPaymentType": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "showOnTravelExpenses": {
          "type": "boolean",
          "default": false
        },
        "showOnEmployeeExpenses": {
          "type": "boolean",
          "default": false
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "OccupationCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "code": {
          "type": "string",
          "maxLength": 7
        }
      }
    },
    "EmploymentType": {
      "type": "object",
      "required": [
        "employmentType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employmentType": {
          "type": "string",
          "enum": [
            "ORDINARY",
            "MARITIME",
            "FREELANCE"
          ]
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "code": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ResponseWrapperPerDiemCompensation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PerDiemCompensation"
        }
      }
    },
    "StandardTime": {
      "type": "object",
      "required": [
        "fromDate",
        "hoursPerDay"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "fromDate": {
          "type": "string"
        },
        "hoursPerDay": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ResponseWrapperInvoice": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Invoice"
        }
      }
    },
    "EventInfoDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "payloadModel": {
          "type": "string"
        },
        "examples": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/WebHookWrapper"
          }
        }
      }
    },
    "VoucherSearchResponse": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Voucher"
          }
        },
        "totalNumberOfPostings": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResponseWrapperAccount": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Account"
        }
      }
    },
    "ListResponseDeviation": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Deviation"
          }
        }
      }
    },
    "ResponseWrapperSalaryTransaction": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryTransaction"
        }
      }
    },
    "Payslip": {
      "type": "object",
      "required": [
        "employee"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "transaction": {
          "$ref": "#/definitions/SalaryTransaction"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "date": {
          "type": "string"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "type": "integer",
          "format": "int32"
        },
        "specifications": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/SalarySpecification"
          }
        },
        "vacationAllowanceAmount": {
          "type": "number"
        },
        "grossAmount": {
          "type": "number"
        },
        "amount": {
          "type": "number"
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        }
      }
    },
    "ResponseWrapperProductLine": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductLine"
        }
      }
    },
    "ListResponseProductUnit": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProductUnit"
          }
        }
      }
    },
    "DocumentArchive": {
      "type": "object",
      "required": [
        "fileName",
        "mimeType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "fileName": {
          "type": "string",
          "maxLength": 255
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "archiveDate": {
          "type": "string"
        },
        "mimeType": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "TravelExpenseSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "useRates": {
          "type": "boolean",
          "default": false
        },
        "approvalRequired": {
          "type": "boolean",
          "default": false
        },
        "taxFreePerDiemRates": {
          "type": "boolean",
          "default": false
        },
        "taxFreeMileageRates": {
          "type": "boolean",
          "default": false
        },
        "perDiemNotCompensated": {
          "type": "boolean",
          "default": false
        },
        "accommodationNotCompensated": {
          "type": "boolean",
          "default": false
        },
        "mileageNotCompensated": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ListResponseTravelExpense": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TravelExpense"
          }
        }
      }
    },
    "ResponseWrapperSalaryCompilation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryCompilation"
        }
      }
    },
    "TravelExpenseRateCategory": {
      "type": "object",
      "required": [
        "fromDate",
        "toDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "ameldingWageCode": {
          "type": "integer",
          "format": "int32"
        },
        "wageCodeNumber": {
          "type": "string",
          "maxLength": 10
        },
        "isValidDayTrip": {
          "type": "boolean",
          "default": false
        },
        "isValidAccommodation": {
          "type": "boolean",
          "default": false
        },
        "isValidDomestic": {
          "type": "boolean",
          "default": false
        },
        "isValidForeignTravel": {
          "type": "boolean",
          "default": false
        },
        "isRequiresZone": {
          "type": "boolean",
          "default": false
        },
        "isRequiresOvernightAccommodation": {
          "type": "boolean",
          "default": false
        },
        "fromDate": {
          "type": "string"
        },
        "toDate": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "PER_DIEM",
            "ACCOMMODATION_ALLOWANCE",
            "MILEAGE_ALLOWANCE"
          ]
        }
      }
    },
    "EmployeeToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "apiConsumer": {
          "$ref": "#/definitions/ApiConsumer"
        },
        "token": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperTravelExpenseSettings": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseSettings"
        }
      }
    },
    "ResponseWrapperPosting": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Posting"
        }
      }
    },
    "PaymentType": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "debitAccount": {
          "$ref": "#/definitions/Account"
        },
        "creditAccount": {
          "$ref": "#/definitions/Account"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        }
      }
    },
    "ListResponseRemunerationType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/RemunerationType"
          }
        }
      }
    },
    "ResponseWrapperSessionToken": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SessionToken"
        }
      }
    },
    "ResponseWrapperProjectActivity": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectActivity"
        }
      }
    },
    "HourlyCostAndRate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "date": {
          "type": "string"
        },
        "rate": {
          "type": "number"
        },
        "budgetRate": {
          "type": "number"
        },
        "hourCostRate": {
          "type": "number"
        }
      }
    },
    "ListResponseDocumentArchive": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/DocumentArchive"
          }
        }
      }
    },
    "ListResponseCustomer": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Customer"
          }
        }
      }
    },
    "ResponseWrapperProjectSpecificRate": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectSpecificRate"
        }
      }
    },
    "ListResponseHourlyCostAndRate": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/HourlyCostAndRate"
          }
        }
      }
    },
    "ResponseWrapperCustomerCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/CustomerCategory"
        }
      }
    },
    "ResponseWrapperProjectParticipant": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectParticipant"
        }
      }
    },
    "ListResponseTravelPaymentType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TravelPaymentType"
          }
        }
      }
    },
    "ProductGroup": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "parentGroup": {
          "$ref": "#/definitions/ProductGroup"
        }
      }
    },
    "ResponseWrapperWeek": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Week"
        }
      }
    },
    "ListResponseProductGroupRelation": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProductGroupRelation"
          }
        }
      }
    },
    "ResponseWrapperExternalProduct": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ExternalProduct"
        }
      }
    },
    "Activity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        },
        "activityType": {
          "type": "string",
          "enum": [
            "GENERAL_ACTIVITY",
            "PROJECT_GENERAL_ACTIVITY",
            "PROJECT_SPECIFIC_ACTIVITY",
            "TASK"
          ]
        },
        "isProjectActivity": {
          "type": "boolean",
          "default": false
        },
        "isGeneral": {
          "type": "boolean",
          "default": false
        },
        "isTask": {
          "type": "boolean",
          "default": false
        },
        "isDisabled": {
          "type": "boolean",
          "default": false
        },
        "isChargeable": {
          "type": "boolean",
          "default": false
        },
        "rate": {
          "type": "number"
        }
      }
    },
    "ListResponseNextOfKin": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/NextOfKin"
          }
        }
      }
    },
    "ListResponseSupplierInvoice": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/SupplierInvoice"
          }
        }
      }
    },
    "Document": {
      "type": "object",
      "required": [
        "fileName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "fileName": {
          "type": "string",
          "maxLength": 255
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "mimeType": {
          "type": "string",
          "example": "type/subtype of resource. E.g. application/pdf",
          "maxLength": 100
        }
      }
    },
    "ResponseWrapperEventInfoDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/EventInfoDTO"
        }
      }
    },
    "ResponseWrapperMonthlyStatus": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/MonthlyStatus"
        }
      }
    },
    "Department": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "departmentNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "departmentManager": {
          "$ref": "#/definitions/Employee"
        }
      }
    },
    "ProjectPeriodInvoicingReserve": {
      "type": "object",
      "properties": {
        "invoiceFeeReserveCurrency": {
          "type": "number"
        },
        "periodOrderLinesIncomeCurrency": {
          "type": "number"
        },
        "invoiceExtracostsReserveCurrency": {
          "type": "number"
        },
        "invoiceAkontoReserveAmountCurrency": {
          "type": "number"
        },
        "invoiceReserveTotalAmountCurrency": {
          "type": "number"
        }
      }
    },
    "ListResponseGoodsReceipt": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/GoodsReceipt"
          }
        }
      }
    },
    "Currency": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "code": {
          "type": "string",
          "maxLength": 10
        },
        "description": {
          "type": "string",
          "maxLength": 100
        },
        "factor": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100
        }
      }
    },
    "ResponseWrapperProjectHourlyRate": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectHourlyRate"
        }
      }
    },
    "MediaType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "subtype": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "wildcardType": {
          "type": "boolean",
          "default": false
        },
        "wildcardSubtype": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ListResponseBankStatement": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/BankStatement"
          }
        }
      }
    },
    "ListResponseEmployee": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Employee"
          }
        }
      }
    },
    "ListResponseStandardTime": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/StandardTime"
          }
        }
      }
    },
    "ListResponseBank": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Bank"
          }
        }
      }
    },
    "ResponseWrapperCost": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Cost"
        }
      }
    },
    "AccountingPeriod": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 11
        },
        "start": {
          "type": "string"
        },
        "end": {
          "type": "string"
        },
        "isClosed": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ProjectHourlyRate": {
      "type": "object",
      "required": [
        "hourlyRateModel",
        "startDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "startDate": {
          "type": "string"
        },
        "showInProjectOrder": {
          "type": "boolean",
          "default": false
        },
        "hourlyRateModel": {
          "type": "string",
          "enum": [
            "TYPE_PREDEFINED_HOURLY_RATES",
            "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
            "TYPE_FIXED_HOURLY_RATE"
          ]
        },
        "projectSpecificRates": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectSpecificRate"
          }
        },
        "fixedRate": {
          "type": "number"
        }
      }
    },
    "ResponseWrapperProjectPeriodInvoicingReserve": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectPeriodInvoicingReserve"
        }
      }
    },
    "Project": {
      "type": "object",
      "required": [
        "isInternal",
        "name",
        "projectManager",
        "startDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "projectManager": {
          "$ref": "#/definitions/Employee"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "mainProject": {
          "$ref": "#/definitions/Project"
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "isClosed": {
          "type": "boolean",
          "default": false
        },
        "isReadyForInvoicing": {
          "type": "boolean",
          "default": false
        },
        "isInternal": {
          "type": "boolean",
          "default": false
        },
        "isOffer": {
          "type": "boolean",
          "default": false
        },
        "isFixedPrice": {
          "type": "boolean",
          "default": false
        },
        "projectCategory": {
          "$ref": "#/definitions/ProjectCategory"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress"
        },
        "displayNameFormat": {
          "type": "string",
          "enum": [
            "NAME_STANDARD",
            "NAME_INCL_CUSTOMER_NAME",
            "NAME_INCL_PARENT_NAME",
            "NAME_INCL_PARENT_NUMBER",
            "NAME_INCL_PARENT_NAME_AND_NUMBER"
          ]
        },
        "externalAccountsNumber": {
          "type": "string",
          "maxLength": 100
        },
        "discountPercentage": {
          "type": "number"
        },
        "extraPercentOrderLines": {
          "type": "number"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "fixedprice": {
          "type": "number"
        },
        "contributionMarginPercent": {
          "type": "number"
        },
        "numberOfSubProjects": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfProjectParticipants": {
          "type": "integer",
          "format": "int32"
        },
        "orderLines": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectOrderLine"
          }
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "markUpOrderLines": {
          "type": "number"
        },
        "markUpFeesEarned": {
          "type": "number"
        },
        "isPriceCeiling": {
          "type": "boolean",
          "default": false
        },
        "priceCeilingAmount": {
          "type": "number"
        },
        "projectHourlyRates": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectHourlyRate"
          }
        },
        "forParticipantsOnly": {
          "type": "boolean",
          "default": false
        },
        "participants": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectParticipant"
          }
        },
        "contact": {
          "$ref": "#/definitions/Contact"
        },
        "invoicingPlan": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Invoice"
          }
        },
        "preliminaryInvoice": {
          "$ref": "#/definitions/Invoice"
        },
        "generalProjectActivitiesPerProjectOnly": {
          "type": "boolean",
          "default": false
        },
        "projectActivities": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectActivity"
          }
        }
      }
    },
    "ListResponseAccountingPeriod": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/AccountingPeriod"
          }
        }
      }
    },
    "ResponseWrapperProjectCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectCategory"
        }
      }
    },
    "LoggedInUserInfoDTO": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "integer",
          "format": "int32"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "companyId": {
          "type": "integer",
          "format": "int32"
        },
        "company": {
          "$ref": "#/definitions/Company"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "Inventory": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100
        },
        "isMainInventory": {
          "type": "boolean",
          "default": false
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "Stock": {
      "type": "object",
      "properties": {
        "inventory": {
          "type": "string",
          "maxLength": 255
        },
        "openingStock": {
          "type": "number"
        },
        "changesInPeriod": {
          "type": "number"
        },
        "closingStock": {
          "type": "number"
        }
      }
    },
    "ResponseWrapperTravelExpenseZone": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseZone"
        }
      }
    },
    "ListResponsePosting": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Posting"
          }
        }
      }
    },
    "ParameterizedHeader": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Bank": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "bankStatementFileFormatSupport": {
          "type": "array",
"maxItems": 2,
          "items": {
            "type": "string",
            "enum": [
              "DNB_CSV",
              "EIKA_TELEPAY",
              "SPAREBANK1_TELEPAY",
              "VISMA_ACCOUNT_STATEMENT",
              "HANDELSBANKEN_TELEPAY",
              "SPAREBANKEN_VEST_TELEPAY",
              "NORDEA_CSV",
              "TRANSFERWISE",
              "SPAREBANKEN_SOR_TELEPAY",
              "SPAREBANKEN_OST_TELEPAY",
              "DANSKE_BANK_CSV"
            ]
          }
        },
        "registerNumbers": {
          "type": "array",
"maxItems": 2,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "BankStatement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "openingBalanceCurrency": {
          "type": "number"
        },
        "closingBalanceCurrency": {
          "type": "number"
        },
        "fileName": {
          "type": "string"
        },
        "bank": {
          "$ref": "#/definitions/Bank"
        },
        "fromDate": {
          "type": "string"
        },
        "toDate": {
          "type": "string"
        },
        "transactions": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        }
      }
    },
    "ResponseWrapperProductUnit": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductUnit"
        }
      }
    },
    "DeliveryAddress": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "addressLine1": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "addressLine2": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "postalCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "city": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "name": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ResponseWrapperTravelExpenseRateCategoryGroup": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseRateCategoryGroup"
        }
      }
    },
    "Providers": {
      "type": "object"
    },
    "ResponseWrapperBankReconciliationMatch": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliationMatch"
        }
      }
    },
    "ListResponseReminder": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Reminder"
          }
        }
      }
    },
    "ResponseWrapperSalarySettings": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalarySettings"
        }
      }
    },
    "FormDataMultiPart": {
      "type": "object",
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
"maxItems": 2,
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "bodyParts": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/BodyPart"
          }
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
"maxItems": 2,
            "items": {
              "$ref": "#/definitions/FormDataBodyPart"
            }
          }
        },
        "parameterizedHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
"maxItems": 2,
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            }
          }
        }
      }
    },
    "ListResponseProjectSpecificRate": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectSpecificRate"
          }
        }
      }
    },
    "MaritimeEmployment": {
      "type": "object",
      "properties": {
        "shipRegister": {
          "type": "string",
          "enum": [
            "NIS",
            "NOR",
            "FOREIGN"
          ]
        },
        "shipType": {
          "type": "string",
          "enum": [
            "OTHER",
            "DRILLING_PLATFORM",
            "TOURIST"
          ]
        },
        "tradeArea": {
          "type": "string",
          "enum": [
            "DOMESTIC",
            "FOREIGN"
          ]
        }
      }
    },
    "ResponseWrapperAnnualAccount": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AnnualAccount"
        }
      }
    },
    "ListResponseEmploymentType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/EmploymentType"
          }
        }
      }
    },
    "ConsumerToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "apiConsumer": {
          "$ref": "#/definitions/ApiConsumer"
        },
        "token": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperTimesheetEntry": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetEntry"
        }
      }
    },
    "BankReconciliationAdjustment": {
      "type": "object",
      "required": [
        "paymentType"
      ],
      "properties": {
        "paymentType": {
          "$ref": "#/definitions/BankReconciliationPaymentType"
        },
        "bankTransactions": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        },
        "postingDate": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "minimum": 0
        },
        "postings": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Posting"
          }
        },
        "bankReconciliationMatch": {
          "$ref": "#/definitions/BankReconciliationMatch"
        }
      }
    },
    "ResponseWrapperLoggedInUserInfoDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/LoggedInUserInfoDTO"
        }
      }
    },
    "EmploymentDetails": {
      "type": "object",
      "required": [
        "percentageOfFullTimeEquivalent"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employment": {
          "$ref": "#/definitions/Employment"
        },
        "date": {
          "type": "string"
        },
        "employmentType": {
          "type": "string",
          "enum": [
            "ORDINARY",
            "MARITIME",
            "FREELANCE"
          ]
        },
        "maritimeEmployment": {
          "$ref": "#/definitions/MaritimeEmployment"
        },
        "remunerationType": {
          "type": "string",
          "enum": [
            "MONTHLY_WAGE",
            "HOURLY_WAGE",
            "COMMISION_PERCENTAGE",
            "FEE",
            "PIECEWORK_WAGE"
          ]
        },
        "workingHoursScheme": {
          "type": "string",
          "enum": [
            "NOT_SHIFT",
            "ROUND_THE_CLOCK",
            "SHIFT_365",
            "OFFSHORE_336",
            "CONTINUOUS",
            "OTHER_SHIFT"
          ]
        },
        "shiftDurationHours": {
          "type": "number",
          "format": "double"
        },
        "occupationCode": {
          "$ref": "#/definitions/OccupationCode"
        },
        "percentageOfFullTimeEquivalent": {
          "type": "number",
          "format": "double"
        },
        "annualSalary": {
          "type": "number",
          "format": "double"
        },
        "hourlyWage": {
          "type": "number",
          "format": "double"
        },
        "payrollTaxMunicipalityId": {
          "$ref": "#/definitions/Municipality"
        }
      }
    },
    "ListResponseBankTransaction": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        }
      }
    },
    "ListResponseInvoice": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Invoice"
          }
        }
      }
    },
    "ListResponseProduct": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Product"
          }
        }
      }
    },
    "ResponseWrapperProduct": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Product"
        }
      }
    },
    "MileageAllowance": {
      "type": "object",
      "required": [
        "date",
        "departureLocation",
        "destination"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "date": {
          "type": "string"
        },
        "departureLocation": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "km": {
          "type": "number"
        },
        "rate": {
          "type": "number"
        },
        "amount": {
          "type": "number"
        },
        "isCompanyCar": {
          "type": "boolean",
          "default": false
        },
        "passengers": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Passenger"
          }
        },
        "passengerSupplement": {
          "$ref": "#/definitions/MileageAllowance"
        },
        "tollCost": {
          "$ref": "#/definitions/Cost"
        }
      }
    },
    "AccommodationAllowance": {
      "type": "object",
      "required": [
        "location"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "zone": {
          "type": "string"
        },
        "location": {
          "type": "string",
          "maxLength": 255
        },
        "address": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "rate": {
          "type": "number"
        },
        "amount": {
          "type": "number"
        }
      }
    },
    "ListResponseEmployment": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Employment"
          }
        }
      }
    },
    "ListResponsePurchaseOrder": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/PurchaseOrder"
          }
        }
      }
    },
    "ListResponseTask": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Task"
          }
        }
      }
    },
    "ResponseWrapperEmployment": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Employment"
        }
      }
    },
    "SalarySettings": {
      "type": "object",
      "required": [
        "payrollTaxCalcMethod"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "municipality": {
          "$ref": "#/definitions/Municipality"
        },
        "payrollTaxCalcMethod": {
          "type": "string",
          "enum": [
            "AA",
            "BB",
            "CC",
            "DD",
            "EE",
            "GG",
            "JJ",
            "EMPTY"
          ]
        }
      }
    },
    "ListResponseCountry": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Country"
          }
        }
      }
    },
    "ResponseWrapperDeliveryAddress": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/DeliveryAddress"
        }
      }
    },
    "VoucherType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ListResponseInventories": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Inventories"
          }
        }
      }
    },
    "ListResponseCustomerCategory": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/CustomerCategory"
          }
        }
      }
    },
    "LeaveOfAbsence": {
      "type": "object",
      "required": [
        "percentage",
        "startDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "employment": {
          "$ref": "#/definitions/Employment"
        },
        "leaveOfAbsenceId": {
          "type": "string",
          "maxLength": 255
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "percentage": {
          "type": "number",
          "format": "double"
        },
        "isWageDeduction": {
          "type": "boolean",
          "default": false
        },
        "type": {
          "type": "string",
          "enum": [
            "LEAVE_OF_ABSENCE",
            "FURLOUGH",
            "PARENTAL_BENEFITS",
            "MILITARY_SERVICE",
            "EDUCATIONAL",
            "COMPASSIONATE"
          ]
        }
      }
    },
    "ResponseWrapperCurrency": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Currency"
        }
      }
    },
    "ResponseWrapperActivity": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Activity"
        }
      }
    },
    "ResponseWrapperDocument": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Document"
        }
      }
    },
    "ListResponseCompanyHoliday": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/CompanyHoliday"
          }
        }
      }
    },
    "ResponseWrapperCountry": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Country"
        }
      }
    },
    "ResponseWrapperEmploymentDetails": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/EmploymentDetails"
        }
      }
    },
    "ProjectPeriodMonthlyStatus": {
      "type": "object",
      "properties": {
        "income": {
          "type": "number"
        },
        "costs": {
          "type": "number"
        },
        "dateFrom": {
          "type": "string"
        },
        "dateTo": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperCurrencyExchangeRate": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/CurrencyExchangeRate"
        }
      }
    },
    "ResponseWrapperDivision": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Division"
        }
      }
    },
    "HolidayAllowanceEarned": {
      "type": "object",
      "properties": {
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "amount": {
          "type": "number"
        },
        "basis": {
          "type": "number"
        },
        "amountExtraHolidayWeek": {
          "type": "number"
        }
      }
    },
    "PerDiemCompensation": {
      "type": "object",
      "required": [
        "location"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "countryCode": {
          "type": "string"
        },
        "travelExpenseZoneId": {
          "type": "integer",
          "format": "int32"
        },
        "overnightAccommodation": {
          "type": "string",
          "enum": [
            "NONE",
            "HOTEL",
            "BOARDING_HOUSE_WITHOUT_COOKING",
            "BOARDING_HOUSE_WITH_COOKING"
          ]
        },
        "location": {
          "type": "string",
          "maxLength": 255
        },
        "address": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "rate": {
          "type": "number"
        },
        "amount": {
          "type": "number"
        },
        "isDeductionForBreakfast": {
          "type": "boolean",
          "default": false
        },
        "isDeductionForLunch": {
          "type": "boolean",
          "default": false
        },
        "isDeductionForDinner": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ResponseWrapperOrderLine": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/OrderLine"
        }
      }
    },
    "ContentDisposition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fileName": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "readDate": {
          "type": "string",
          "format": "date-time"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PaymentTypeOut": {
      "type": "object",
      "required": [
        "creditAccount",
        "description"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "isBruttoWageDeduction": {
          "type": "boolean",
          "default": false
        },
        "creditAccount": {
          "$ref": "#/definitions/Account"
        },
        "showIncomingInvoice": {
          "type": "boolean",
          "default": false
        },
        "showWagePayment": {
          "type": "boolean",
          "default": false
        },
        "showVatReturns": {
          "type": "boolean",
          "default": false
        },
        "showWagePeriodTransaction": {
          "type": "boolean",
          "default": false
        },
        "requiresSeparateVoucher": {
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "TravelExpenseZone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "zoneName": {
          "type": "string",
          "maxLength": 255
        },
        "isDisabled": {
          "type": "boolean",
          "default": false
        },
        "governmentName": {
          "type": "string",
          "maxLength": 255
        },
        "continent": {
          "type": "string",
          "maxLength": 50
        }
      }
    },
    "ResponseWrapperContact": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "ListResponseVatType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/VatType"
          }
        }
      }
    },
    "Account": {
      "type": "object",
      "required": [
        "name",
        "number"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "ASSETS",
            "EQUITY",
            "LIABILITIES",
            "OPERATING_REVENUES",
            "OPERATING_EXPENSES",
            "INVESTMENT_INCOME",
            "COST_OF_CAPITAL",
            "TAX_ON_ORDINARY_ACTIVITIES",
            "EXTRAORDINARY_INCOME",
            "EXTRAORDINARY_COST",
            "TAX_ON_EXTRAORDINARY_ACTIVITIES",
            "ANNUAL_RESULT",
            "TRANSFERS_AND_ALLOCATIONS"
          ]
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "vatLocked": {
          "type": "boolean",
          "default": false
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "isCloseable": {
          "type": "boolean",
          "default": false
        },
        "isApplicableForSupplierInvoice": {
          "type": "boolean",
          "default": false
        },
        "requireReconciliation": {
          "type": "boolean",
          "default": false
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        },
        "isBankAccount": {
          "type": "boolean",
          "default": false
        },
        "isInvoiceAccount": {
          "type": "boolean",
          "default": false
        },
        "bankAccountNumber": {
          "type": "string",
          "maxLength": 100
        },
        "bankAccountCountry": {
          "$ref": "#/definitions/Country"
        },
        "bankName": {
          "type": "string",
          "maxLength": 255
        },
        "bankAccountIBAN": {
          "type": "string",
          "maxLength": 100
        },
        "bankAccountSWIFT": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ResponseWrapperTravelExpenseRateCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        }
      }
    },
    "Invoice": {
      "type": "object",
      "required": [
        "invoiceDate",
        "invoiceDueDate",
        "orders"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "invoiceNumber": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "invoiceDate": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "invoiceDueDate": {
          "type": "string"
        },
        "kid": {
          "type": "string",
          "maxLength": 25
        },
        "invoiceComment": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "orders": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "projectInvoiceDetails": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectInvoiceDetails"
          }
        },
        "voucher": {
          "$ref": "#/definitions/Voucher"
        },
        "deliveryDate": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "amountCurrency": {
          "type": "number"
        },
        "amountExcludingVat": {
          "type": "number"
        },
        "amountExcludingVatCurrency": {
          "type": "number"
        },
        "amountRoundoff": {
          "type": "number"
        },
        "amountRoundoffCurrency": {
          "type": "number"
        },
        "amountOutstanding": {
          "type": "number"
        },
        "amountOutstandingTotal": {
          "type": "number"
        },
        "sumRemits": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "isCreditNote": {
          "type": "boolean",
          "default": false
        },
        "isCharged": {
          "type": "boolean",
          "default": false
        },
        "isApproved": {
          "type": "boolean",
          "default": false
        },
        "postings": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Posting"
          }
        },
        "reminders": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Reminder"
          }
        },
        "invoiceRemarks": {
          "type": "string"
        },
        "ehfSendStatus": {
          "type": "string",
          "enum": [
            "DO_NOT_SEND",
            "SEND",
            "SENT",
            "SEND_FAILURE_RECIPIENT_NOT_FOUND"
          ]
        }
      }
    },
    "TravelDetails": {
      "type": "object",
      "properties": {
        "isForeignTravel": {
          "type": "boolean",
          "default": false
        },
        "isDayTrip": {
          "type": "boolean",
          "default": false
        },
        "isCompensationFromRates": {
          "type": "boolean",
          "default": false
        },
        "departureDate": {
          "type": "string"
        },
        "returnDate": {
          "type": "string"
        },
        "detailedJourneyDescription": {
          "type": "string"
        },
        "departureFrom": {
          "type": "string",
          "maxLength": 255
        },
        "destination": {
          "type": "string",
          "maxLength": 255
        },
        "departureTime": {
          "type": "string",
          "maxLength": 20
        },
        "returnTime": {
          "type": "string",
          "maxLength": 20
        },
        "purpose": {
          "type": "string"
        }
      }
    },
    "ListResponseLedgerAccount": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/LedgerAccount"
          }
        }
      }
    },
    "ResponseWrapperEmployee": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Employee"
        }
      }
    },
    "ResponseWrapperHourlyCostAndRate": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/HourlyCostAndRate"
        }
      }
    },
    "ListResponseProspect": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Prospect"
          }
        }
      }
    },
    "ResponseWrapperGoodsReceiptLine": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/GoodsReceiptLine"
        }
      }
    },
    "ResponseWrapperCompany": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Company"
        }
      }
    },
    "EventInfoDescription": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "payloadModel": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperTimesheetSalaryTypeSpecification": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetSalaryTypeSpecification"
        }
      }
    },
    "ResponseWrapperProjectPeriodOverallStatus": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectPeriodOverallStatus"
        }
      }
    },
    "ResponseWrapperAccommodationAllowance": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AccommodationAllowance"
        }
      }
    },
    "Subscription": {
      "type": "object",
      "required": [
        "event",
        "targetUrl"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "event": {
          "type": "string",
          "example": "customer.create",
          "minLength": 1,
          "maxLength": 255
        },
        "targetUrl": {
          "type": "string",
          "example": "https://username:password@myintegration.example/tripletexCallback",
          "minLength": 1,
          "maxLength": 255
        },
        "fields": {
          "type": "string",
          "example": "id,version,number",
          "maxLength": 255
        },
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "DISABLED",
            "DISABLED_TOO_MANY_ERRORS",
            "DISABLED_RATE_LIMIT_EXCEEDED",
            "DISABLED_MISUSE"
          ]
        },
        "authHeaderName": {
          "type": "string",
          "example": "Authorization",
          "maxLength": 255
        },
        "authHeaderValue": {
          "type": "string",
          "example": "Basic dXNlcm5hbWU6cGFzc3dvcmQ=",
          "maxLength": 4096
        }
      }
    },
    "ProductLine": {
      "type": "object",
      "required": [
        "product",
        "stocktaking"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "stocktaking": {
          "$ref": "#/definitions/Stocktaking"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "count": {
          "type": "number"
        },
        "unitCostCurrency": {
          "type": "number"
        },
        "costCurrency": {
          "type": "number"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "ListResponseProjectInvoiceDetails": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectInvoiceDetails"
          }
        }
      }
    },
    "Municipality": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "number": {
          "type": "string",
          "maxLength": 4
        },
        "name": {
          "type": "string",
          "maxLength": 100
        },
        "county": {
          "type": "string",
          "maxLength": 100
        },
        "payrollTaxZone": {
          "type": "string"
        }
      }
    },
    "ProjectCategory": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        }
      }
    },
    "ListResponseInventory": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Inventory"
          }
        }
      }
    },
    "TravelExpenseRateCategoryGroup": {
      "type": "object",
      "required": [
        "fromDate",
        "toDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isForeignTravel": {
          "type": "boolean",
          "default": false
        },
        "fromDate": {
          "type": "string"
        },
        "toDate": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperEntitlement": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Entitlement"
        }
      }
    },
    "ResponseWrapperBankStatement": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankStatement"
        }
      }
    },
    "ResponseWrapperStocktaking": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Stocktaking"
        }
      }
    },
    "HourSummary": {
      "type": "object",
      "properties": {
        "sumHours": {
          "type": "number",
          "format": "double"
        },
        "hoursWithPay": {
          "type": "number",
          "format": "double"
        },
        "hourlyWageHoursWithPay": {
          "type": "number",
          "format": "double"
        },
        "nonChargeableHours": {
          "type": "number",
          "format": "double"
        },
        "chargeableHours": {
          "type": "number",
          "format": "double"
        },
        "nonChargeableHoursWithPay": {
          "type": "number",
          "format": "double"
        },
        "budgetChargeableHours": {
          "type": "number",
          "format": "double"
        },
        "standardTime": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ResponseWrapperProjectOrderLine": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectOrderLine"
        }
      }
    },
    "Country": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isoAlpha2Code": {
          "type": "string"
        },
        "isoAlpha3Code": {
          "type": "string",
          "maxLength": 3
        },
        "isoNumericCode": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperReminder": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Reminder"
        }
      }
    },
    "ListResponseTimesheetSalaryTypeSpecification": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TimesheetSalaryTypeSpecification"
          }
        }
      }
    },
    "WebHookWrapper": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object"
        },
        "event": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ListResponseMileageAllowance": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/MileageAllowance"
          }
        }
      }
    },
    "ListResponseProjectPeriodMonthlyStatus": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectPeriodMonthlyStatus"
          }
        }
      }
    },
    "ResponseWrapperOrder": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Order"
        }
      }
    },
    "ProjectActivity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "isClosed": {
          "type": "boolean",
          "default": false
        },
        "budgetHours": {
          "type": "number"
        },
        "budgetHourlyRateCurrency": {
          "type": "number"
        },
        "budgetFeeCurrency": {
          "type": "number"
        }
      }
    },
    "Passenger": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "mileageAllowance": {
          "$ref": "#/definitions/MileageAllowance"
        }
      }
    },
    "ListResponseProductLine": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProductLine"
          }
        }
      }
    },
    "AltinnCompanyModule": {
      "type": "object",
      "required": [
        "altInnId",
        "altInnPassword"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "altInnId": {
          "type": "integer",
          "format": "int32"
        },
        "altInnPassword": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100
        }
      }
    },
    "ListResponseStocktaking": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Stocktaking"
          }
        }
      }
    },
    "ListResponseCloseGroup": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/CloseGroup"
          }
        }
      }
    },
    "ListResponseDivision": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Division"
          }
        }
      }
    },
    "ResponseWrapperTimesheetSettings": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetSettings"
        }
      }
    },
    "ListResponseOrder": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Order"
          }
        }
      }
    },
    "ResponseWrapperAccountingPeriod": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AccountingPeriod"
        }
      }
    },
    "ResponseWrapperCloseGroup": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/CloseGroup"
        }
      }
    },
    "ResponseWrapperPurchaseOrder": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PurchaseOrder"
        }
      }
    },
    "ListResponseProjectCategory": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectCategory"
          }
        }
      }
    },
    "ResponseWrapperLeaveOfAbsence": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/LeaveOfAbsence"
        }
      }
    },
    "Company": {
      "type": "object",
      "required": [
        "address",
        "name",
        "type"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "organizationNumber": {
          "type": "string",
          "maxLength": 100
        },
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "faxNumber": {
          "type": "string",
          "maxLength": 100
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "type": {
          "type": "string",
          "enum": [
            "NONE",
            "ENK",
            "AS",
            "NUF",
            "ANS",
            "DA",
            "PRE",
            "KS",
            "ASA",
            "BBL",
            "BRL",
            "GFS",
            "SPA",
            "SF",
            "IKS",
            "KF_FKF",
            "FCD",
            "EOFG",
            "BA",
            "STI",
            "ORG",
            "ESEK",
            "SA",
            "SAM",
            "BO",
            "VPFO",
            "OS",
            "Other"
          ]
        }
      }
    },
    "ListResponseBankReconciliationAdjustment": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/BankReconciliationAdjustment"
          }
        }
      }
    },
    "ListResponseMunicipality": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Municipality"
          }
        }
      }
    },
    "ResponseWrapperSubscription": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Subscription"
        }
      }
    },
    "ResponseWrapperProductGroup": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductGroup"
        }
      }
    },
    "ResponseWrapperPaymentType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PaymentType"
        }
      }
    },
    "ListResponseProjectHourlyRate": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectHourlyRate"
          }
        }
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "customer",
        "deliveryDate",
        "orderDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "contact": {
          "$ref": "#/definitions/Contact"
        },
        "attn": {
          "$ref": "#/definitions/Contact"
        },
        "receiverEmail": {
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "overdueNoticeEmail": {
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "reference": {
          "type": "string",
          "maxLength": 255
        },
        "ourContact": {
          "$ref": "#/definitions/Contact"
        },
        "ourContactEmployee": {
          "$ref": "#/definitions/Employee"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "orderDate": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "invoiceComment": {
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "invoicesDueIn": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 10000
        },
        "invoicesDueInType": {
          "type": "string",
          "enum": [
            "DAYS",
            "MONTHS",
            "RECURRING_DAY_OF_MONTH"
          ]
        },
        "isShowOpenPostsOnInvoices": {
          "type": "boolean",
          "default": false
        },
        "isClosed": {
          "type": "boolean",
          "default": false
        },
        "deliveryDate": {
          "type": "string"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress"
        },
        "deliveryComment": {
          "type": "string"
        },
        "isPrioritizeAmountsIncludingVat": {
          "type": "boolean",
          "default": false
        },
        "orderLineSorting": {
          "type": "string",
          "enum": [
            "ID",
            "PRODUCT",
            "CUSTOM"
          ]
        },
        "orderLines": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/OrderLine"
          }
        },
        "isSubscription": {
          "type": "boolean",
          "default": false
        },
        "subscriptionDuration": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "subscriptionDurationType": {
          "type": "string",
          "enum": [
            "MONTHS",
            "YEAR"
          ]
        },
        "subscriptionPeriodsOnInvoice": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "subscriptionPeriodsOnInvoiceType": {
          "type": "string",
          "enum": [
            "MONTHS"
          ]
        },
        "subscriptionInvoicingTimeInAdvanceOrArrears": {
          "type": "string",
          "enum": [
            "ADVANCE",
            "ARREARS"
          ]
        },
        "subscriptionInvoicingTime": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "subscriptionInvoicingTimeType": {
          "type": "string",
          "enum": [
            "DAYS",
            "MONTHS"
          ]
        },
        "isSubscriptionAutoInvoicing": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ResponseWrapperPassenger": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Passenger"
        }
      }
    },
    "RemunerationType": {
      "type": "object",
      "required": [
        "remunerationType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "remunerationType": {
          "type": "string",
          "enum": [
            "MONTHLY_WAGE",
            "HOURLY_WAGE",
            "COMMISION_PERCENTAGE",
            "FEE",
            "PIECEWORK_WAGE"
          ]
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "code": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ResponseWrapperDocumentArchive": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/DocumentArchive"
        }
      }
    },
    "ListResponseEntitlement": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Entitlement"
          }
        }
      }
    },
    "SalarySpecification": {
      "type": "object",
      "required": [
        "count",
        "rate",
        "salaryType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "rate": {
          "type": "number"
        },
        "count": {
          "type": "number"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "salaryType": {
          "$ref": "#/definitions/SalaryType"
        },
        "payslip": {
          "$ref": "#/definitions/Payslip"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "description": {
          "type": "string"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "type": "integer",
          "format": "int32"
        },
        "amount": {
          "type": "number"
        }
      }
    },
    "GoodsReceipt": {
      "type": "object",
      "required": [
        "goodsReceiptLines",
        "registrationDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "purchaseOrder": {
          "$ref": "#/definitions/PurchaseOrder"
        },
        "registrationDate": {
          "type": "string"
        },
        "receivedBy": {
          "$ref": "#/definitions/Employee"
        },
        "status": {
          "type": "string",
          "enum": [
            "STATUS_OPEN",
            "STATUS_CONFIRMED"
          ]
        },
        "goodsReceiptLines": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/GoodsReceiptLine"
          }
        }
      }
    },
    "ListResponseMonthlyStatus": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/MonthlyStatus"
          }
        }
      }
    },
    "ListResponsePassenger": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Passenger"
          }
        }
      }
    },
    "EmployeePeriod": {
      "type": "object",
      "properties": {
        "incomingVacationBalance": {
          "type": "number",
          "format": "double"
        },
        "outgoingVacationBalance": {
          "type": "number",
          "format": "double"
        },
        "vacationTakenInPeriod": {
          "type": "number",
          "format": "double"
        },
        "vacationTakenThisYear": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ProjectPeriodOverallStatus": {
      "type": "object",
      "properties": {
        "income": {
          "type": "number"
        },
        "costs": {
          "type": "number"
        }
      }
    },
    "TimesheetEntry": {
      "type": "object",
      "required": [
        "activity",
        "date",
        "employee",
        "hours"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "date": {
          "type": "string"
        },
        "hours": {
          "type": "number",
          "format": "double"
        },
        "chargeableHours": {
          "type": "number",
          "format": "double"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "timeClocks": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TimeClock"
          }
        },
        "comment": {
          "type": "string"
        },
        "locked": {
          "type": "boolean",
          "default": false
        },
        "chargeable": {
          "type": "boolean",
          "default": false
        },
        "invoice": {
          "$ref": "#/definitions/Invoice"
        },
        "hourlyRate": {
          "type": "number"
        },
        "hourlyCost": {
          "type": "number"
        },
        "hourlyCostPercentage": {
          "type": "number"
        }
      }
    },
    "ResponseWrapperEmployeeToken": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/EmployeeToken"
        }
      }
    },
    "ListResponseSalesModuleDTO": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/SalesModuleDTO"
          }
        }
      }
    },
    "Cost": {
      "type": "object",
      "required": [
        "amountCurrencyIncVat",
        "paymentType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "costCategory": {
          "$ref": "#/definitions/TravelCostCategory"
        },
        "paymentType": {
          "$ref": "#/definitions/TravelPaymentType"
        },
        "category": {
          "type": "string",
          "maxLength": 100
        },
        "comments": {
          "type": "string"
        },
        "rate": {
          "type": "number"
        },
        "amountCurrencyIncVat": {
          "type": "number"
        },
        "amountNOKInclVAT": {
          "type": "number"
        },
        "amountNOKInclVATLow": {
          "type": "number"
        },
        "amountNOKInclVATMedium": {
          "type": "number"
        },
        "amountNOKInclVATHigh": {
          "type": "number"
        },
        "isPaidByEmployee": {
          "type": "boolean",
          "default": false
        },
        "isChargeable": {
          "type": "boolean",
          "default": false
        },
        "date": {
          "type": "string"
        },
        "predictions": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
"maxItems": 2,
            "items": {
              "$ref": "#/definitions/Prediction"
            }
          }
        }
      }
    },
    "ListResponseSalaryType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/SalaryType"
          }
        }
      }
    },
    "WorkingHoursScheme": {
      "type": "object",
      "required": [
        "workingHoursScheme"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "workingHoursScheme": {
          "type": "string",
          "enum": [
            "NOT_SHIFT",
            "ROUND_THE_CLOCK",
            "SHIFT_365",
            "OFFSHORE_336",
            "CONTINUOUS",
            "OTHER_SHIFT"
          ]
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "code": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ListResponseTimesheetEntry": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          }
        }
      }
    },
    "TravelExpenseRate": {
      "type": "object",
      "required": [
        "rateCategory",
        "zone"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "zone": {
          "type": "string"
        },
        "rate": {
          "type": "number"
        },
        "breakfastDeductionRate": {
          "type": "number"
        },
        "lunchDeductionRate": {
          "type": "number"
        },
        "dinnerDeductionRate": {
          "type": "number"
        }
      }
    },
    "ResponseWrapperDouble": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "MultiPart": {
      "type": "object",
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
"maxItems": 2,
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "bodyParts": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/BodyPart"
          }
        },
        "parameterizedHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
"maxItems": 2,
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            }
          }
        }
      }
    },
    "SalaryTransaction": {
      "type": "object",
      "required": [
        "month",
        "payslips",
        "year"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "type": "integer",
          "format": "int32"
        },
        "isHistorical": {
          "type": "boolean",
          "default": false
        },
        "paySlipsAvailableDate": {
          "type": "string"
        },
        "payslips": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Payslip"
          }
        }
      }
    },
    "FlexSummary": {
      "type": "object",
      "properties": {
        "incomingHourBalance": {
          "type": "number",
          "format": "double"
        },
        "outgoingHourBalance": {
          "type": "number",
          "format": "double"
        },
        "change": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "SalesModuleDTO": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "MAMUT",
            "MAMUT_WITH_WAGE",
            "AGRO_LICENCE",
            "AGRO_CLIENT",
            "AGRO_DOCUMENT_CENTER",
            "AGRO_INVOICE",
            "AGRO_WAGE"
          ]
        },
        "costStartDate": {
          "type": "string"
        }
      }
    },
    "ListResponseProjectControlForm": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/ProjectControlForm"
          }
        }
      }
    },
    "ListResponseTravelExpenseRate": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/TravelExpenseRate"
          }
        }
      }
    },
    "Change": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "changeType": {
          "type": "string",
          "enum": [
            "CREATE",
            "UPDATE",
            "DELETE",
            "LOCKED",
            "REOPENED",
            "DO_NOT_SHOW"
          ]
        },
        "periodLocked": {
          "type": "string"
        },
        "periodReopened": {
          "type": "string"
        }
      }
    },
    "Contact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "firstName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "email": {
          "type": "string",
          "format": "email",
          "minLength": 0,
          "maxLength": 100
        },
        "phoneNumberMobileCountry": {
          "$ref": "#/definitions/Country"
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        }
      }
    },
    "Voucher": {
      "type": "object",
      "required": [
        "date",
        "description",
        "postings"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "description": {
          "type": "string"
        },
        "voucherType": {
          "$ref": "#/definitions/VoucherType"
        },
        "reverseVoucher": {
          "$ref": "#/definitions/Voucher"
        },
        "postings": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Posting"
          }
        },
        "document": {
          "$ref": "#/definitions/Document"
        },
        "attachment": {
          "$ref": "#/definitions/Document"
        },
        "ediDocument": {
          "$ref": "#/definitions/Document"
        }
      }
    },
    "ListResponseVoucherType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/VoucherType"
          }
        }
      }
    },
    "ProductGroupRelation": {
      "type": "object",
      "required": [
        "product",
        "productGroup"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "productGroup": {
          "$ref": "#/definitions/ProductGroup"
        }
      }
    },
    "ResponseWrapperSalaryType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryType"
        }
      }
    },
    "ListResponseAccommodationAllowance": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string"
        },
        "values": {
          "type": "array",
"maxItems": 2,
          "items": {
            "$ref": "#/definitions/AccommodationAllowance"
          }
        }
      }
    },
    "VoucherOptions": {
      "type": "object",
      "properties": {
        "delete": {
          "$ref": "#/definitions/Delete"
        }
      }
    }
  }
}