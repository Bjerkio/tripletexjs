{
  "openapi": "3.0.0",
  "info": {
    "description": "The Tripletex API is a **RESTful API**, which does not implement PATCH, but uses a PUT with optional fields.\n\n**Actions** or commands are represented in our RESTful path with a prefixed `:`. Example: `/v2/hours/123/:approve`.\n\n**Summaries** or aggregated results are represented in our RESTful path with a prefixed <code>&gt;</code>. Example: <code>/v2/hours/&gt;thisWeeksBillables</code>.\n\n**\"requestID\"** is a key found in all responses in the header with the name `x-tlx-request-id`. For validation and error responses it is also in the response body. If additional log information is absolutely necessary, our support division can locate the key value.\n\n**Download** the [swagger.json](/v2/swagger.json) file [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) to [generate code](https://github.com/swagger-api/swagger-codegen). This document was generated from the Swagger JSON file.\n\n**version:** This is a versioning number found on all DB records. If included, it will prevent your PUT/POST from overriding any updates to the record since your GET.\n\n**Date & DateTime** follows the **ISO 8601** standard. Date: `YYYY-MM-DD`. DateTime: `YYYY-MM-DDThh:mm:ssZ`\n\n**Sorting** is done by specifying a comma separated list, where a `-` prefix denotes descending. You can sort by sub object with the following format: `project.name, -date`.\n\n**Searching:** is done by entering values in the optional fields for each API call. The values fall into the following categories: range, in, exact and like.\n\n**Missing fields or even no response data** can occur because result objects and fields are filtered on authorization.\n\n**See [FAQ](https://tripletex.no/execute/docViewer?articleId=906&language=0) for more additional information.**\n\n\n## Authentication:\n- **Tokens:** The Tripletex API uses 3 different tokens - **consumerToken**, **employeeToken** and **sessionToken**.\n\n- **consumerToken** is a token provided to the consumer by Tripletex after the API 2.0 registration is completed.\n\n- **employeeToken** is a token created by an administrator in your Tripletex account via the user settings and the tab \"API access\". Each employee token must be given a set of entitlements. [Read more here.](https://tripletex.no/execute/docViewer?articleId=853&language=0)\n\n- **sessionToken** is the token from `/token/session/:create` which requires a consumerToken and an employeeToken created with the same consumer token, but not an authentication header. See how to create a sessionToken [here](https://tripletex.no/execute/docViewer?articleId=855&language=0).\n- The session token is used as the password in \"Basic Authentication Header\" for API calls.\n\n- Use blank or `0` as username for accessing the account with regular employee token, or if a company owned employee token accesses <code>/company/&gt;withLoginAccess</code> or <code>/token/session/&gt;whoAmI</code>.\n\n- For company owned employee tokens (accounting offices) the ID from <code>/company/&gt;withLoginAccess</code> can be used as username for accessing client accounts.\n\n- If you need to create the header yourself use <code>Authorization: Basic &lt;base64encode('0:sessionToken')&gt;</code>.\n\n\n## Tags:\n- **[BETA]** This is a beta endpoint and can be subject to change.\n- **[DEPRECATED]** Deprecated means that we intend to remove/change this feature or capability in a future \"major\" API release. We therefore discourage all use of this feature/capability.\n\n## Fields:\nUse the `fields` parameter to specify which fields should be returned. This also supports fields from sub elements. Example values:\n- `project,activity,hours`  returns `{project:..., activity:...., hours:...}`.\n- just `project` returns `\"project\" : { \"id\": 12345, \"url\": \"tripletex.no/v2/projects/12345\"  }`.\n- `project(*)` returns `\"project\" : { \"id\": 12345 \"name\":\"ProjectName\" \"number.....startDate\": \"2013-01-07\" }`.\n- `project(name)` returns `\"project\" : { \"name\":\"ProjectName\" }`.\n- All elements and some subElements :  `*,activity(name),employee(*)`.\n\n## Changes:\nTo get the changes for a resource, `changes` have to be explicitly specified as part of the `fields` parameter, e.g. `*,changes`.\nThere are currently two types of change available: \n- `CREATE` for when the resource was created\n- `UPDATE` for when the resource was updated\n\nNOTE: For objects created prior to October 24th 2018 the list may be incomplete, but will always contain the CREATE and the last change (if the object has been changed after creation).\n\n## Rate limiting in each response header:\nRate limiting is performed on the API calls for an employee for each API consumer. Status regarding the rate limit is returned as headers:\n- `X-Rate-Limit-Limit` - The number of allowed requests in the current period.\n- `X-Rate-Limit-Remaining` - The number of remaining requests.\n- `X-Rate-Limit-Reset` - The number of seconds left in the current period.\n\nOnce the rate limit is hit, all requests will return HTTP status code `429` for the remainder of the current period.\n\n\n## Response envelope:\n```json\n{\n  \"fullResultSize\": ###,\n  \"from\": ###, // Paging starting from\n  \"count\": ###, // Paging count\n  \"versionDigest\": \"Hash of full result\",\n  \"values\": [...list of objects...]\n}\n{\n  \"value\": {...single object...}\n}\n```\n\n\n## WebHook envelope:\n```json\n{\n  \"subscriptionId\": ###,\n  \"event\": \"object.verb\", // As listed from /v2/event/\n  \"id\": ###, // Object id\n  \"value\": {... single object, null if object.deleted ...}\n}\n```\n\n\n\n## Error/warning envelope:\n```json\n{\n  \"status\": ###, // HTTP status code\n  \"code\": #####, // internal status code of event\n  \"message\": \"Basic feedback message in your language\",\n  \"link\": \"Link to doc\",\n  \"developerMessage\": \"More technical message\",\n  \"validationMessages\": [ // Will be null if Error\n    {\n      \"field\": \"Name of field\",\n      \"message\": \"Validation failure information\"\n    }\n  ],\n  \"requestId\": \"UUID used in any logs\"\n}\n```\n\n\n## Status codes / Error codes:\n- **200 OK**\n- **201 Created** - From POSTs that create something new.\n- **204 No Content** - When there is no answer, ex: \"/:anAction\" or DELETE.\n- **400 Bad request** -\n  - **4000**\tBad Request Exception\n  - **11000**\tIllegal Filter Exception\n  - **12000**\tPath Param Exception\n  - **24000**   Cryptography Exception\n- **401 Unauthorized** - When authentication is required and has failed or has not yet been provided\n  -  **3000**\tAuthentication Exception\n- **403 Forbidden** - When AuthorisationManager says no.\n  -  **9000**\tSecurity Exception\n- **404 Not Found** - For content/IDs that does not exist.\n  -  **6000**\tNot Found Exception\n- **409 Conflict** - Such as an edit conflict between multiple simultaneous updates\n  -  **7000**\tObject Exists Exception\n  -  **8000**\tRevision Exception\n  - **10000**\tLocked Exception\n  - **14000**\tDuplicate entry\n- **422 Bad Request** - For Required fields or things like malformed payload.\n  - **15000**\tValue Validation Exception\n  - **16000**\tMapping Exception\n  - **17000**\tSorting Exception\n  - **18000**\tValidation Exception\n  - **21000**\tParam Exception\n  - **22000**\tInvalid JSON Exception\n  - **23000**   Result Set Too Large Exception\n- **429 Too Many Requests** - Request rate limit hit\n- **500 Internal Error** -  Unexpected condition was encountered and no more specific message is suitable\n  -  **1000**\tException",
    "version": "2.41.1",
    "title": "Tripletex API",
    "contact": {
      "name": "tripletex-api2 on GitHub",
      "url": "https://github.com/Tripletex/tripletex-api2"
    }
  },
  "paths": {
    "/activity": {
      "get": {
        "tags": [
          "activity"
        ],
        "summary": "Find activities corresponding with sent data.",
        "description": "",
        "operationId": "listActivity",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isProjectActivity",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isGeneral",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isChargeable",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isTask",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseActivity"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "activity"
        ],
        "summary": "Add activity.",
        "description": "",
        "operationId": "createActivity",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Activity"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperActivity"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/activity/>forTimeSheet": {
      "get": {
        "tags": [
          "activity"
        ],
        "summary": "Find applicable time sheet activities for an employee on a specific day.",
        "description": "",
        "operationId": "listActivityForTimeSheet",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseActivity"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/activity/list": {
      "post": {
        "tags": [
          "activity"
        ],
        "summary": "Add multiple activities.",
        "description": "",
        "operationId": "createActivityList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseActivity"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/activity/{id}": {
      "get": {
        "tags": [
          "activity"
        ],
        "summary": "Find activity by ID.",
        "description": "",
        "operationId": "getActivity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperActivity"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank": {
      "get": {
        "tags": [
          "bank"
        ],
        "summary": "[BETA] Find bank corresponding with sent data.",
        "description": "",
        "operationId": "listBank",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registerNumbers",
            "in": "query",
            "description": "Bank register number (four digits)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isBankReconciliationSupport",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseBank"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation": {
      "get": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Find bank reconciliation corresponding with sent data.",
        "description": "",
        "operationId": "listBankReconciliation",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingPeriodId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseBankReconciliation"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Post a bank reconciliation.",
        "description": "",
        "operationId": "createBankReconciliation",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/BankReconciliation"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/>lastClosed": {
      "get": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Get last closed reconciliation by account ID.",
        "description": "",
        "operationId": "listBankReconciliationLastClosed",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Format is yyyy-MM-dd",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/match": {
      "get": {
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Find bank reconciliation match corresponding with sent data.",
        "description": "",
        "operationId": "listBankReconciliationMatch",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bankReconciliationId",
            "in": "query",
            "description": "List of bank reconciliation IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseBankReconciliationMatch"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Create a bank reconciliation match.",
        "description": "",
        "operationId": "createBankReconciliationMatch",
        "requestBody": {
          "$ref": "#/components/requestBodies/BankReconciliationMatch"
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperBankReconciliationMatch"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/match/:suggest": {
      "put": {
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Suggest matches for a bank reconciliation by ID.",
        "description": "",
        "operationId": "updateBankReconciliationMatchSuggest",
        "parameters": [
          {
            "name": "bankReconciliationId",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseBankReconciliationMatch"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/match/{id}": {
      "get": {
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Get bank reconciliation match by ID.",
        "description": "",
        "operationId": "getBankReconciliationMatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperBankReconciliationMatch"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Update a bank reconciliation match by ID.",
        "description": "",
        "operationId": "updateBankReconciliationMatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BankReconciliationMatch"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperBankReconciliationMatch"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Delete a bank reconciliation match by ID.",
        "description": "",
        "operationId": "deleteBankReconciliationMatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/paymentType": {
      "get": {
        "tags": [
          "bank/reconciliation/paymentType"
        ],
        "summary": "[BETA] Find payment type corresponding with sent data.",
        "description": "",
        "operationId": "listBankReconciliationPaymentType",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseBankReconciliationPaymentType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/paymentType/{id}": {
      "get": {
        "tags": [
          "bank/reconciliation/paymentType"
        ],
        "summary": "[BETA] Get payment type by ID.",
        "description": "",
        "operationId": "getBankReconciliationPaymentType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperBankReconciliationPaymentType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/{id}": {
      "get": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Get bank reconciliation.",
        "description": "",
        "operationId": "getBankReconciliation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Update a bank reconciliation.",
        "description": "",
        "operationId": "updateBankReconciliation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/BankReconciliation"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Delete bank reconciliation by ID.",
        "description": "",
        "operationId": "deleteBankReconciliation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/{id}/:adjustment": {
      "put": {
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Add an adjustment to reconciliation by ID.",
        "description": "",
        "operationId": "updateBankReconciliationAdjustment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/BankReconciliationAdjustment"
                }
              }
            }
          },
          "description": "Adjustments"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseBankReconciliationAdjustment"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement": {
      "get": {
        "tags": [
          "bank/statement"
        ],
        "summary": "[BETA] Find bank statement corresponding with sent data.",
        "description": "",
        "operationId": "listBankStatement",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseBankStatement"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/import": {
      "post": {
        "tags": [
          "bank/statement"
        ],
        "summary": "[BETA] Upload bank statement file.",
        "description": "",
        "operationId": "createBankStatementImport",
        "parameters": [
          {
            "name": "bankId",
            "in": "query",
            "description": "Bank ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "External ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileFormat",
            "in": "query",
            "description": "File format",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DNB_CSV",
                "EIKA_TELEPAY",
                "SPAREBANK1_TELEPAY",
                "VISMA_ACCOUNT_STATEMENT",
                "HANDELSBANKEN_TELEPAY",
                "SPAREBANKEN_VEST_TELEPAY",
                "NORDEA_CSV",
                "TRANSFERWISE",
                "SPAREBANKEN_SOR_TELEPAY",
                "DANSKE_BANK_CSV"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "The bank statement file",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperBankStatement"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/transaction": {
      "get": {
        "tags": [
          "bank/statement/transaction"
        ],
        "summary": "[BETA] Find bank transaction corresponding with sent data.",
        "description": "",
        "operationId": "listBankStatementTransaction",
        "parameters": [
          {
            "name": "bankStatementId",
            "in": "query",
            "description": "Bank statement ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseBankTransaction"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/transaction/{id}": {
      "get": {
        "tags": [
          "bank/statement/transaction"
        ],
        "summary": "[BETA] Get bank transaction by ID.",
        "description": "",
        "operationId": "getBankStatementTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperBankTransaction"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/transaction/{id}/details": {
      "get": {
        "tags": [
          "bank/statement/transaction"
        ],
        "summary": "[BETA] Get additional details about transaction by ID.",
        "description": "",
        "operationId": "getBankStatementTransactionDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperObject"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/{id}": {
      "get": {
        "tags": [
          "bank/statement"
        ],
        "summary": "[BETA] Get bank statement.",
        "description": "",
        "operationId": "getBankStatement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperBankStatement"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "bank/statement"
        ],
        "summary": "[BETA] Delete bank statement by ID.",
        "description": "",
        "operationId": "deleteBankStatement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company": {
      "put": {
        "tags": [
          "company"
        ],
        "summary": "Update company information.",
        "description": "",
        "operationId": "updateCompany",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Company"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCompany"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/>withLoginAccess": {
      "get": {
        "tags": [
          "company"
        ],
        "summary": "Returns client customers (with accountant/auditor relation) where the current user has login access (proxy login).",
        "description": "",
        "operationId": "listCompanyWithLoginAccess",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCompany"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/divisions": {
      "get": {
        "tags": [
          "company"
        ],
        "summary": "[DEPRECATED] Find divisions.",
        "description": "",
        "operationId": "listCompanyDivisions",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCompany"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/salesmodules": {
      "get": {
        "tags": [
          "company/salesmodules"
        ],
        "summary": "[BETA] Get active sales modules.",
        "description": "",
        "operationId": "listCompanySalesmodules",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseSalesModuleDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "company/salesmodules"
        ],
        "summary": "[BETA] Add (activate) a new sales module.",
        "description": "",
        "operationId": "createCompanySalesmodules",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SalesModuleDTO"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSalesModuleDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/settings/altinn": {
      "get": {
        "tags": [
          "company/altinn"
        ],
        "summary": "[BETA] Find Altinn id for login in company.",
        "description": "",
        "operationId": "listCompanySettingsAltinn",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperAltinnCompanyModule"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "company/altinn"
        ],
        "summary": "[BETA] Update AltInn id and password.",
        "description": "",
        "operationId": "updateCompanySettingsAltinn",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AltinnCompanyModule"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperAltinnCompanyModule"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/{id}": {
      "get": {
        "tags": [
          "company"
        ],
        "summary": "Find company by ID.",
        "description": "",
        "operationId": "getCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCompany"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/contact": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "Find contacts corresponding with sent data.",
        "description": "",
        "operationId": "listContact",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseContact"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "Create contact.",
        "description": "",
        "operationId": "createContact",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperContact"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/contact/{id}": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "Get contact by ID.",
        "description": "",
        "operationId": "getContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperContact"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "contact"
        ],
        "summary": "[BETA] Update contact.",
        "description": "",
        "operationId": "updateContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperContact"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/country": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Find countries corresponding with sent data.",
        "description": "",
        "operationId": "listCountry",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCountry"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/country/{id}": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Get country by ID.",
        "description": "",
        "operationId": "getCountry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCountry"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/crm/prospect": {
      "get": {
        "tags": [
          "crm/prospect"
        ],
        "summary": "Find prospects corresponding with sent data.",
        "description": "",
        "operationId": "listCrmProspect",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "salesEmployeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isClosed",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "closedReason",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "closedDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "closedDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "competitor",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prospectType",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectOfferId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProspect"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/crm/prospect/{id}": {
      "get": {
        "tags": [
          "crm/prospect"
        ],
        "summary": "Get prospect by ID.",
        "description": "",
        "operationId": "getCrmProspect",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProspect"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/currency": {
      "get": {
        "tags": [
          "currency"
        ],
        "summary": "Find currencies corresponding with sent data.",
        "description": "",
        "operationId": "listCurrency",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Currency codes",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCurrency"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/currency/{id}": {
      "get": {
        "tags": [
          "currency"
        ],
        "summary": "Get currency by ID.",
        "description": "",
        "operationId": "getCurrency",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCurrency"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/currency/{id}/rate": {
      "get": {
        "tags": [
          "currency"
        ],
        "summary": "Find currency exchange rate corresponding with sent data.",
        "description": "",
        "operationId": "getCurrencyRate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Currency id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Format is yyyy-MM-dd",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCurrencyExchangeRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Find customers corresponding with sent data.",
        "description": "",
        "operationId": "listCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerAccountNumber",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceEmail",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "accountManagerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Create customer. Related customer addresses may also be created.",
        "description": "",
        "operationId": "createCustomer",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer/category": {
      "get": {
        "tags": [
          "customer/category"
        ],
        "summary": "Find customer/supplier categories corresponding with sent data.",
        "description": "",
        "operationId": "listCustomerCategory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCustomerCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "customer/category"
        ],
        "summary": "Add new customer/supplier category.",
        "description": "",
        "operationId": "createCustomerCategory",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCategory"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCustomerCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer/category/{id}": {
      "get": {
        "tags": [
          "customer/category"
        ],
        "summary": "Find customer/supplier category by ID.",
        "description": "",
        "operationId": "getCustomerCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCustomerCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "customer/category"
        ],
        "summary": "Update customer/supplier category.",
        "description": "",
        "operationId": "updateCustomerCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCategory"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCustomerCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer/list": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "[BETA] Create multiple customers. Related supplier addresses may also be created.",
        "description": "",
        "operationId": "createCustomerList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "[BETA] Update multiple customers. Addresses can also be updated.",
        "description": "",
        "operationId": "updateCustomerList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "description": "JSON representing updates to object. Should have ID and version set."
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer/{id}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get customer by ID.",
        "description": "",
        "operationId": "getCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "Update customer. ",
        "description": "",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCustomer"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/deliveryAddress": {
      "get": {
        "tags": [
          "deliveryAddress"
        ],
        "summary": "Find addresses corresponding with sent data.",
        "description": "",
        "operationId": "listDeliveryAddress",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressLine1",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressLine2",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postalCode",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDeliveryAddress"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/deliveryAddress/{id}": {
      "get": {
        "tags": [
          "deliveryAddress"
        ],
        "summary": "Get address by ID.",
        "description": "",
        "operationId": "getDeliveryAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDeliveryAddress"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "deliveryAddress"
        ],
        "summary": "Update address.",
        "description": "",
        "operationId": "updateDeliveryAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/DeliveryAddress"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDeliveryAddress"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/department": {
      "get": {
        "tags": [
          "department"
        ],
        "summary": "Find department corresponding with sent data.",
        "description": "",
        "operationId": "listDepartment",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentNumber",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentManagerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDepartment"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "department"
        ],
        "summary": "[BETA] Add new department.",
        "description": "",
        "operationId": "createDepartment",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDepartment"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/department/list": {
      "post": {
        "tags": [
          "department"
        ],
        "summary": "[BETA] Register new departments.",
        "description": "",
        "operationId": "createDepartmentList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDepartment"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "department"
        ],
        "summary": "[BETA] Update multiple departments.",
        "description": "",
        "operationId": "updateDepartmentList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Department"
                }
              }
            }
          },
          "description": "JSON representing updates to object. Should have ID and version set."
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDepartment"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/department/{id}": {
      "get": {
        "tags": [
          "department"
        ],
        "summary": "Get department by ID.",
        "description": "",
        "operationId": "getDepartment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDepartment"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "department"
        ],
        "summary": "[BETA] Update department.",
        "description": "",
        "operationId": "updateDepartment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Department"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDepartment"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "department"
        ],
        "summary": "Delete department by ID",
        "description": "",
        "operationId": "deleteDepartment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/division": {
      "get": {
        "tags": [
          "division"
        ],
        "summary": "[BETA] Get divisions.",
        "description": "",
        "operationId": "listDivision",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDivision"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "division"
        ],
        "summary": "[BETA] Create division.",
        "description": "",
        "operationId": "createDivision",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Division"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDivision"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/division/list": {
      "post": {
        "tags": [
          "division"
        ],
        "summary": "[BETA] Create divisions.",
        "description": "",
        "operationId": "createDivisionList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Division"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDivision"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "division"
        ],
        "summary": "[BETA] Update multiple divisions.",
        "description": "",
        "operationId": "updateDivisionList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Division"
                }
              }
            }
          },
          "description": "JSON representing updates to object. Should have ID and version set."
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDivision"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/division/{id}": {
      "put": {
        "tags": [
          "division"
        ],
        "summary": "[BETA] Update division information.",
        "description": "",
        "operationId": "updateDivision",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Division"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDivision"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/document/{id}": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "[BETA] Get document by ID.",
        "description": "",
        "operationId": "getDocument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDocument"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/document/{id}/content": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "[BETA] Get content of document given by ID.",
        "description": "",
        "operationId": "getDocumentContent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of document to download content from.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/account/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with account object type.",
        "description": "",
        "operationId": "getDocumentArchiveAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Account Document Archive.",
        "description": "",
        "operationId": "createDocumentArchiveAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createDocumentArchiveAccount"
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/customer/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with customer object type.",
        "description": "",
        "operationId": "getDocumentArchiveCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Customer Document Archive.",
        "description": "",
        "operationId": "createDocumentArchiveCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createDocumentArchiveAccount"
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/employee/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with employee object type.",
        "description": "",
        "operationId": "getDocumentArchiveEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Employee Document Archive.",
        "description": "",
        "operationId": "createDocumentArchiveEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createDocumentArchiveAccount"
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/product/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with product object type.",
        "description": "",
        "operationId": "getDocumentArchiveProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Product Document Archive.",
        "description": "",
        "operationId": "createDocumentArchiveProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createDocumentArchiveAccount"
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/project/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with project object type.",
        "description": "",
        "operationId": "getDocumentArchiveProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Project Document Archive.",
        "description": "",
        "operationId": "createDocumentArchiveProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createDocumentArchiveAccount"
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/prospect/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with prospect object type.",
        "description": "",
        "operationId": "getDocumentArchiveProspect",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Prospect Document Archive.",
        "description": "",
        "operationId": "createDocumentArchiveProspect",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createDocumentArchiveAccount"
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/reception": {
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload a file to the document archive reception. Send as multipart form.",
        "description": "",
        "operationId": "createDocumentArchiveReception",
        "requestBody": {
          "$ref": "#/components/requestBodies/createDocumentArchiveAccount"
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/supplier/{id}": {
      "get": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Find documents archived associated with supplier object type.",
        "description": "",
        "operationId": "getDocumentArchiveSupplier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Upload file to Supplier Document Archive.",
        "description": "",
        "operationId": "createDocumentArchiveSupplier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createDocumentArchiveAccount"
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/{id}": {
      "put": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Update document archive.",
        "description": "",
        "operationId": "updateDocumentArchive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/DocumentArchive"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "documentArchive"
        ],
        "summary": "[BETA] Delete document archive.",
        "description": "",
        "operationId": "deleteDocumentArchive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Find employees corresponding with sent data.",
        "description": "",
        "operationId": "listEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowInformationRegistration",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeContacts",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyProjectManagers",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseEmployee"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "employee"
        ],
        "summary": "[BETA] Create one employee.",
        "description": "",
        "operationId": "createEmployee",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEmployee"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment": {
      "get": {
        "tags": [
          "employee/employment"
        ],
        "summary": "Find all employments for employee.",
        "description": "",
        "operationId": "listEmployeeEmployment",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseEmployment"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "employee/employment"
        ],
        "summary": "[BETA] Create employment.",
        "description": "",
        "operationId": "createEmployeeEmployment",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Employment"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEmployment"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/details": {
      "get": {
        "tags": [
          "employee/employment/details"
        ],
        "summary": "[BETA] Find all employmentdetails for employment.",
        "description": "",
        "operationId": "listEmployeeEmploymentDetails",
        "parameters": [
          {
            "name": "employmentId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseEmploymentDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "employee/employment/details"
        ],
        "summary": "[BETA] Create employment details.",
        "description": "",
        "operationId": "createEmployeeEmploymentDetails",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/EmploymentDetails"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEmploymentDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/details/{id}": {
      "get": {
        "tags": [
          "employee/employment/details"
        ],
        "summary": "[BETA] Find employment details by ID.",
        "description": "",
        "operationId": "getEmployeeEmploymentDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEmploymentDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee/employment/details"
        ],
        "summary": "[BETA] Update employment details. ",
        "description": "",
        "operationId": "updateEmployeeEmploymentDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/EmploymentDetails"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEmploymentDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType": {
      "get": {
        "tags": [
          "employee/employment/employmentType"
        ],
        "summary": "[BETA] Find all employment type IDs.",
        "description": "",
        "operationId": "listEmployeeEmploymentEmploymentType",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseEmploymentType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType/maritimeEmploymentType": {
      "get": {
        "tags": [
          "employee/employment/employmentType"
        ],
        "summary": "[BETA] Find all maritime employment type IDs.",
        "description": "",
        "operationId": "listEmployeeEmploymentEmploymentTypeMaritimeEmploymentType",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "maritimeEmploymentType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "SHIP_REGISTER",
                "SHIP_TYPE",
                "TRADE_AREA"
              ]
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseEmploymentType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType/salaryType": {
      "get": {
        "tags": [
          "employee/employment/employmentType"
        ],
        "summary": "[BETA] Find all salary type IDs.",
        "description": "",
        "operationId": "listEmployeeEmploymentEmploymentTypeSalaryType",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseEmploymentType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType/scheduleType": {
      "get": {
        "tags": [
          "employee/employment/employmentType"
        ],
        "summary": "[BETA] Find all schedule type IDs.",
        "description": "",
        "operationId": "listEmployeeEmploymentEmploymentTypeScheduleType",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseEmploymentType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/leaveOfAbsence": {
      "post": {
        "tags": [
          "employee/employment/leaveOfAbsence"
        ],
        "summary": "[BETA] Create leave of absence.",
        "description": "",
        "operationId": "createEmployeeEmploymentLeaveOfAbsence",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/LeaveOfAbsence"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperLeaveOfAbsence"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/leaveOfAbsence/list": {
      "post": {
        "tags": [
          "employee/employment/leaveOfAbsence"
        ],
        "summary": "[BETA] Create multiple leave of absences.",
        "description": "",
        "operationId": "createEmployeeEmploymentLeaveOfAbsenceList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/LeaveOfAbsence"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseLeaveOfAbsence"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/leaveOfAbsence/{id}": {
      "get": {
        "tags": [
          "employee/employment/leaveOfAbsence"
        ],
        "summary": "[BETA] Find leave of absence by ID.",
        "description": "",
        "operationId": "getEmployeeEmploymentLeaveOfAbsence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperLeaveOfAbsence"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee/employment/leaveOfAbsence"
        ],
        "summary": "[BETA] Update leave of absence. ",
        "description": "",
        "operationId": "updateEmployeeEmploymentLeaveOfAbsence",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/LeaveOfAbsence"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperLeaveOfAbsence"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/leaveOfAbsenceType": {
      "get": {
        "tags": [
          "employee/employment/leaveOfAbsenceType"
        ],
        "summary": "[BETA] Find all leave of absence type IDs.",
        "description": "",
        "operationId": "listEmployeeEmploymentLeaveOfAbsenceType",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseLeaveOfAbsenceType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/occupationCode": {
      "get": {
        "tags": [
          "employee/employment/occupationCode"
        ],
        "summary": "[BETA] Find all profession codes.",
        "description": "",
        "operationId": "listEmployeeEmploymentOccupationCode",
        "parameters": [
          {
            "name": "nameNO",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseOccupationCode"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/remunerationType": {
      "get": {
        "tags": [
          "employee/employment/remunerationType"
        ],
        "summary": "[BETA] Find all remuneration type IDs.",
        "description": "",
        "operationId": "listEmployeeEmploymentRemunerationType",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseRemunerationType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/workingHoursScheme": {
      "get": {
        "tags": [
          "employee/employment/workingHoursScheme"
        ],
        "summary": "[BETA] Find working hours scheme ID.",
        "description": "",
        "operationId": "listEmployeeEmploymentWorkingHoursScheme",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseWorkingHoursScheme"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/{id}": {
      "get": {
        "tags": [
          "employee/employment"
        ],
        "summary": "Find employment by ID.",
        "description": "",
        "operationId": "getEmployeeEmployment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEmployment"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee/employment"
        ],
        "summary": "[BETA] Update employemnt. ",
        "description": "",
        "operationId": "updateEmployeeEmployment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Employment"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEmployment"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement": {
      "get": {
        "tags": [
          "employee/entitlement"
        ],
        "summary": "Find all entitlements for user.",
        "description": "",
        "operationId": "listEmployeeEntitlement",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseEntitlement"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement/:grantClientEntitlementsByTemplate": {
      "put": {
        "tags": [
          "employee/entitlement"
        ],
        "summary": "[BETA] Update employee entitlements in client account.",
        "description": "",
        "operationId": "updateEmployeeEntitlementGrantClientEntitlementsByTemplate",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "Template",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "NONE_PRIVILEGES",
                "STANDARD_PRIVILEGES_ACCOUNTANT",
                "STANDARD_PRIVILEGES_AUDITOR",
                "ALL_PRIVILEGES",
                "AGRO_READ_ONLY",
                "AGRO_READ_APPROVE",
                "AGRO_READ_WRITE",
                "AGRO_READ_WRITE_APPROVE",
                "MAMUT_PAYROLL_ADMIN",
                "MAMUT_PAYROLL_CLERK",
                "AGRO_PAYROLL_ADMIN",
                "AGRO_PAYROLL_CLERK",
                "AGRO_INVOICE_ADMIN",
                "AGRO_INVOICE_CLERK"
              ]
            }
          },
          {
            "name": "addToExisting",
            "in": "query",
            "description": "Add template to existing entitlements",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement/:grantEntitlementsByTemplate": {
      "put": {
        "tags": [
          "employee/entitlement"
        ],
        "summary": "[BETA] Update employee entitlements.",
        "description": "The user will only receive the entitlements which are possible with the registered user type",
        "operationId": "updateEmployeeEntitlementGrantEntitlementsByTemplate",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "Template",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "NONE_PRIVILEGES",
                "ALL_PRIVILEGES",
                "INVOICING_MANAGER",
                "PERSONELL_MANAGER",
                "ACCOUNTANT",
                "AUDITOR",
                "DEPARTMENT_LEADER",
                "MAMUT_USER_ADMIN",
                "MAMUT_USER"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement/client": {
      "get": {
        "tags": [
          "employee/entitlement"
        ],
        "summary": "[BETA] Find all entitlements at client for user.",
        "description": "",
        "operationId": "listEmployeeEntitlementClient",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Client ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseEntitlement"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement/{id}": {
      "get": {
        "tags": [
          "employee/entitlement"
        ],
        "summary": "Get entitlement by ID.",
        "description": "",
        "operationId": "getEmployeeEntitlement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEntitlement"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/hourlyCostAndRate": {
      "get": {
        "tags": [
          "employee/hourlyCostAndRate"
        ],
        "summary": "Find all hourly cost and rates for employee.",
        "description": "",
        "operationId": "listEmployeeHourlyCostAndRate",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseHourlyCostAndRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "employee/hourlyCostAndRate"
        ],
        "summary": "[BETA] Create hourly cost and rate.",
        "description": "",
        "operationId": "createEmployeeHourlyCostAndRate",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/HourlyCostAndRate"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperHourlyCostAndRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/hourlyCostAndRate/{id}": {
      "get": {
        "tags": [
          "employee/hourlyCostAndRate"
        ],
        "summary": "[BETA] Find hourly cost and rate by ID.",
        "description": "",
        "operationId": "getEmployeeHourlyCostAndRate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperHourlyCostAndRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee/hourlyCostAndRate"
        ],
        "summary": "[BETA] Update hourly cost and rate. ",
        "description": "",
        "operationId": "updateEmployeeHourlyCostAndRate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/HourlyCostAndRate"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperHourlyCostAndRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/list": {
      "post": {
        "tags": [
          "employee"
        ],
        "summary": "[BETA] Create several employees.",
        "description": "",
        "operationId": "createEmployeeList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Employee"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseEmployee"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/nextOfKin": {
      "get": {
        "tags": [
          "employee/nextOfKin"
        ],
        "summary": "Find all next of kin for employee.",
        "description": "",
        "operationId": "listEmployeeNextOfKin",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseNextOfKin"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "employee/nextOfKin"
        ],
        "summary": "[BETA] Create next of kin.",
        "description": "",
        "operationId": "createEmployeeNextOfKin",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/NextOfKin"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperNextOfKin"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/nextOfKin/{id}": {
      "get": {
        "tags": [
          "employee/nextOfKin"
        ],
        "summary": "[BETA] Find next of kin by ID.",
        "description": "",
        "operationId": "getEmployeeNextOfKin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperNextOfKin"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee/nextOfKin"
        ],
        "summary": "[BETA] Update next of kin. ",
        "description": "",
        "operationId": "updateEmployeeNextOfKin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/NextOfKin"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperNextOfKin"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/standardTime": {
      "get": {
        "tags": [
          "employee/standardTime"
        ],
        "summary": "[BETA] Find all standard times for employee.",
        "description": "",
        "operationId": "listEmployeeStandardTime",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseStandardTime"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "employee/standardTime"
        ],
        "summary": "[BETA] Create standard time.",
        "description": "",
        "operationId": "createEmployeeStandardTime",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/StandardTime"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperStandardTime"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/standardTime/{id}": {
      "get": {
        "tags": [
          "employee/standardTime"
        ],
        "summary": "[BETA] Find standard time by ID.",
        "description": "",
        "operationId": "getEmployeeStandardTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperStandardTime"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee/standardTime"
        ],
        "summary": "[BETA] Update standard time. ",
        "description": "",
        "operationId": "updateEmployeeStandardTime",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/StandardTime"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperStandardTime"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/{id}": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Get employee by ID.",
        "description": "",
        "operationId": "getEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEmployee"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "employee"
        ],
        "summary": "Update employee.",
        "description": "",
        "operationId": "updateEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Employee"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEmployee"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/event": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "[BETA] Get all (WebHook) event keys.",
        "description": "",
        "operationId": "listEvent",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperMapStringEventInfoDescription"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/event/subscription": {
      "get": {
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Find all ongoing subscriptions.",
        "description": "",
        "operationId": "listEventSubscription",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseSubscription"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Create a new subscription for current EmployeeToken.",
        "description": "",
        "operationId": "createEventSubscription",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSubscription"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/event/subscription/{id}": {
      "get": {
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Get subscription by ID.",
        "description": "",
        "operationId": "getEventSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSubscription"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Change a current subscription, based on id.",
        "description": "",
        "operationId": "updateEventSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSubscription"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Delete the given subscription.",
        "description": "",
        "operationId": "deleteEventSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/event/{eventType}": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "[BETA] Get example webhook payload",
        "description": "",
        "operationId": "getEvent",
        "parameters": [
          {
            "name": "eventType",
            "in": "path",
            "description": "Event type, from /event endpoint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEventInfoDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Find inventory corresponding with sent data.",
        "description": "",
        "operationId": "listInventory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isMainInventory",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseInventory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "[BETA] Create new inventory.",
        "description": "",
        "operationId": "createInventory",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Inventory"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperInventory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/inventories": {
      "get": {
        "tags": [
          "inventory/inventories"
        ],
        "summary": "[BETA] Find inventories corresponding with sent data.",
        "description": "",
        "operationId": "listInventoryInventories",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseInventories"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/stocktaking": {
      "get": {
        "tags": [
          "inventory/stocktaking"
        ],
        "summary": "[BETA] Find stocktaking corresponding with sent data.",
        "description": "",
        "operationId": "listInventoryStocktaking",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isCompleted",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inventoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseStocktaking"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "inventory/stocktaking"
        ],
        "summary": "[BETA] Create new stocktaking.",
        "description": "",
        "operationId": "createInventoryStocktaking",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Stocktaking"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperStocktaking"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/stocktaking/productline": {
      "get": {
        "tags": [
          "inventory/stocktaking/productline"
        ],
        "summary": "[BETA] Find all product lines by stocktaking ID.",
        "description": "",
        "operationId": "listInventoryStocktakingProductline",
        "parameters": [
          {
            "name": "stocktakingId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProductLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "inventory/stocktaking/productline"
        ],
        "summary": "[BETA] Create product line. When creating several product lines, use /list for better performance.",
        "description": "",
        "operationId": "createInventoryStocktakingProductline",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductLine"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProductLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/stocktaking/productline/{id}": {
      "get": {
        "tags": [
          "inventory/stocktaking/productline"
        ],
        "summary": "[BETA] Get product line by ID.",
        "description": "",
        "operationId": "getInventoryStocktakingProductline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProductLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "inventory/stocktaking/productline"
        ],
        "summary": "[BETA] Update product line.",
        "description": "",
        "operationId": "updateInventoryStocktakingProductline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductLine"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProductLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "inventory/stocktaking/productline"
        ],
        "summary": "[BETA] Delete product line.",
        "description": "",
        "operationId": "deleteInventoryStocktakingProductline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/stocktaking/{id}": {
      "get": {
        "tags": [
          "inventory/stocktaking"
        ],
        "summary": "[BETA] Get stocktaking by ID.",
        "description": "",
        "operationId": "getInventoryStocktaking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperStocktaking"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "inventory/stocktaking"
        ],
        "summary": "[BETA] Update stocktaking.",
        "description": "",
        "operationId": "updateInventoryStocktaking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Stocktaking"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperStocktaking"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "inventory/stocktaking"
        ],
        "summary": "[BETA] Delete stocktaking.",
        "description": "",
        "operationId": "deleteInventoryStocktaking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/{id}": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Get inventory by ID.",
        "description": "",
        "operationId": "getInventory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperInventory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "inventory"
        ],
        "summary": "[BETA] Update inventory.",
        "description": "",
        "operationId": "updateInventory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Inventory"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperInventory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "inventory"
        ],
        "summary": "[BETA] Delete inventory.",
        "description": "",
        "operationId": "deleteInventory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Find invoices corresponding with sent data. Includes charged outgoing invoices only.",
        "description": "",
        "operationId": "listInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceDateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kid",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "voucherId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseInvoice"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Create invoice.",
        "description": "",
        "operationId": "createInvoice",
        "parameters": [
          {
            "name": "sendToCustomer",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "paymentTypeId",
            "in": "query",
            "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paidAmount",
            "in": "query",
            "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperInvoice"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/details": {
      "get": {
        "tags": [
          "invoice/details"
        ],
        "summary": "Find ProjectInvoiceDetails corresponding with sent data.",
        "description": "",
        "operationId": "listInvoiceDetails",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceDateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectInvoiceDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/details/{id}": {
      "get": {
        "tags": [
          "invoice/details"
        ],
        "summary": "Get ProjectInvoiceDetails by ID.",
        "description": "",
        "operationId": "getInvoiceDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectInvoiceDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/paymentType": {
      "get": {
        "tags": [
          "invoice/paymentType"
        ],
        "summary": "Find payment type corresponding with sent data.",
        "description": "",
        "operationId": "listInvoicePaymentType",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponsePaymentType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/paymentType/{id}": {
      "get": {
        "tags": [
          "invoice/paymentType"
        ],
        "summary": "Get payment type by ID.",
        "description": "",
        "operationId": "getInvoicePaymentType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPaymentType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Get invoice by ID.",
        "description": "",
        "operationId": "getInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperInvoice"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}/:createCreditNote": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Creates a new Invoice representing a credit memo that nullifies the given invoice. Updates this invoice and any pre-existing inverse invoice.",
        "description": "",
        "operationId": "updateInvoiceCreateCreditNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Credit note date",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creditNoteEmail",
            "in": "query",
            "description": "The credit note will be sent electronically if this field is filled out",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperInvoice"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}/:createReminder": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Create invoice reminder and sends it by the given dispatch type. Supports the reminder types SOFT_REMINDER, REMINDER and NOTICE_OF_DEBT_COLLECTION. DispatchType NETS_PRINT must have type NOTICE_OF_DEBT_COLLECTION. SMS and NETS_PRINT must be activated prior to usage in the API.",
        "description": "",
        "operationId": "updateInvoiceCreateReminder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "SOFT_REMINDER",
                "REMINDER",
                "NOTICE_OF_DEBT_COLLECTION",
                "DEBT_COLLECTION"
              ]
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeCharge",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeInterest",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "dispatchType",
            "in": "query",
            "description": "dispatchType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "NETS_PRINT",
                "EMAIL",
                "SMS"
              ]
            }
          },
          {
            "name": "smsNumber",
            "in": "query",
            "description": "SMS number (must be a valid Norwegian telephone number)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}/:payment": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Update invoice. The invoice is updated with payment information. The amount is in the invoice’s currency.",
        "description": "",
        "operationId": "updateInvoicePayment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paymentDate",
            "in": "query",
            "description": "Payment date",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentTypeId",
            "in": "query",
            "description": "PaymentType id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paidAmount",
            "in": "query",
            "description": "Amount paid by customer in the company currency, typically NOK.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "paidAmountCurrency",
            "in": "query",
            "description": "Amount paid by customer in the invoice currency. Optional, but required for invoices in alternate currencies.",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperInvoice"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}/:send": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Send invoice by ID and sendType. Optionally override email recipient.",
        "description": "",
        "operationId": "updateInvoiceSend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sendType",
            "in": "query",
            "description": "SendType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "EMAIL",
                "EHF",
                "EFAKTURA",
                "VIPPS",
                "PAPER"
              ]
            }
          },
          {
            "name": "overrideEmailAddress",
            "in": "query",
            "description": "Will override email address if sendType = EMAIL",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{invoiceId}/pdf": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Get invoice document by invoice ID.",
        "description": "",
        "operationId": "getInvoicePdf",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice ID from which PDF is downloaded.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger": {
      "get": {
        "tags": [
          "ledger"
        ],
        "summary": "Get ledger (hovedbok).",
        "description": "",
        "operationId": "listLedger",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openPostings",
            "in": "query",
            "description": "Deprecated",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseLedgerAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/account": {
      "get": {
        "tags": [
          "ledger/account"
        ],
        "summary": "Find accounts corresponding with sent data.",
        "description": "",
        "operationId": "listLedgerAccount",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isBankAccount",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isApplicableForSupplierInvoice",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Create a new account.",
        "description": "",
        "operationId": "createLedgerAccount",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/account/list": {
      "post": {
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Create several accounts.",
        "description": "",
        "operationId": "createLedgerAccountList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Update multiple accounts.",
        "description": "",
        "operationId": "updateLedgerAccountList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "description": "JSON representing updates to object. Should have ID and version set."
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Delete multiple accounts.",
        "description": "",
        "operationId": "deleteLedgerAccountList",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/account/{id}": {
      "get": {
        "tags": [
          "ledger/account"
        ],
        "summary": "Get account by ID.",
        "description": "",
        "operationId": "getLedgerAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Update account.",
        "description": "",
        "operationId": "updateLedgerAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Delete account.",
        "description": "",
        "operationId": "deleteLedgerAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/accountingPeriod": {
      "get": {
        "tags": [
          "ledger/accountingPeriod"
        ],
        "summary": "Find accounting periods corresponding with sent data.",
        "description": "",
        "operationId": "listLedgerAccountingPeriod",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "numberFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "numberTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1400
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseAccountingPeriod"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/accountingPeriod/{id}": {
      "get": {
        "tags": [
          "ledger/accountingPeriod"
        ],
        "summary": "Get accounting period by ID.",
        "description": "",
        "operationId": "getLedgerAccountingPeriod",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperAccountingPeriod"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/annualAccount": {
      "get": {
        "tags": [
          "ledger/annualAccount"
        ],
        "summary": "Find annual accounts corresponding with sent data.",
        "description": "",
        "operationId": "listLedgerAnnualAccount",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "yearFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "yearTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseAnnualAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/annualAccount/{id}": {
      "get": {
        "tags": [
          "ledger/annualAccount"
        ],
        "summary": "Get annual account by ID.",
        "description": "",
        "operationId": "getLedgerAnnualAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperAnnualAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/closeGroup": {
      "get": {
        "tags": [
          "ledger/closeGroup"
        ],
        "summary": "Find close groups corresponding with sent data.",
        "description": "",
        "operationId": "listLedgerCloseGroup",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCloseGroup"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/closeGroup/{id}": {
      "get": {
        "tags": [
          "ledger/closeGroup"
        ],
        "summary": "Get close group by ID.",
        "description": "",
        "operationId": "getLedgerCloseGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCloseGroup"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/openPost": {
      "get": {
        "tags": [
          "ledger"
        ],
        "summary": "Find open posts corresponding with sent data.",
        "description": "",
        "operationId": "listLedgerOpenPost",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseLedgerAccount"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/paymentTypeOut": {
      "get": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Gets payment types for outgoing payments",
        "description": "This is an API endpoint for getting payment types for outgoing payments. This is equivalent to the section 'Outgoing Payments' under Accounts Settings in Tripletex. These are the payment types listed in supplier invoices, vat returns, salary payments and Tax/ENI",
        "operationId": "listLedgerPaymentTypeOut",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponsePaymentTypeOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Create new payment type for outgoing payments",
        "description": "",
        "operationId": "createLedgerPaymentTypeOut",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTypeOut"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPaymentTypeOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/paymentTypeOut/list": {
      "post": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Create multiple payment types for outgoing payments at once",
        "description": "",
        "operationId": "createLedgerPaymentTypeOutList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/PaymentTypeOut"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponsePaymentTypeOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Update multiple payment types for outgoing payments at once",
        "description": "",
        "operationId": "updateLedgerPaymentTypeOutList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/PaymentTypeOut"
                }
              }
            }
          },
          "description": "JSON representing updates to object. Should have ID and version set."
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponsePaymentTypeOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/paymentTypeOut/{id}": {
      "get": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Get payment type for outgoing payments by ID.",
        "description": "",
        "operationId": "getLedgerPaymentTypeOut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPaymentTypeOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Update existing payment type for outgoing payments",
        "description": "",
        "operationId": "updateLedgerPaymentTypeOut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTypeOut"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPaymentTypeOut"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Delete payment type for outgoing payments by ID.",
        "description": "",
        "operationId": "deleteLedgerPaymentTypeOut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/posting": {
      "get": {
        "tags": [
          "ledger/posting"
        ],
        "summary": "Find postings corresponding with sent data.",
        "description": "",
        "operationId": "listLedgerCreateing",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openPostings",
            "in": "query",
            "description": "Deprecated",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponsePosting"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/posting/openPost": {
      "get": {
        "tags": [
          "ledger/posting"
        ],
        "summary": "Find open posts corresponding with sent data.",
        "description": "",
        "operationId": "listLedgerCreateingOpenPost",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponsePosting"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/posting/{id}": {
      "get": {
        "tags": [
          "ledger/posting"
        ],
        "summary": "Find postings by ID.",
        "description": "",
        "operationId": "getLedgerCreateing",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPosting"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/vatType": {
      "get": {
        "tags": [
          "ledger/vatType"
        ],
        "summary": "Find vat types corresponding with sent data.",
        "description": "",
        "operationId": "listLedgerVatType",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseVatType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/vatType/{id}": {
      "get": {
        "tags": [
          "ledger/vatType"
        ],
        "summary": "Get vat type by ID.",
        "description": "",
        "operationId": "getLedgerVatType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperVatType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher": {
      "get": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Find vouchers corresponding with sent data.",
        "description": "",
        "operationId": "listLedgerVoucher",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "numberFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "numberTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherSearchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Add new voucher. IMPORTANT: Also creates postings. Only the gross amounts will be used",
        "description": "",
        "operationId": "createLedgerVoucher",
        "parameters": [
          {
            "name": "sendToLedger",
            "in": "query",
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Voucher"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperVoucher"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/>nonPosted": {
      "get": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Find non-posted vouchers.",
        "description": "",
        "operationId": "listLedgerVoucherNonPosted",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeNonApproved",
            "in": "query",
            "description": "Include non-approved vouchers in the result.",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "changedSince",
            "in": "query",
            "description": "Only return elements that have changed since this date and time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseVoucher"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/importDocument": {
      "post": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Upload a document to create one or more vouchers. Valid document formats are PDF, PNG, JPEG, TIFF and EHF. Send as multipart form.",
        "description": "",
        "operationId": "createLedgerVoucherImportDocument",
        "parameters": [
          {
            "name": "split",
            "in": "query",
            "description": "If the document consists of several pages, should the document be split into one voucher per page?",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "The file",
                    "type": "string",
                    "format": "binary"
                  },
                  "description": {
                    "description": "Optional description to use for the voucher(s). If omitted the file name will be used.",
                    "type": "string"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseVoucher"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/importGbat10": {
      "post": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Import GBAT10. Send as multipart form.",
        "description": "",
        "operationId": "createLedgerVoucherImportGbat10",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "generateVatPostings": {
                    "description": "If the import should generate VAT postings",
                    "type": "boolean"
                  },
                  "file": {
                    "description": "The file",
                    "type": "string",
                    "format": "binary"
                  },
                  "encoding": {
                    "description": "The file encoding",
                    "type": "string",
                    "default": "utf-8"
                  }
                },
                "required": [
                  "generateVatPostings",
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/list": {
      "put": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Update multiple vouchers. Postings with guiRow==0 will be deleted and regenerated.",
        "description": "",
        "operationId": "updateLedgerVoucherList",
        "parameters": [
          {
            "name": "sendToLedger",
            "in": "query",
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Voucher"
                }
              }
            }
          },
          "description": "JSON representing updates to object. Should have ID and version set."
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseVoucher"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}": {
      "get": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Get voucher by ID.",
        "description": "",
        "operationId": "getLedgerVoucher",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperVoucher"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Update voucher. Postings with guiRow==0 will be deleted and regenerated.",
        "description": "",
        "operationId": "updateLedgerVoucher",
        "parameters": [
          {
            "name": "sendToLedger",
            "in": "query",
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Voucher"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperVoucher"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Delete voucher by ID.",
        "description": "",
        "operationId": "deleteLedgerVoucher",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/:reverse": {
      "put": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Reverses the voucher, and returns the reversed voucher. Supports reversing most voucher types, except salary transactions.",
        "description": "",
        "operationId": "updateLedgerVoucherReverse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of voucher that should be reversed.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Reverse voucher date",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperVoucher"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/:sendToInbox": {
      "put": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Send voucher to inbox.",
        "description": "",
        "operationId": "updateLedgerVoucherSendToInbox",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of voucher that should be sent to inbox.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of voucher that should be sent to inbox.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Description of why the voucher was rejected. This parameter is only used if the approval feature is enabled.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperVoucher"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/:sendToLedger": {
      "put": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Send voucher to ledger.",
        "description": "",
        "operationId": "updateLedgerVoucherSendToLedger",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of voucher that should be sent to ledger.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of voucher that should be sent to ledger.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "Voucher number to use. If omitted or 0 the system will assign the number.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperVoucher"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/attachment": {
      "delete": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Delete attachment.",
        "description": "",
        "operationId": "deleteLedgerVoucherAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of voucher containing the attachment to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of voucher containing the attachment to delete.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "sendToInbox",
            "in": "query",
            "description": "Should the attachment be sent to inbox rather than deleted?",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "split",
            "in": "query",
            "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/options": {
      "get": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Returns a data structure containing meta information about operations that are available for this voucher. Currently only implemented for DELETE: It is possible to check if the voucher is deletable.",
        "description": "",
        "operationId": "getLedgerVoucherOptions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperVoucherOptions"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{voucherId}/pdf": {
      "get": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Get PDF representation of voucher by ID.",
        "description": "",
        "operationId": "getLedgerVoucherPdf",
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "description": "Voucher ID from which PDF is downloaded.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{voucherId}/pdf/{fileName}": {
      "post": {
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[DEPRECATED] Use POST ledger/voucher/{voucherId}/attachment instead.",
        "description": "",
        "operationId": "createLedgerVoucherVoucherId}Pdf {fileName",
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "description": "Voucher ID to upload PDF to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "File name to store the pdf under. Will not be the same as the filename on the file returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createDocumentArchiveAccount"
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucherType": {
      "get": {
        "tags": [
          "ledger/voucherType"
        ],
        "summary": "Find voucher types corresponding with sent data.",
        "description": "",
        "operationId": "listLedgerVoucherType",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseVoucherType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucherType/{id}": {
      "get": {
        "tags": [
          "ledger/voucherType"
        ],
        "summary": "Get voucher type by ID.",
        "description": "",
        "operationId": "getLedgerVoucherType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperVoucherType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/municipality": {
      "get": {
        "tags": [
          "municipality"
        ],
        "summary": "[BETA] Get municipalities.",
        "description": "",
        "operationId": "listMunicipality",
        "parameters": [
          {
            "name": "includePayrollTaxZones",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseMunicipality"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Find orders corresponding with sent data.",
        "description": "",
        "operationId": "listOrder",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderDateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isClosed",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isSubscription",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Create order.",
        "description": "",
        "operationId": "createOrder",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/:invoiceMultipleOrders": {
      "put": {
        "tags": [
          "order"
        ],
        "summary": "[BETA] Charges a single customer invoice from multiple orders. The orders must be to the same customer, currency, due date, receiver email and attn.",
        "description": "",
        "operationId": "updateOrderInvoiceMultipleOrders",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of Order IDs - to the same customer, separated by comma.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceDate",
            "in": "query",
            "description": "The invoice date",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperInvoice"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/orderline": {
      "post": {
        "tags": [
          "order/orderline"
        ],
        "summary": "Create order line. When creating several order lines, use /list for better performance.",
        "description": "",
        "operationId": "createOrderOrderline",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/OrderLine"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperOrderLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/orderline/list": {
      "post": {
        "tags": [
          "order/orderline"
        ],
        "summary": "Create multiple order lines.",
        "description": "",
        "operationId": "createOrderOrderlineList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/OrderLine"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseOrderLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/orderline/{id}": {
      "get": {
        "tags": [
          "order/orderline"
        ],
        "summary": "Get order line by ID.",
        "description": "",
        "operationId": "getOrderOrderline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperOrderLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "order/orderline"
        ],
        "summary": "[BETA] Delete order line by ID.",
        "description": "",
        "operationId": "deleteOrderOrderline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Get order by ID.",
        "description": "",
        "operationId": "getOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "order"
        ],
        "summary": "Update order.",
        "description": "",
        "operationId": "updateOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}/:approveSubscriptionInvoice": {
      "put": {
        "tags": [
          "order"
        ],
        "summary": "To create a subscription invoice, first create a order with the subscription enabled, then approve it with this method. This approves the order for subscription invoicing.",
        "description": "",
        "operationId": "updateOrderApproveSubscriptionInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order to approve for subscription invoicing.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceDate",
            "in": "query",
            "description": "The approval date for the subscription.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperInvoice"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}/:attach": {
      "put": {
        "tags": [
          "order"
        ],
        "summary": "Attach document to specified order ID.",
        "description": "",
        "operationId": "updateOrderAttach",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createDocumentArchiveAccount"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}/:invoice": {
      "put": {
        "tags": [
          "order"
        ],
        "summary": "Create new invoice from order.",
        "description": "",
        "operationId": "updateOrderInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order to invoice.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceDate",
            "in": "query",
            "description": "The invoice date",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sendToCustomer",
            "in": "query",
            "description": "Send invoice to customer",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "paymentTypeId",
            "in": "query",
            "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. The payment type must be related to an account with the same currency as the invoice.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paidAmount",
            "in": "query",
            "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. This amount is in the invoice currency.",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperInvoice"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}/:unApproveSubscriptionInvoice": {
      "put": {
        "tags": [
          "order"
        ],
        "summary": "Unapproves the order for subscription invoicing.",
        "description": "",
        "operationId": "updateOrderUnApproveSubscriptionInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order to unapprove for subscription invoicing.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Find products corresponding with sent data.",
        "description": "",
        "operationId": "listProduct",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "description": "DEPRECATED. List of product numbers (Integer only)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productNumber",
            "in": "query",
            "description": "List of valid product numbers",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array", "maxItems": 5,
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ean",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isStockItem",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "currencyId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vatTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productUnitId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "costExcludingVatCurrencyFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "costExcludingVatCurrencyTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "priceExcludingVatCurrencyFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "priceExcludingVatCurrencyTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "priceIncludingVatCurrencyFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "priceIncludingVatCurrencyTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "product"
        ],
        "summary": "Create new product.",
        "description": "",
        "operationId": "createProduct",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/external": {
      "get": {
        "tags": [
          "product/external"
        ],
        "summary": "[BETA] Find external products corresponding with sent data. The sorting-field is not in use on this endpoint.",
        "description": "",
        "operationId": "listProductExternal",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wholesaler",
            "in": "query",
            "description": "Wholesaler",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AHLSELL",
                "BROEDRENE_DAHL",
                "ELEKTROSKANDIA",
                "HEIDENREICH",
                "ONNINEN",
                "OTRA",
                "SOLAR",
                "BERGAARD_AMUNDSEN",
                "BERGAARD_AMUNDSEN_STAVANGER",
                "SORLANDET_ELEKTRO",
                "ETMAN_DISTRIBUSJON",
                "ETM_OST",
                "CENIKA",
                "EP_ENGROS",
                "BETEK",
                "DGROUP",
                "FAGERHULT",
                "GLAMOX",
                "SCHNEIDER",
                "STOKKAN",
                "WURTH",
                "ELEKTROIMPORTOEREN",
                "THERMOFLOOR",
                "LYSKOMPONENTER",
                "NORDESIGN"
              ]
            }
          },
          {
            "name": "organizationNumber",
            "in": "query",
            "description": "Wholesaler organization number. Mandatory if Wholesaler is not selected. If Wholesaler is selected, this field is ignored.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "elNumber",
            "in": "query",
            "description": "List of valid el numbers",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nrfNumber",
            "in": "query",
            "description": "List of valid nrf numbers",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseExternalProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/external/{id}": {
      "get": {
        "tags": [
          "product/external"
        ],
        "summary": "[BETA] Get external product by ID.",
        "description": "",
        "operationId": "getProductExternal",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperExternalProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/list": {
      "post": {
        "tags": [
          "product"
        ],
        "summary": "[BETA] Add multiple products.",
        "description": "",
        "operationId": "createProductList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "product"
        ],
        "summary": "[BETA] Update a list of products.",
        "description": "",
        "operationId": "updateProductList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "description": "JSON representing updates to object. Should have ID and version set."
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/unit": {
      "get": {
        "tags": [
          "product/unit"
        ],
        "summary": "Find product units corresponding with sent data.",
        "description": "",
        "operationId": "listProductUnit",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Names",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameShort",
            "in": "query",
            "description": "Short names",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commonCode",
            "in": "query",
            "description": "Common codes",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProductUnit"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/unit/{id}": {
      "get": {
        "tags": [
          "product/unit"
        ],
        "summary": "Get product unit by ID.",
        "description": "",
        "operationId": "getProductUnit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProductUnit"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/{id}": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Get product by ID.",
        "description": "",
        "operationId": "getProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "product"
        ],
        "summary": "Update product.",
        "description": "",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProduct"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Find projects corresponding with sent data.",
        "description": "",
        "operationId": "listProject",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isOffer",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "projectManagerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeInProjectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isClosed",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalAccountsNumber",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProject"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Add new project.",
        "description": "",
        "operationId": "createProject",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProject"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Delete multiple projects.",
        "description": "",
        "operationId": "deleteProject",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "description": "JSON representing objects to delete. Should have ID and version set."
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/>forTimeSheet": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Find projects applicable for time sheet registration on a specific day.",
        "description": "",
        "operationId": "listProjectForTimeSheet",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProject"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/category": {
      "get": {
        "tags": [
          "project/category"
        ],
        "summary": "Find project categories corresponding with sent data.",
        "description": "",
        "operationId": "listProjectCategory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "project/category"
        ],
        "summary": "Add new project category.",
        "description": "",
        "operationId": "createProjectCategory",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCategory"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/category/{id}": {
      "get": {
        "tags": [
          "project/category"
        ],
        "summary": "Find project category by ID.",
        "description": "",
        "operationId": "getProjectCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/category"
        ],
        "summary": "Update project category.",
        "description": "",
        "operationId": "updateProjectCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCategory"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/controlForm": {
      "get": {
        "tags": [
          "project/controlForm"
        ],
        "summary": "[BETA] Get project control forms by project ID.",
        "description": "",
        "operationId": "listProjectControlForm",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectControlForm"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/controlForm/{id}": {
      "get": {
        "tags": [
          "project/controlForm"
        ],
        "summary": "[BETA] Get project control form by ID.",
        "description": "",
        "operationId": "getProjectControlForm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectControlForm"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates": {
      "get": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Find project hourly rates corresponding with sent data.",
        "description": "",
        "operationId": "listProjectHourlyRates",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "TYPE_PREDEFINED_HOURLY_RATES",
                "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
                "TYPE_FIXED_HOURLY_RATE"
              ]
            }
          },
          {
            "name": "startDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showInProjectOrder",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectHourlyRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Create a project hourly rate. ",
        "description": "",
        "operationId": "createProjectHourlyRates",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProjectHourlyRate"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectHourlyRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/list": {
      "post": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Create multiple project hourly rates.",
        "description": "",
        "operationId": "createProjectHourlyRatesList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/ProjectHourlyRate"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectHourlyRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Update multiple project hourly rates.",
        "description": "",
        "operationId": "updateProjectHourlyRatesList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/ProjectHourlyRate"
                }
              }
            }
          },
          "description": "JSON representing updates to object. Should have ID and version set."
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectHourlyRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Delete project hourly rates.",
        "description": "",
        "operationId": "deleteProjectHourlyRatesList",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/projectSpecificRates": {
      "get": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Find project specific rates corresponding with sent data.",
        "description": "",
        "operationId": "listProjectHourlyRatesProjectSpecificRates",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectHourlyRateId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectSpecificRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Create new project specific rate. ",
        "description": "",
        "operationId": "createProjectHourlyRatesProjectSpecificRates",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProjectSpecificRate"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectSpecificRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/projectSpecificRates/list": {
      "post": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Create multiple new project specific rates.",
        "description": "",
        "operationId": "createProjectHourlyRatesProjectSpecificRatesList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/ProjectSpecificRate"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectSpecificRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Update multiple project specific rates.",
        "description": "",
        "operationId": "updateProjectHourlyRatesProjectSpecificRatesList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/ProjectSpecificRate"
                }
              }
            }
          },
          "description": "JSON representing updates to object. Should have ID and version set."
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectSpecificRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Delete project specific rates.",
        "description": "",
        "operationId": "deleteProjectHourlyRatesProjectSpecificRatesList",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/projectSpecificRates/{id}": {
      "get": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Find project specific rate by ID.",
        "description": "",
        "operationId": "getProjectHourlyRatesProjectSpecificRates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectSpecificRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Update a project specific rate.",
        "description": "",
        "operationId": "updateProjectHourlyRatesProjectSpecificRates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProjectSpecificRate"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectSpecificRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ],
        "summary": "Delete project specific rate ",
        "description": "",
        "operationId": "deleteProjectHourlyRatesProjectSpecificRates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/{id}": {
      "get": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Find project hourly rate by ID.",
        "description": "",
        "operationId": "getProjectHourlyRates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectHourlyRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Update a project hourly rate.",
        "description": "",
        "operationId": "updateProjectHourlyRates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProjectHourlyRate"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectHourlyRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/hourlyRates"
        ],
        "summary": "Delete Project Hourly Rate ",
        "description": "",
        "operationId": "deleteProjectHourlyRates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/list": {
      "post": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Register new projects. Multiple projects for different users can be sent in the same request.",
        "description": "",
        "operationId": "createProjectList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProject"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Update multiple projects.",
        "description": "",
        "operationId": "updateProjectList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "description": "JSON representing updates to object. Should have ID and version set."
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProject"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Delete projects.",
        "description": "",
        "operationId": "deleteProjectList",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/orderline": {
      "get": {
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Find all order lines for project.",
        "description": "",
        "operationId": "listProjectOrderline",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectOrderLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Create order line. When creating several order lines, use /list for better performance.",
        "description": "",
        "operationId": "createProjectOrderline",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProjectOrderLine"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectOrderLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/orderline/list": {
      "post": {
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Create multiple order lines.",
        "description": "",
        "operationId": "createProjectOrderlineList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/ProjectOrderLine"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectOrderLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/orderline/{id}": {
      "get": {
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Get order line by ID.",
        "description": "",
        "operationId": "getProjectOrderline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectOrderLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Update project orderline.",
        "description": "",
        "operationId": "updateProjectOrderline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProjectOrderLine"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectOrderLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/orderline"
        ],
        "summary": "Delete order line by ID.",
        "description": "",
        "operationId": "deleteProjectOrderline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/participant": {
      "post": {
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Add new project participant.",
        "description": "",
        "operationId": "createProjectParticipant",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProjectParticipant"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectParticipant"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/participant/list": {
      "post": {
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Add new project participant. Multiple project participants can be sent in the same request.",
        "description": "",
        "operationId": "createProjectParticipantList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/ProjectParticipant"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectParticipant"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Delete project participants.",
        "description": "",
        "operationId": "deleteProjectParticipantList",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/participant/{id}": {
      "get": {
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Find project participant by ID.",
        "description": "",
        "operationId": "getProjectParticipant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectParticipant"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Update project participant.",
        "description": "",
        "operationId": "updateProjectParticipant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProjectParticipant"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectParticipant"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/projectActivity": {
      "post": {
        "tags": [
          "project/projectActivity"
        ],
        "summary": "Add project activity.",
        "description": "",
        "operationId": "createProjectProjectActivity",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProjectActivity"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectActivity"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/projectActivity/list": {
      "delete": {
        "tags": [
          "project/projectActivity"
        ],
        "summary": "Delete project activities",
        "description": "",
        "operationId": "deleteProjectProjectActivityList",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/projectActivity/{id}": {
      "get": {
        "tags": [
          "project/projectActivity"
        ],
        "summary": "Find project activity by id",
        "description": "",
        "operationId": "getProjectProjectActivity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectActivity"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project/projectActivity"
        ],
        "summary": "Delete project activity",
        "description": "",
        "operationId": "deleteProjectProjectActivity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/task": {
      "get": {
        "tags": [
          "project/task"
        ],
        "summary": "Find all tasks for project.",
        "description": "",
        "operationId": "listProjectTask",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTask"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Find project by ID.",
        "description": "",
        "operationId": "getProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProject"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Update project.",
        "description": "",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProject"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "[BETA] Delete project.",
        "description": "",
        "operationId": "deleteProjectId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/hourlistReport": {
      "get": {
        "tags": [
          "project/period"
        ],
        "summary": "Find hourlist report by project period.",
        "description": "",
        "operationId": "getProjectPeriodHourlistReport",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectPeriodHourlyReport"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/invoiced": {
      "get": {
        "tags": [
          "project/period"
        ],
        "summary": "Find invoiced info by project period.",
        "description": "",
        "operationId": "getProjectPeriodInvoiced",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectPeriodInvoiced"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/invoicingReserve": {
      "get": {
        "tags": [
          "project/period"
        ],
        "summary": "Find invoicing reserve by project period.",
        "description": "",
        "operationId": "getProjectPeriodInvoicingReserve",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectPeriodInvoicingReserve"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/monthlyStatus": {
      "get": {
        "tags": [
          "project/period"
        ],
        "summary": "Find overall status by project period.",
        "description": "",
        "operationId": "getProjectPeriodMonthlyStatus",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProjectPeriodMonthlyStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/overallStatus": {
      "get": {
        "tags": [
          "project/period"
        ],
        "summary": "Find overall status by project period.",
        "description": "",
        "operationId": "getProjectPeriodOverallStatus",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperProjectPeriodOverallStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder": {
      "get": {
        "tags": [
          "purchaseOrder"
        ],
        "summary": "[BETA] Find purchase orders with send data",
        "description": "",
        "operationId": "listPurchaseOrder",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deliveryDateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deliveryDateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creationDateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creationDateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isClosed",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponsePurchaseOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "purchaseOrder"
        ],
        "summary": "[BETA] Creates a new purchase order",
        "description": "",
        "operationId": "createPurchaseOrder",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt": {
      "get": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Get goods receipt. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "listPurchaseOrderGoodsReceipt",
        "parameters": [
          {
            "name": "receivedDateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receivedDateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "STATUS_OPEN",
                "STATUS_CONFIRMED"
              ]
            }
          },
          {
            "name": "withoutPurchase",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseGoodsReceipt"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Register goods receipt without an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "createPurchaseOrderGoodsReceipt",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/GoodsReceipt"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperGoodsReceipt"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/list": {
      "post": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Register multiple goods receipt without an existing purchase order. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "createPurchaseOrderGoodsReceiptList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/GoodsReceipt"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseGoodsReceipt"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Delete multiple goods receipt by ID. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "deletePurchaseOrderGoodsReceiptList",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}": {
      "get": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Get goods receipt by purchase order ID. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "getPurchaseOrderGoodsReceipt",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperGoodsReceipt"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Update goods receipt. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "updatePurchaseOrderGoodsReceipt",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Goods Receipt ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/GoodsReceipt"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperGoodsReceipt"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Delete goods receipt by ID. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "deletePurchaseOrderGoodsReceipt",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}/:confirm": {
      "put": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Confirm goods receipt. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "updatePurchaseOrderGoodsReceiptConfirm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "createRestOrder",
            "in": "query",
            "description": "Create restorder if quantity received is less than ordered",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}/:receiveAndConfirm": {
      "put": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA]  Receive all ordered products and approve goods receipt. Only available for users that have activated the Logistics/Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "updatePurchaseOrderGoodsReceiptReceiveAndConfirm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "receivedDate",
            "in": "query",
            "description": "The approval date for the subscription.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inventoryId",
            "in": "query",
            "description": "ID of inventory. Main inventory is set as default",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}/:registerGoodsReceipt": {
      "put": {
        "tags": [
          "purchaseOrder/goodsReceipt"
        ],
        "summary": "[BETA] Register goods receipt. Quantity received on the products is set to the same as quantity ordered. To update the quantity received, use PUT /purchaseOrder/goodsReceiptLine/{id}. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "updatePurchaseOrderGoodsReceiptRegisterGoodsReceipt",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "registrationDate",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inventoryId",
            "in": "query",
            "description": "ID of inventory. Main inventory is set as default",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperGoodsReceipt"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceiptLine": {
      "get": {
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ],
        "summary": "[BETA] Find goods receipt lines for purchase order. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "listPurchaseOrderGoodsReceiptLine",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseGoodsReceiptLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ],
        "summary": "[BETA] Register new goods receipt; new product on an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "createPurchaseOrderGoodsReceiptLine",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/GoodsReceiptLine"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperGoodsReceiptLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceiptLine/list": {
      "post": {
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ],
        "summary": "[BETA] Register multiple new goods receipt on an existing purchase order. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "createPurchaseOrderGoodsReceiptLineList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/GoodsReceiptLine"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseGoodsReceiptLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceiptLine/{id}": {
      "get": {
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ],
        "summary": "[BETA] Get goods receipt line by purchase order line ID. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "getPurchaseOrderGoodsReceiptLine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperGoodsReceiptLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ],
        "summary": "[BETA] Enter goods receipt on purchase order line. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "updatePurchaseOrderGoodsReceiptLine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order Line ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/GoodsReceiptLine"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperGoodsReceiptLine"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ],
        "summary": "[BETA] Delete goods receipt line by ID. Only available for users that have activated the Logistics Pluss Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "deletePurchaseOrderGoodsReceiptLine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/orderline": {
      "post": {
        "tags": [
          "purchaseOrder/orderline"
        ],
        "summary": " [BETA] Creates purchase order line.",
        "description": "",
        "operationId": "createPurchaseOrderOrderline",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderline"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPurchaseOrderline"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/orderline/{id}": {
      "get": {
        "tags": [
          "purchaseOrder/orderline"
        ],
        "summary": " [BETA] Find purchase order line by ID.",
        "description": "",
        "operationId": "getPurchaseOrderOrderline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPurchaseOrderline"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "purchaseOrder/orderline"
        ],
        "summary": " [BETA] Updates purchase order line",
        "description": "",
        "operationId": "updatePurchaseOrderOrderline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderline"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPurchaseOrderline"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "purchaseOrder/orderline"
        ],
        "summary": " [BETA] Delete purchase order line.",
        "description": "",
        "operationId": "deletePurchaseOrderOrderline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/{id}": {
      "get": {
        "tags": [
          "purchaseOrder"
        ],
        "summary": " [BETA] Find purchase order by ID.",
        "description": "",
        "operationId": "getPurchaseOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "purchaseOrder"
        ],
        "summary": " [BETA] Update purchase order.",
        "description": "",
        "operationId": "updatePurchaseOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "purchaseOrder"
        ],
        "summary": " [BETA] Delete purchase order.",
        "description": "",
        "operationId": "deletePurchaseOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/reminder": {
      "get": {
        "tags": [
          "reminder"
        ],
        "summary": "Find reminders corresponding with sent data.",
        "description": "",
        "operationId": "listReminder",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "termOfPaymentTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "termOfPaymentFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseReminder"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/reminder/{id}": {
      "get": {
        "tags": [
          "reminder"
        ],
        "summary": "Get reminder by ID.",
        "description": "",
        "operationId": "getReminder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperReminder"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/compilation": {
      "get": {
        "tags": [
          "salary/compilation"
        ],
        "summary": "[BETA] Find salary compilation by employee.",
        "description": "",
        "operationId": "listSalaryCompilation",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Must be between 1900-2100. Defaults to previous year.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSalaryCompilation"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/compilation/pdf": {
      "get": {
        "tags": [
          "salary/compilation"
        ],
        "summary": "[BETA] Find salary compilation (PDF document) by employee.",
        "description": "",
        "operationId": "listSalaryCompilationPdf",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Must be between 1900-2100. Defaults to previous year.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/payslip": {
      "get": {
        "tags": [
          "salary/payslip"
        ],
        "summary": "[BETA] Find payslips corresponding with sent data.",
        "description": "",
        "operationId": "listSalaryPayslip",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wageTransactionId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "yearFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "yearTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "monthFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "monthTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "voucherDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "voucherDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponsePayslip"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/payslip/{id}": {
      "get": {
        "tags": [
          "salary/payslip"
        ],
        "summary": "[BETA] Find payslip by ID.",
        "description": "",
        "operationId": "getSalaryPayslip",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPayslip"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/payslip/{id}/pdf": {
      "get": {
        "tags": [
          "salary/payslip"
        ],
        "summary": "[BETA] Find payslip (PDF document) by ID.",
        "description": "",
        "operationId": "getSalaryPayslipPdf",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings": {
      "get": {
        "tags": [
          "salary/settings"
        ],
        "summary": "[BETA] Get salary settings of logged in company.",
        "description": "",
        "operationId": "listSalarySettings",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSalarySettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "salary/settings"
        ],
        "summary": "[BETA] Update settings of logged in company.",
        "description": "",
        "operationId": "updateSalarySettings",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SalarySettings"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSalarySettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings/holiday": {
      "get": {
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] Find holiday settings of current logged in company.",
        "description": "",
        "operationId": "listSalarySettingsHoliday",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCompanyHoliday"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] Create a holiday setting of current logged in company.",
        "description": "",
        "operationId": "createSalarySettingsHoliday",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CompanyHoliday"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCompanyHoliday"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings/holiday/list": {
      "post": {
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] Create multiple holiday settings of current logged in company.",
        "description": "",
        "operationId": "createSalarySettingsHolidayList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/CompanyHoliday"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCompanyHoliday"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] update multiple holiday settings of current logged in company.",
        "description": "",
        "operationId": "updateSalarySettingsHolidayList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/CompanyHoliday"
                }
              }
            }
          },
          "description": "JSON representing updates to object. Should have ID and version set."
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCompanyHoliday"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] delete multiple holiday settings of current logged in company.",
        "description": "",
        "operationId": "deleteSalarySettingsHolidayList",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings/holiday/{id}": {
      "put": {
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] update a holiday setting of current logged in company.",
        "description": "",
        "operationId": "updateSalarySettingsHoliday",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CompanyHoliday"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCompanyHoliday"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/transaction": {
      "post": {
        "tags": [
          "salary/transaction"
        ],
        "summary": "[BETA] Create a new salary transaction.",
        "description": "",
        "operationId": "createSalaryTransaction",
        "parameters": [
          {
            "name": "generateTaxDeduction",
            "in": "query",
            "description": "Generate tax deduction",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SalaryTransaction"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSalaryTransaction"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/transaction/{id}": {
      "get": {
        "tags": [
          "salary/transaction"
        ],
        "summary": "[BETA] Find salary transaction by ID.",
        "description": "",
        "operationId": "getSalaryTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSalaryTransaction"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "salary/transaction"
        ],
        "summary": "[BETA] Delete salary transaction by ID.",
        "description": "",
        "operationId": "deleteSalaryTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/type": {
      "get": {
        "tags": [
          "salary/type"
        ],
        "summary": "[BETA] Find salary type corresponding with sent data.",
        "description": "",
        "operationId": "listSalaryType",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showInTimesheet",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseSalaryType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/type/{id}": {
      "get": {
        "tags": [
          "salary/type"
        ],
        "summary": "[BETA] Find salary type by ID.",
        "description": "",
        "operationId": "getSalaryType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSalaryType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplier": {
      "get": {
        "tags": [
          "supplier"
        ],
        "summary": "Find suppliers corresponding with sent data.",
        "description": "",
        "operationId": "listSupplier",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "supplierNumber",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceEmail",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "accountManagerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changedSince",
            "in": "query",
            "description": "Only return elements that have changed since this date and time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isWholesaler",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showProducts",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseSupplier"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "supplier"
        ],
        "summary": "Create supplier. Related supplier addresses may also be created.",
        "description": "",
        "operationId": "createSupplier",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Supplier"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSupplier"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplier/list": {
      "post": {
        "tags": [
          "supplier"
        ],
        "summary": "[BETA] Create multiple suppliers. Related supplier addresses may also be created.",
        "description": "",
        "operationId": "createSupplierList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Supplier"
                }
              }
            }
          },
          "description": "JSON representing a list of new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseSupplier"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "supplier"
        ],
        "summary": "[BETA] Update multiple suppliers. Addresses can also be updated.",
        "description": "",
        "operationId": "updateSupplierList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/Supplier"
                }
              }
            }
          },
          "description": "JSON representing updates to object. Should have ID and version set."
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseSupplier"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplier/{id}": {
      "get": {
        "tags": [
          "supplier"
        ],
        "summary": "Get supplier by ID.",
        "description": "",
        "operationId": "getSupplier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSupplier"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "supplier"
        ],
        "summary": "Update supplier. ",
        "description": "",
        "operationId": "updateSupplier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Supplier"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSupplier"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry": {
      "get": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find timesheet entry corresponding with sent data.",
        "description": "",
        "operationId": "listTimesheetEntry",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetEntrySearchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Add new timesheet entry. Only one entry per employee/date/activity/project combination is supported.",
        "description": "",
        "operationId": "createTimesheetEntry",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TimesheetEntry"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTimesheetEntry"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/>recentActivities": {
      "get": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find recently used timesheet activities.",
        "description": "",
        "operationId": "listTimesheetEntryRecentActivities",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "ID of employee to find activities for. Defaults to ID of token owner.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of project to find activities for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseActivity"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/>recentProjects": {
      "get": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find projects with recent activities (timesheet entry registered).",
        "description": "",
        "operationId": "listTimesheetEntryRecentProjects",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "ID of employee with recent project hours Defaults to ID of token owner.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseProject"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/>totalHours": {
      "get": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find total hours registered on an employee in a specific period.",
        "description": "",
        "operationId": "listTimesheetEntryTotalHours",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "ID of employee to find hours for. Defaults to ID of token owner.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.). Defaults to today.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.). Defaults to tomorrow.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperDouble"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/list": {
      "post": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Add new timesheet entry. Multiple objects for several users can be sent in the same request.",
        "description": "",
        "operationId": "createTimesheetEntryList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/TimesheetEntry"
                }
              }
            }
          },
          "description": "List of timesheet entry objects"
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTimesheetEntry"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Update timesheet entry. Multiple objects for different users can be sent in the same request.",
        "description": "",
        "operationId": "updateTimesheetEntryList",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "type": "array", "maxItems": 5,
                "items": {
                  "$ref": "#/components/schemas/TimesheetEntry"
                }
              }
            }
          },
          "description": "List of timesheet entry objects to update"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTimesheetEntry"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/{id}": {
      "get": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find timesheet entry by ID.",
        "description": "",
        "operationId": "getTimesheetEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTimesheetEntry"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Update timesheet entry by ID. Note: Timesheet entry object fields which are present but not set, or set to 0, will be nulled.",
        "description": "",
        "operationId": "updateTimesheetEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TimesheetEntry"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTimesheetEntry"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Delete timesheet entry by ID.",
        "description": "",
        "operationId": "deleteTimesheetEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Number of current version",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/salaryTypeSpecification": {
      "get": {
        "tags": [
          "timesheet/salaryTypeSpecification"
        ],
        "summary": "[BETA] Get list of timesheet SalaryType Specifications",
        "description": "",
        "operationId": "listTimesheetSalaryTypeSpecification",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTimesheetSalaryTypeSpecification"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "timesheet/salaryTypeSpecification"
        ],
        "summary": "[BETA] Create a timesheet SalaryType Specification. Only one entry per employee/date/SalaryType",
        "description": "",
        "operationId": "createTimesheetSalaryTypeSpecification",
        "requestBody": {
          "$ref": "#/components/requestBodies/TimesheetSalaryTypeSpecification"
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTimesheetSalaryTypeSpecification"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/salaryTypeSpecification/{id}": {
      "get": {
        "tags": [
          "timesheet/salaryTypeSpecification"
        ],
        "summary": "[BETA] Get timesheet SalaryType Specification for a specific ID",
        "description": "",
        "operationId": "getTimesheetSalaryTypeSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTimesheetSalaryTypeSpecification"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "timesheet/salaryTypeSpecification"
        ],
        "summary": "[BETA] Update a timesheet SalaryType Specification",
        "description": "",
        "operationId": "updateTimesheetSalaryTypeSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TimesheetSalaryTypeSpecification"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTimesheetSalaryTypeSpecification"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "timesheet/salaryTypeSpecification"
        ],
        "summary": "[BETA] Delete a timesheet SalaryType Specification",
        "description": "",
        "operationId": "deleteTimesheetSalaryTypeSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/settings": {
      "get": {
        "tags": [
          "timesheet/settings"
        ],
        "summary": "[BETA] Get timesheet settings of logged in company.",
        "description": "",
        "operationId": "listTimesheetSettings",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTimesheetSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock": {
      "get": {
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Find time clock entries corresponding with sent data.",
        "description": "",
        "operationId": "listTimesheetTimeClock",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hourId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isRunning",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTimeClock"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock/:start": {
      "put": {
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Start time clock.",
        "description": "",
        "operationId": "updateTimesheetTimeClockStart",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Project ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "Activity ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Optional. Default is today’s date",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTimeClock"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock/present": {
      "get": {
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Find a user’s present running time clock.",
        "description": "",
        "operationId": "listTimesheetTimeClockPresent",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTimeClock"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock/{id}": {
      "get": {
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Find time clock entry by ID.",
        "description": "",
        "operationId": "getTimesheetTimeClock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTimeClock"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Update time clock by ID.",
        "description": "",
        "operationId": "updateTimesheetTimeClock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TimeClock"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTimeClock"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock/{id}/:stop": {
      "put": {
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Stop time clock.",
        "description": "",
        "operationId": "updateTimesheetTimeClockStop",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Number of current version",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week": {
      "get": {
        "tags": [
          "timesheet/week"
        ],
        "summary": "Find weekly status By ID, week/year combination, employeeId. or an approver",
        "description": "",
        "operationId": "listTimesheetWeek",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "example": "2018-12",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approvedBy",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseWeek"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week/:approve": {
      "put": {
        "tags": [
          "timesheet/week"
        ],
        "summary": "Approve week. By ID or (ISO-8601 week and employeeId combination).",
        "description": "",
        "operationId": "updateTimesheetWeekApprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "example": "2018-12",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperWeek"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week/:complete": {
      "put": {
        "tags": [
          "timesheet/week"
        ],
        "summary": "Complete week. By ID or (ISO-8601 week and employeeId combination).",
        "description": "",
        "operationId": "updateTimesheetWeekComplete",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "example": "2018-12",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperWeek"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week/:reopen": {
      "put": {
        "tags": [
          "timesheet/week"
        ],
        "summary": "Reopen week. By ID or (ISO-8601 week and employeeId combination).",
        "description": "",
        "operationId": "updateTimesheetWeekReopen",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "example": "2018-12",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperWeek"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week/:unapprove": {
      "put": {
        "tags": [
          "timesheet/week"
        ],
        "summary": "Unapprove week. By ID or (ISO-8601 week and employeeId combination).",
        "description": "",
        "operationId": "updateTimesheetWeekUnapprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "example": "2018-12",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperWeek"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/consumer/byToken": {
      "get": {
        "tags": [
          "token/consumer"
        ],
        "summary": "Get consumer token by token string.",
        "description": "",
        "operationId": "listTokenConsumerByToken",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperConsumerToken"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/employee/:create": {
      "put": {
        "tags": [
          "token/employee"
        ],
        "summary": "Create an employee token. Only selected consumers are allowed",
        "description": "",
        "operationId": "updateTokenEmployeeCreate",
        "parameters": [
          {
            "name": "tokenName",
            "in": "query",
            "description": "A user defined name for the new token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "consumerName",
            "in": "query",
            "description": "The name of the consumer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The id of the employee",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "companyOwned",
            "in": "query",
            "description": "Is the key company owned",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "expirationDate",
            "in": "query",
            "description": "Expiration date for the employeeToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperEmployeeToken"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/session/:create": {
      "put": {
        "tags": [
          "token/session"
        ],
        "summary": "Create session token.",
        "description": "",
        "operationId": "updateTokenSessionCreate",
        "parameters": [
          {
            "name": "consumerToken",
            "in": "query",
            "description": "Token of the API consumer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeToken",
            "in": "query",
            "description": "The employees token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expirationDate",
            "in": "query",
            "description": "Expiration date for the combined token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperSessionToken"
                }
              }
            }
          }
        }
      }
    },
    "/token/session/>whoAmI": {
      "get": {
        "tags": [
          "token/session"
        ],
        "summary": "Find information about the current user.",
        "description": "",
        "operationId": "listTokenSessionWhoAmI",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperLoggedInUserInfoDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/session/{token}": {
      "delete": {
        "tags": [
          "token/session"
        ],
        "summary": "Delete session token.",
        "description": "",
        "operationId": "deleteTokenSession",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "The login token string to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense": {
      "get": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Find travel expenses corresponding with sent data.",
        "description": "",
        "operationId": "listTravelExpense",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectManagerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "departureDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "category",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "OPEN",
                "APPROVED",
                "SALARY_PAID",
                "DELIVERED"
              ],
              "default": "ALL"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTravelExpense"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Create travel expense.",
        "description": "",
        "operationId": "createTravelExpense",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TravelExpense"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTravelExpense"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:approve": {
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Approve travel expenses.",
        "description": "",
        "operationId": "updateTravelExpenseApprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTravelExpense"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:copy": {
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Copy travel expense.",
        "description": "",
        "operationId": "updateTravelExpenseCopy",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTravelExpense"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:createVouchers": {
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Create vouchers",
        "description": "",
        "operationId": "updateTravelExpenseCreateVouchers",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTravelExpense"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:deliver": {
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Deliver travel expenses.",
        "description": "",
        "operationId": "updateTravelExpenseDeliver",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTravelExpense"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:unapprove": {
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Unapprove travel expenses.",
        "description": "",
        "operationId": "updateTravelExpenseUnapprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTravelExpense"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:undeliver": {
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Undeliver travel expenses.",
        "description": "",
        "operationId": "updateTravelExpenseUndeliver",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTravelExpense"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/accommodationAllowance": {
      "get": {
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Find accommodation allowances corresponding with sent data.",
        "description": "",
        "operationId": "listTravelExpenseAccommodationAllowance",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rateTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rateCategoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "rateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "countFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "countTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseAccommodationAllowance"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Create accommodation allowance.",
        "description": "",
        "operationId": "createTravelExpenseAccommodationAllowance",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AccommodationAllowance"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperAccommodationAllowance"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/accommodationAllowance/{id}": {
      "get": {
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Get travel accommodation allowance by ID.",
        "description": "",
        "operationId": "getTravelExpenseAccommodationAllowance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperAccommodationAllowance"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Update accommodation allowance.",
        "description": "",
        "operationId": "updateTravelExpenseAccommodationAllowance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AccommodationAllowance"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperAccommodationAllowance"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Delete accommodation allowance.",
        "description": "",
        "operationId": "deleteTravelExpenseAccommodationAllowance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/cost": {
      "get": {
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Find costs corresponding with sent data.",
        "description": "",
        "operationId": "listTravelExpenseCost",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vatTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "rateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "countFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "countTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseCost"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Create cost.",
        "description": "",
        "operationId": "createTravelExpenseCost",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Cost"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCost"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/cost/{id}": {
      "get": {
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Get cost by ID.",
        "description": "",
        "operationId": "getTravelExpenseCost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCost"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Update cost.",
        "description": "",
        "operationId": "updateTravelExpenseCost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Cost"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperCost"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Delete cost.",
        "description": "",
        "operationId": "deleteTravelExpenseCost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/costCategory": {
      "get": {
        "tags": [
          "travelExpense/costCategory"
        ],
        "summary": "[BETA] Find cost category corresponding with sent data.",
        "description": "",
        "operationId": "listTravelExpenseCostCategory",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showOnEmployeeExpenses",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTravelCostCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/costCategory/{id}": {
      "get": {
        "tags": [
          "travelExpense/costCategory"
        ],
        "summary": "[BETA] Get cost category by ID.",
        "description": "",
        "operationId": "getTravelExpenseCostCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTravelCostCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/mileageAllowance": {
      "get": {
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Find mileage allowances corresponding with sent data.",
        "description": "",
        "operationId": "listTravelExpenseMileageAllowance",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rateTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rateCategoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kmFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "kmTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "rateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "rateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "departureLocation",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isCompanyCar",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseMileageAllowance"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Create mileage allowance.",
        "description": "",
        "operationId": "createTravelExpenseMileageAllowance",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/MileageAllowance"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperMileageAllowance"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/mileageAllowance/{id}": {
      "get": {
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Get mileage allowance by ID.",
        "description": "",
        "operationId": "getTravelExpenseMileageAllowance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperMileageAllowance"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Update mileage allowance.",
        "description": "",
        "operationId": "updateTravelExpenseMileageAllowance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/MileageAllowance"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperMileageAllowance"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Delete mileage allowance.",
        "description": "",
        "operationId": "deleteTravelExpenseMileageAllowance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/passenger": {
      "get": {
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Find passengers corresponding with sent data.",
        "description": "",
        "operationId": "listTravelExpensePassenger",
        "parameters": [
          {
            "name": "mileageAllowance",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponsePassenger"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Create passenger.",
        "description": "",
        "operationId": "createTravelExpensePassenger",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Passenger"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPassenger"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/passenger/{id}": {
      "get": {
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Get passenger by ID.",
        "description": "",
        "operationId": "getTravelExpensePassenger",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPassenger"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Update passenger.",
        "description": "",
        "operationId": "updateTravelExpensePassenger",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Passenger"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPassenger"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Delete passenger.",
        "description": "",
        "operationId": "deleteTravelExpensePassenger",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/paymentType": {
      "get": {
        "tags": [
          "travelExpense/paymentType"
        ],
        "summary": "[BETA] Find payment type corresponding with sent data.",
        "description": "",
        "operationId": "listTravelExpensePaymentType",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showOnEmployeeExpenses",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTravelPaymentType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/paymentType/{id}": {
      "get": {
        "tags": [
          "travelExpense/paymentType"
        ],
        "summary": "[BETA] Get payment type by ID.",
        "description": "",
        "operationId": "getTravelExpensePaymentType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTravelPaymentType"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/perDiemCompensation": {
      "get": {
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Find per diem compensations corresponding with sent data.",
        "description": "",
        "operationId": "listTravelExpensePerDiemCompensation",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rateTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rateCategoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "overnightAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "NONE",
                "HOTEL",
                "BOARDING_HOUSE_WITHOUT_COOKING",
                "BOARDING_HOUSE_WITH_COOKING"
              ]
            }
          },
          {
            "name": "countFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "countTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "rateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "rateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDeductionForBreakfast",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isLunchDeduction",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDinnerDeduction",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponsePerDiemCompensation"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Create per diem compensation.",
        "description": "",
        "operationId": "createTravelExpensePerDiemCompensation",
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/PerDiemCompensation"
              }
            }
          },
          "description": "JSON representing the new object to be created. Should not have ID and version set."
        },
        "responses": {
          "201": {
            "description": "successfully created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPerDiemCompensation"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/perDiemCompensation/{id}": {
      "get": {
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Get per diem compensation by ID.",
        "description": "",
        "operationId": "getTravelExpensePerDiemCompensation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPerDiemCompensation"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Update per diem compensation.",
        "description": "",
        "operationId": "updateTravelExpensePerDiemCompensation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/PerDiemCompensation"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperPerDiemCompensation"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Delete per diem compensation.",
        "description": "",
        "operationId": "deleteTravelExpensePerDiemCompensation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rate": {
      "get": {
        "tags": [
          "travelExpense/rate"
        ],
        "summary": "[BETA] Find rates corresponding with sent data.",
        "description": "",
        "operationId": "listTravelExpenseRate",
        "parameters": [
          {
            "name": "rateCategoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "PER_DIEM",
                "ACCOMMODATION_ALLOWANCE",
                "MILEAGE_ALLOWANCE"
              ]
            }
          },
          {
            "name": "isValidDayTrip",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isValidAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isValidDomestic",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isValidForeignTravel",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "requiresZone",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "requiresOvernightAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTravelExpenseRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rate/{id}": {
      "get": {
        "tags": [
          "travelExpense/rate"
        ],
        "summary": "[BETA] Get travel expense rate by ID.",
        "description": "",
        "operationId": "getTravelExpenseRate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTravelExpenseRate"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rateCategory": {
      "get": {
        "tags": [
          "travelExpense/rateCategory"
        ],
        "summary": "[BETA] Find rate categories corresponding with sent data.",
        "description": "",
        "operationId": "listTravelExpenseRateCategory",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "PER_DIEM",
                "ACCOMMODATION_ALLOWANCE",
                "MILEAGE_ALLOWANCE"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "travelReportRateCategoryGroupId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ameldingWageCode",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wageCodeNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isValidDayTrip",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isValidAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isValidDomestic",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "requiresZone",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isRequiresOvernightAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTravelExpenseRateCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rateCategory/{id}": {
      "get": {
        "tags": [
          "travelExpense/rateCategory"
        ],
        "summary": "[BETA] Get travel expense rate category by ID.",
        "description": "",
        "operationId": "getTravelExpenseRateCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTravelExpenseRateCategory"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rateCategoryGroup": {
      "get": {
        "tags": [
          "travelExpense/rateCategoryGroup"
        ],
        "summary": "[BETA] Find rate categoriy groups corresponding with sent data.",
        "description": "",
        "operationId": "listTravelExpenseRateCategoryGroup",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isForeignTravel",
            "in": "query",
            "description": "Equals",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseTravelExpenseRateCategoryGroup"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rateCategoryGroup/{id}": {
      "get": {
        "tags": [
          "travelExpense/rateCategoryGroup"
        ],
        "summary": "[BETA] Get travel report rate category group by ID.",
        "description": "",
        "operationId": "getTravelExpenseRateCategoryGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTravelExpenseRateCategoryGroup"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/settings": {
      "get": {
        "tags": [
          "travelExpense/settings"
        ],
        "summary": "[BETA] Get travel expense settings of logged in company.",
        "description": "",
        "operationId": "listTravelExpenseSettings",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTravelExpenseSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/{id}": {
      "get": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Get travel expense by ID.",
        "description": "",
        "operationId": "getTravelExpense",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTravelExpense"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Update travel expense.",
        "description": "",
        "operationId": "updateTravelExpense",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/TravelExpense"
              }
            }
          },
          "description": "Partial object describing what should be updated"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseWrapperTravelExpense"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Delete travel expense.",
        "description": "",
        "operationId": "deleteTravelExpense",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/{travelExpenseId}/attachment": {
      "get": {
        "tags": [
          "travelExpense"
        ],
        "summary": "Get attachment by travel expense ID.",
        "description": "",
        "operationId": "getTravelExpenseAttachment",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "path",
            "description": "Travel Expense ID from which PDF is downloaded.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": [
          "travelExpense"
        ],
        "summary": "Upload attachment to travel expense.",
        "description": "",
        "operationId": "createTravelExpenseAttachment",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "path",
            "description": "Travel Expense ID to upload attachment to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "createNewCost",
            "in": "query",
            "description": "Create new cost row when you add the attachment",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createDocumentArchiveAccount"
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Delete attachment.",
        "description": "",
        "operationId": "deleteTravelExpenseAttachment",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "path",
            "description": "ID of attachment containing the attachment to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of voucher containing the attachment to delete.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "sendToInbox",
            "in": "query",
            "description": "Should the attachment be sent to inbox rather than deleted?",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "split",
            "in": "query",
            "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/{travelExpenseId}/attachment/list": {
      "post": {
        "tags": [
          "travelExpense"
        ],
        "summary": "Upload multiple attachments to travel expense.",
        "description": "",
        "operationId": "createTravelExpenseAttachmentList",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "path",
            "description": "Travel Expense ID to upload attachment to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "createNewCost",
            "in": "query",
            "description": "Create new cost row when you add the attachment",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FormDataMultiPart"
              }
            }
          },
          "description": "Multipart files",
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://tripletex.no/v2"
    }
  ],
  "components": {
    "requestBodies": {
      "TimesheetSalaryTypeSpecification": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TimesheetSalaryTypeSpecification"
            }
          }
        },
        "description": "JSON representing the new object to be created. Should not have ID and version set."
      },
      "createDocumentArchiveAccount": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "file": {
                  "description": "The file",
                  "type": "string",
                  "format": "binary"
                }
              },
              "required": [
                "file"
              ]
            }
          }
        }
      },
      "BankReconciliationMatch": {
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/BankReconciliationMatch"
            }
          }
        },
        "description": "Partial object describing what should be updated"
      }
    },
    "securitySchemes": {
      "tokenAuthScheme": {
        "description": "Basic AUTH where username is company/customer id for proxy use (or 0 for default), password should be set to the session token",
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "Delete": {
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean",
            "description": "Is the delete operation available for this Voucher?",
            "readOnly": true,
            "default": false
          },
          "reasons": {
            "type": "array", "maxItems": 5,
            "description": "If the delete operation is not available then this is a list of reasons why. Otherwise the list will be empty",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ResponseWrapperProspect": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Prospect"
          }
        }
      },
      "ResponseWrapperPayslip": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Payslip"
          }
        }
      },
      "Customer": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "organizationNumber": {
            "type": "string",
            "maxLength": 100
          },
          "supplierNumber": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "customerNumber": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "isSupplier": {
            "type": "boolean",
            "description": "Defines if the customer is also a supplier.",
            "default": false
          },
          "isCustomer": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "isInactive": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "accountManager": {
            "$ref": "#/components/schemas/Employee"
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 0,
            "maxLength": 254
          },
          "invoiceEmail": {
            "type": "string",
            "minLength": 0,
            "maxLength": 254
          },
          "overdueNoticeEmail": {
            "type": "string",
            "format": "email",
            "description": "The email address of the customer where the noticing emails are sent in case of an overdue",
            "minLength": 0,
            "maxLength": 254
          },
          "bankAccounts": {
            "type": "array", "maxItems": 5,
            "description": "List of the bank account numbers for this customer. Norwegian bank account numbers only.",
            "items": {
              "type": "string"
            }
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 100
          },
          "phoneNumberMobile": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string"
          },
          "isPrivateIndividual": {
            "type": "boolean",
            "default": false
          },
          "singleCustomerInvoice": {
            "type": "boolean",
            "description": "Enables various orders on one customer invoice.",
            "default": false
          },
          "invoiceSendMethod": {
            "type": "string",
            "description": "Define the invoicing method for the customer.<br>EMAIL: Send invoices as email.<br>EHF: Send invoices as EHF.<br>EFAKTURA: Send invoices as EFAKTURA.<br>VIPPS: Send invoices through VIPPS.<br>PAPER: Send invoices as paper invoice.<br>",
            "enum": [
              "EMAIL",
              "EHF",
              "EFAKTURA",
              "VIPPS",
              "PAPER"
            ]
          },
          "emailAttachmentType": {
            "type": "string",
            "description": "Define the invoice attachment type for emailing to the customer.<br>LINK: Send invoice as link in email.<br>ATTACHMENT: Send invoice as attachment in email.<br>",
            "enum": [
              "LINK",
              "ATTACHMENT"
            ]
          },
          "postalAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "physicalAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/DeliveryAddress"
          },
          "category1": {
            "$ref": "#/components/schemas/CustomerCategory"
          },
          "category2": {
            "$ref": "#/components/schemas/CustomerCategory"
          },
          "category3": {
            "$ref": "#/components/schemas/CustomerCategory"
          },
          "invoicesDueIn": {
            "type": "integer",
            "format": "int32",
            "description": "Number of days/months in which invoices created from this customer is due",
            "minimum": 0,
            "maximum": 10000
          },
          "invoicesDueInType": {
            "type": "string",
            "description": "Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this customer. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.",
            "enum": [
              "DAYS",
              "MONTHS",
              "RECURRING_DAY_OF_MONTH"
            ]
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "number": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string"
          },
          "ean": {
            "type": "string",
            "maxLength": 14
          },
          "elNumber": {
            "type": "string",
            "readOnly": true,
            "maxLength": 14
          },
          "nrfNumber": {
            "type": "string",
            "readOnly": true,
            "maxLength": 14
          },
          "costExcludingVatCurrency": {
            "type": "number",
            "description": "Price purchase (cost) excluding VAT in the product's currency"
          },
          "priceExcludingVatCurrency": {
            "type": "number",
            "description": "Price of purchase excluding VAT in the product's currency"
          },
          "priceIncludingVatCurrency": {
            "type": "number",
            "description": "Price of purchase including VAT in the product's currency"
          },
          "isInactive": {
            "type": "boolean",
            "default": false
          },
          "productUnit": {
            "$ref": "#/components/schemas/ProductUnit"
          },
          "isStockItem": {
            "type": "boolean",
            "default": false
          },
          "stockOfGoods": {
            "type": "number",
            "readOnly": true
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "discountPrice": {
            "type": "number",
            "readOnly": true
          },
          "supplier": {
            "$ref": "#/components/schemas/Supplier"
          },
          "resaleProduct": {
            "$ref": "#/components/schemas/Product"
          }
        }
      },
      "ListResponseTimeClock": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/TimeClock"
            }
          }
        }
      },
      "PG2CallbackDTO": {
        "type": "object",
        "required": [
          "ODPCompanyID",
          "ODPCustomerID",
          "autoPayKey",
          "autoPayKeyLastGeneratedDate",
          "pgRequestId",
          "tenantId"
        ],
        "properties": {
          "odpcompanyID": {
            "type": "integer",
            "format": "int32"
          },
          "odpcustomerID": {
            "type": "integer",
            "format": "int32"
          },
          "pgRequestId": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "ODPCustomerID": {
            "type": "integer",
            "format": "int32"
          },
          "ODPCompanyID": {
            "type": "integer",
            "format": "int32"
          },
          "autoPayKey": {
            "type": "string"
          },
          "autoPayKeyLastGeneratedDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "SearchCompletionDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "alternateName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "postalArea": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "score": {
            "type": "integer",
            "format": "int32"
          },
          "sources": {
            "type": "array", "maxItems": 5,
            "items": {
              "type": "string",
              "enum": [
                "SEARCH1881",
                "TRIPLETEX",
                "NICKNAME",
                "EMPLOYEE",
                "CONTACT",
                "ACTIVITY",
                "PROJECT",
                "ORDER",
                "OFFER",
                "CUSTOMER",
                "COMPANY",
                "CONTROLSCHEMA",
                "HOUR",
                "TRAVELEXPENSE"
              ]
            }
          },
          "id": {
            "type": "string"
          },
          "category": {
            "type": "string"
          }
        }
      },
      "ListResponseEmploymentDetails": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/EmploymentDetails"
            }
          }
        }
      },
      "ResponseWrapperCompanyHoliday": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/CompanyHoliday"
          }
        }
      },
      "ListResponsePayslip": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Payslip"
            }
          }
        }
      },
      "MobileAppLogin": {
        "type": "object",
        "required": [
          "appSecret",
          "expirationDate",
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Users username (email)"
          },
          "password": {
            "type": "string",
            "description": "Users password"
          },
          "appSecret": {
            "type": "string",
            "description": "App secret"
          },
          "mfaCode": {
            "type": "integer",
            "format": "int32",
            "description": "Optional mfa auth code"
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date for the combined token"
          },
          "employeeId": {
            "type": "integer",
            "format": "int32",
            "description": "Optional employee ID. Default employee is used when null"
          }
        }
      },
      "EmployeeEmail": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Employee e-mail address",
            "minLength": 1
          }
        }
      },
      "ProjectControlForm": {
        "type": "object",
        "required": [
          "comment",
          "title"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "comment": {
            "type": "string",
            "minLength": 1
          },
          "completed": {
            "type": "boolean",
            "default": false
          },
          "signatureRequired": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "signed": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "controlForm": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Employee": {
        "type": "object",
        "required": [
          "firstName",
          "lastName"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "employeeNumber": {
            "type": "string",
            "minLength": 0,
            "maxLength": 100
          },
          "dateOfBirth": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "phoneNumberMobileCountry": {
            "$ref": "#/components/schemas/Country"
          },
          "phoneNumberMobile": {
            "type": "string",
            "maxLength": 100
          },
          "phoneNumberHome": {
            "type": "string",
            "maxLength": 100
          },
          "phoneNumberWork": {
            "type": "string",
            "maxLength": 100
          },
          "nationalIdentityNumber": {
            "type": "string",
            "maxLength": 100
          },
          "dnumber": {
            "type": "string",
            "maxLength": 11
          },
          "internationalId": {
            "$ref": "#/components/schemas/InternationalId"
          },
          "bankAccountNumber": {
            "type": "string",
            "maxLength": 100
          },
          "iban": {
            "type": "string",
            "description": "IBAN field -- pilot program"
          },
          "bic": {
            "type": "string",
            "description": "Bic (swift) field -- pilot program"
          },
          "creditorBankCountryId": {
            "type": "integer",
            "format": "int32",
            "description": "Country of creditor bank field -- pilot program"
          },
          "userType": {
            "type": "string",
            "description": "Define the employee's user type.<br>STANDARD: Reduced access. Users with limited system entitlements.<br>EXTENDED: Users can be given all system entitlements.<br>NO_ACCESS: User with no log on access.<br>Users with access to Tripletex must confirm the email address.",
            "enum": [
              "STANDARD",
              "EXTENDED",
              "NO_ACCESS"
            ]
          },
          "allowInformationRegistration": {
            "type": "boolean",
            "description": "Determines if salary information can be registered on the user including hours, travel expenses and employee expenses. The user may also be selected as a project member on projects.",
            "readOnly": true,
            "default": false
          },
          "isContact": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "comments": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "employments": {
            "type": "array", "maxItems": 5,
            "description": "Employments tied to the employee",
            "items": {
              "$ref": "#/components/schemas/Employment"
            }
          },
          "holidayAllowanceEarned": {
            "$ref": "#/components/schemas/HolidayAllowanceEarned"
          }
        }
      },
      "ResponseWrapperSystemMessage": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SystemMessage"
          }
        }
      },
      "ResponseWrapperSalesForceOpportunity": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SalesForceOpportunity"
          }
        }
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "validationMessages": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/ApiValidationMessage"
            }
          },
          "requestId": {
            "type": "string"
          }
        }
      },
      "Week": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "timesheetEntries": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/TimesheetEntry"
            }
          },
          "year": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "week": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "completed": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "approved": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "approvedBy": {
            "$ref": "#/components/schemas/Employee"
          },
          "approvedDate": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Link": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "POST",
              "PUT",
              "GET",
              "DELETE"
            ]
          },
          "href": {
            "type": "string"
          }
        }
      },
      "ListResponseBankReconciliationMatch": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/BankReconciliationMatch"
            }
          }
        }
      },
      "AnnualAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "year": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "start": {
            "type": "string",
            "readOnly": true
          },
          "end": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "CustomerTripletexAccount": {
        "type": "object",
        "required": [
          "accountType",
          "modules",
          "numberOfVouchers",
          "type"
        ],
        "properties": {
          "administrator": {
            "$ref": "#/components/schemas/Employee"
          },
          "customerId": {
            "type": "integer",
            "format": "int32",
            "description": "The customer id to an already created customer to create a Tripletex account for.",
            "minimum": 1
          },
          "accountType": {
            "type": "string",
            "enum": [
              "TEST",
              "PAYING"
            ]
          },
          "modules": {
            "$ref": "#/components/schemas/Modules"
          },
          "type": {
            "type": "string",
            "enum": [
              "NONE",
              "ENK",
              "AS",
              "NUF",
              "ANS",
              "DA",
              "PRE",
              "KS",
              "ASA",
              "BBL",
              "BRL",
              "GFS",
              "SPA",
              "SF",
              "IKS",
              "KF_FKF",
              "FCD",
              "EOFG",
              "BA",
              "STI",
              "ORG",
              "ESEK",
              "SA",
              "SAM",
              "BO",
              "VPFO",
              "OS",
              "Other"
            ]
          },
          "sendEmails": {
            "type": "boolean",
            "description": "Should the emails normally sent during creation be sent in this case?",
            "default": false
          },
          "autoValidateUserLogin": {
            "type": "boolean",
            "description": "Should the user be automatically validated?",
            "default": false
          },
          "createApiToken": {
            "type": "boolean",
            "description": "Creates a token for the admin user. The accounting office could also use their tokens so you might not need this.",
            "default": false
          },
          "sendInvoiceToCustomer": {
            "type": "boolean",
            "description": "Should the invoices for this account be sent to the customer?",
            "default": false
          },
          "customerInvoiceEmail": {
            "type": "string",
            "description": "The address to send the invoice to at the customer."
          },
          "numberOfEmployees": {
            "type": "integer",
            "format": "int32",
            "description": "The number of employees in the customer company. Is used for calculating prices and setting some default settings, i.e. approval settings for timesheet."
          },
          "numberOfVouchers": {
            "type": "string",
            "description": "Number of vouchers each year. Used to calculate prices.",
            "enum": [
              "INTERVAL_0_100",
              "INTERVAL_101_500",
              "INTERVAL_0_500",
              "INTERVAL_501_1000",
              "INTERVAL_1001_2000",
              "INTERVAL_2001_3500",
              "INTERVAL_3501_5000",
              "INTERVAL_5001_10000",
              "INTERVAL_UNLIMITED"
            ]
          },
          "administratorPassword": {
            "type": "string",
            "description": "The password of the administrator user."
          },
          "chartOfAccountsType": {
            "type": "string",
            "description": "The chart of accounts to use for the new company",
            "enum": [
              "DEFAULT",
              "MAMUT_STD_PAYROLL",
              "MAMUT_NARF_PAYROLL",
              "AGRO_FORRETNING_PAYROLL",
              "AGRO_LANDBRUK_PAYROLL",
              "AGRO_FISKE_PAYROLL",
              "AGRO_FORSOKSRING_PAYROLL",
              "AGRO_IDRETTSLAG_PAYROLL",
              "AGRO_FORENING_PAYROLL"
            ]
          }
        }
      },
      "ListResponseCurrency": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Currency"
            }
          }
        }
      },
      "Notification": {
        "type": "object",
        "required": [
          "date",
          "message",
          "title",
          "type"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "date": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "maxLength": 100
          },
          "message": {
            "type": "string",
            "maxLength": 255
          },
          "type": {
            "type": "string",
            "maxLength": 50
          },
          "link": {
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "ListResponseWeek": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Week"
            }
          }
        }
      },
      "ListResponseActivity": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Activity"
            }
          }
        }
      },
      "TimesheetEntrySearchResponse": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/TimesheetEntry"
            }
          },
          "sumAllHours": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ListResponseVoucher": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Voucher"
            }
          }
        }
      },
      "OrderLine": {
        "type": "object",
        "required": [
          "order"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "inventory": {
            "$ref": "#/components/schemas/Inventory"
          },
          "description": {
            "type": "string"
          },
          "count": {
            "type": "number",
            "format": "double"
          },
          "unitCostCurrency": {
            "type": "number",
            "description": "Unit price purchase (cost) excluding VAT in the order's currency"
          },
          "unitPriceExcludingVatCurrency": {
            "type": "number",
            "description": "Unit price of purchase excluding VAT in the order's currency"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "markup": {
            "type": "number",
            "format": "double",
            "description": "Markup given as a percentage (%)"
          },
          "discount": {
            "type": "number",
            "format": "double",
            "description": "Discount given as a percentage (%)"
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "amountExcludingVatCurrency": {
            "type": "number",
            "description": "Total amount on order line excluding VAT in the order's currency",
            "readOnly": true
          },
          "amountIncludingVatCurrency": {
            "type": "number",
            "description": "Total amount on order line including VAT in the order's currency",
            "readOnly": true
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "unitPriceIncludingVatCurrency": {
            "type": "number",
            "description": "Unit price of purchase including VAT in the order's currency"
          },
          "isSubscription": {
            "type": "boolean",
            "default": false
          },
          "subscriptionPeriodStart": {
            "type": "string"
          },
          "subscriptionPeriodEnd": {
            "type": "string"
          }
        }
      },
      "ListResponseCost": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Cost"
            }
          }
        }
      },
      "SalesForceEmployee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phoneNumberMobile": {
            "type": "string"
          },
          "phoneNumberHome": {
            "type": "string"
          },
          "phoneNumberWork": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/SalesForceAddressDTO"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "customerId": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumberSmsCertified": {
            "type": "string"
          },
          "isUserAdministrator": {
            "type": "boolean",
            "default": false
          },
          "isAccountAdministrator": {
            "type": "boolean",
            "default": false
          },
          "allowLogin": {
            "type": "boolean",
            "default": false
          },
          "isExternal": {
            "type": "boolean",
            "default": false
          },
          "isTripletexCertified": {
            "type": "boolean",
            "default": false
          },
          "isDefaultLogin": {
            "type": "boolean",
            "default": false
          },
          "loginEndDate": {
            "type": "string",
            "description": "Login end date",
            "readOnly": true
          }
        }
      },
      "ApiConsumer": {
        "type": "object",
        "required": [
          "consumerName",
          "emails"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "consumerName": {
            "type": "string",
            "minLength": 5,
            "maxLength": 100
          },
          "emails": {
            "type": "string",
            "format": "email",
            "maxLength": 255
          }
        }
      },
      "ProjectPeriodInvoiced": {
        "type": "object",
        "properties": {
          "sumAmountPaid": {
            "type": "number",
            "readOnly": true
          },
          "sumAmountOutstanding": {
            "type": "number",
            "readOnly": true
          },
          "sumAmountDue": {
            "type": "number",
            "readOnly": true
          },
          "sumAmountDueOutstanding": {
            "type": "number",
            "readOnly": true
          },
          "sumAmount": {
            "type": "number",
            "readOnly": true
          }
        }
      },
      "ResponseWrapperLegacyAddress": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/LegacyAddress"
          }
        }
      },
      "ResponseWrapperMileageAllowance": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/MileageAllowance"
          }
        }
      },
      "ListResponseProjectParticipant": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/ProjectParticipant"
            }
          }
        }
      },
      "ResponseWrapperTravelPaymentType": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TravelPaymentType"
          }
        }
      },
      "Reminder": {
        "type": "object",
        "required": [
          "termOfPayment",
          "type"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "reminderDate": {
            "type": "string",
            "description": "Creation date of the invoice reminder.",
            "readOnly": true
          },
          "charge": {
            "type": "number",
            "description": "The fee part of the reminder, in the company's currency.",
            "readOnly": true
          },
          "chargeCurrency": {
            "type": "number",
            "description": "The fee part of the reminder, in the invoice currency.",
            "readOnly": true
          },
          "totalCharge": {
            "type": "number",
            "description": "The total fee part of all reminders, in the company's currency.",
            "readOnly": true
          },
          "totalChargeCurrency": {
            "type": "number",
            "description": "The total fee part of all reminders, in the invoice currency.",
            "readOnly": true
          },
          "totalAmountCurrency": {
            "type": "number",
            "description": "The total amount to pay in reminder's currency.",
            "readOnly": true
          },
          "interests": {
            "type": "number",
            "description": "The interests part of the reminder.",
            "readOnly": true
          },
          "interestRate": {
            "type": "number",
            "description": "The reminder interest rate.",
            "readOnly": true
          },
          "termOfPayment": {
            "type": "string",
            "description": "The reminder term of payment date."
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "type": {
            "type": "string",
            "enum": [
              "SOFT_REMINDER",
              "REMINDER",
              "NOTICE_OF_DEBT_COLLECTION",
              "DEBT_COLLECTION"
            ]
          },
          "comment": {
            "type": "string"
          },
          "kid": {
            "type": "string",
            "description": "KID - Kundeidentifikasjonsnummer.",
            "maxLength": 25
          },
          "bankAccountNumber": {
            "type": "string",
            "maxLength": 255
          },
          "bankAccountIBAN": {
            "type": "string",
            "maxLength": 255
          },
          "bankAccountSWIFT": {
            "type": "string",
            "maxLength": 255
          },
          "bank": {
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "ResponseWrapperMapStringEventInfoDescription": {
        "type": "object",
        "properties": {
          "value": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EventInfoDescription"
            }
          }
        }
      },
      "ResponseWrapperStandardTime": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/StandardTime"
          }
        }
      },
      "ResponseWrapperObject": {
        "type": "object",
        "properties": {
          "value": {
            "type": "object"
          }
        }
      },
      "ResponseWrapperProjectControlForm": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProjectControlForm"
          }
        }
      },
      "GoodsReceiptLine": {
        "type": "object",
        "required": [
          "product",
          "quantityReceived"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "purchaseOrder": {
            "$ref": "#/components/schemas/PurchaseOrder"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "inventory": {
            "$ref": "#/components/schemas/Inventory"
          },
          "quantityOrdered": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "quantityReceived": {
            "type": "number",
            "format": "double"
          },
          "quantityRest": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        }
      },
      "ResponseWrapperBankTransaction": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/BankTransaction"
          }
        }
      },
      "BankReconciliation": {
        "type": "object",
        "required": [
          "account",
          "accountingPeriod",
          "type"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "accountingPeriod": {
            "$ref": "#/components/schemas/AccountingPeriod"
          },
          "voucher": {
            "$ref": "#/components/schemas/Voucher"
          },
          "transactions": {
            "type": "array", "maxItems": 5,
            "description": "Bank transactions tied to the bank reconciliation",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/BankTransaction"
            }
          },
          "isClosed": {
            "type": "boolean",
            "default": false
          },
          "type": {
            "type": "string",
            "description": "Type of Bank Reconciliation.",
            "enum": [
              "MANUAL",
              "AUTOMATIC"
            ]
          },
          "bankAccountClosingBalanceCurrency": {
            "type": "number"
          },
          "closedDate": {
            "type": "string",
            "readOnly": true
          },
          "closedByContact": {
            "$ref": "#/components/schemas/Contact"
          },
          "closedByEmployee": {
            "$ref": "#/components/schemas/Employee"
          },
          "approvable": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          }
        }
      },
      "DashboardDTO": {
        "type": "object",
        "required": [
          "content",
          "version"
        ],
        "properties": {
          "version": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "content": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "ResponseWrapperGoodsReceipt": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/GoodsReceipt"
          }
        }
      },
      "ProductUnit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "nameShort": {
            "type": "string",
            "maxLength": 50
          },
          "commonCode": {
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "TravelCostCategory": {
        "type": "object",
        "required": [
          "description"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "isVatLocked": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "showOnTravelExpenses": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "showOnEmployeeExpenses": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "isInactive": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          }
        }
      },
      "ResponseWrapperConsumerToken": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ConsumerToken"
          }
        }
      },
      "TravelExpense": {
        "type": "object",
        "required": [
          "employee"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "approvedBy": {
            "$ref": "#/components/schemas/Employee"
          },
          "completedBy": {
            "$ref": "#/components/schemas/Employee"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "payslip": {
            "$ref": "#/components/schemas/Payslip"
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "paymentCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "travelDetails": {
            "$ref": "#/components/schemas/TravelDetails"
          },
          "voucher": {
            "$ref": "#/components/schemas/Voucher"
          },
          "attachment": {
            "$ref": "#/components/schemas/Document"
          },
          "isCompleted": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "isApproved": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "isChargeable": {
            "type": "boolean",
            "default": false
          },
          "isFixedInvoicedAmount": {
            "type": "boolean",
            "default": false
          },
          "isIncludeAttachedReceiptsWhenReinvoicing": {
            "type": "boolean",
            "default": false
          },
          "completedDate": {
            "type": "string",
            "readOnly": true
          },
          "approvedDate": {
            "type": "string",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "readOnly": true
          },
          "travelAdvance": {
            "type": "number"
          },
          "fixedInvoicedAmount": {
            "type": "number"
          },
          "amount": {
            "type": "number",
            "readOnly": true
          },
          "paymentAmount": {
            "type": "number",
            "readOnly": true
          },
          "chargeableAmount": {
            "type": "number",
            "readOnly": true
          },
          "lowRateVAT": {
            "type": "number",
            "readOnly": true
          },
          "mediumRateVAT": {
            "type": "number",
            "readOnly": true
          },
          "highRateVAT": {
            "type": "number",
            "readOnly": true
          },
          "paymentAmountCurrency": {
            "type": "number",
            "readOnly": true
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "invoice": {
            "$ref": "#/components/schemas/Invoice"
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "perDiemCompensations": {
            "type": "array", "maxItems": 5,
            "description": "Link to individual per diem compensations.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/PerDiemCompensation"
            }
          },
          "mileageAllowances": {
            "type": "array", "maxItems": 5,
            "description": "Link to individual mileage allowances.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/MileageAllowance"
            }
          },
          "accommodationAllowances": {
            "type": "array", "maxItems": 5,
            "description": "Link to individual accommodation allowances.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AccommodationAllowance"
            }
          },
          "costs": {
            "type": "array", "maxItems": 5,
            "description": "Link to individual costs.",
            "items": {
              "$ref": "#/components/schemas/Cost"
            }
          },
          "attachmentCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "minimum": 0,
            "maximum": 2147483647
          },
          "state": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "ALL",
              "OPEN",
              "APPROVED",
              "SALARY_PAID",
              "DELIVERED"
            ]
          },
          "actions": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "isSalaryAdmin": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "showPayslip": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "accountingPeriodClosed": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "accountingPeriodVATClosed": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          }
        }
      },
      "ResponseWrapperProjectPeriodInvoiced": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProjectPeriodInvoiced"
          }
        }
      },
      "ListResponseDeliveryAddress": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/DeliveryAddress"
            }
          }
        }
      },
      "ListResponseGoodsReceiptLine": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/GoodsReceiptLine"
            }
          }
        }
      },
      "PurchaseOrderline": {
        "type": "object",
        "required": [
          "purchaseOrder"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "purchaseOrder": {
            "$ref": "#/components/schemas/PurchaseOrder"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "description": {
            "type": "string"
          },
          "count": {
            "type": "number",
            "format": "double",
            "minimum": 1
          },
          "unitCostCurrency": {
            "type": "number",
            "description": "Unit price purchase (cost) excluding VAT in the order's currency"
          },
          "unitPriceExcludingVatCurrency": {
            "type": "number",
            "description": "Unit price of purchase excluding VAT in the order's currency"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "discount": {
            "type": "number",
            "format": "double",
            "description": "Discount given as a percentage (%)"
          },
          "amountExcludingVatCurrency": {
            "type": "number",
            "description": "Total amount on order line excluding VAT in the order's currency",
            "readOnly": true
          },
          "amountIncludingVatCurrency": {
            "type": "number",
            "description": "Total amount on order line including VAT in the order's currency",
            "readOnly": true
          }
        }
      },
      "ListResponsePerDiemCompensation": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/PerDiemCompensation"
            }
          }
        }
      },
      "ListResponseAccount": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
      },
      "VatType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "number": {
            "type": "string",
            "maxLength": 10
          },
          "percentage": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "CustomerTripletexAccount2": {
        "type": "object",
        "required": [
          "accountType",
          "modules",
          "type"
        ],
        "properties": {
          "administrator": {
            "$ref": "#/components/schemas/Employee"
          },
          "customerId": {
            "type": "integer",
            "format": "int32",
            "description": "The customer id to an already created customer to create a Tripletex account for."
          },
          "accountType": {
            "type": "string",
            "enum": [
              "TEST",
              "PAYING"
            ]
          },
          "modules": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/SalesModuleDTO"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "NONE",
              "ENK",
              "AS",
              "NUF",
              "ANS",
              "DA",
              "PRE",
              "KS",
              "ASA",
              "BBL",
              "BRL",
              "GFS",
              "SPA",
              "SF",
              "IKS",
              "KF_FKF",
              "FCD",
              "EOFG",
              "BA",
              "STI",
              "ORG",
              "ESEK",
              "SA",
              "SAM",
              "BO",
              "VPFO",
              "OS",
              "Other"
            ]
          },
          "sendEmails": {
            "type": "boolean",
            "description": "Should the emails normally sent during creation be sent in this case?",
            "default": false
          },
          "autoValidateUserLogin": {
            "type": "boolean",
            "description": "Should the user be automatically validated?",
            "default": false
          },
          "createApiToken": {
            "type": "boolean",
            "description": "Creates a token for the admin user. The accounting office could also use their tokens so you might not need this.",
            "default": false
          },
          "sendInvoiceToCustomer": {
            "type": "boolean",
            "description": "Should the invoices for this account be sent to the customer?",
            "default": false
          },
          "customerInvoiceEmail": {
            "type": "string",
            "description": "The address to send the invoice to at the customer."
          },
          "numberOfEmployees": {
            "type": "integer",
            "format": "int32",
            "description": "The number of employees in the customer company. Is used for calculating prices and setting some default settings, i.e. approval settings for timesheet."
          },
          "administratorPassword": {
            "type": "string",
            "description": "The password of the administrator user."
          },
          "chartOfAccountsType": {
            "type": "string",
            "description": "The chart of accounts to use for the new company",
            "enum": [
              "DEFAULT",
              "MAMUT_STD_PAYROLL",
              "MAMUT_NARF_PAYROLL",
              "AGRO_FORRETNING_PAYROLL",
              "AGRO_LANDBRUK_PAYROLL",
              "AGRO_FISKE_PAYROLL",
              "AGRO_FORSOKSRING_PAYROLL",
              "AGRO_IDRETTSLAG_PAYROLL",
              "AGRO_FORENING_PAYROLL"
            ]
          }
        }
      },
      "SalesForceCountryDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "isoAlpha2Code": {
            "type": "string"
          },
          "isoAlpha3Code": {
            "type": "string"
          },
          "isoNumericCode": {
            "type": "string"
          }
        }
      },
      "ListResponsePaymentTypeOut": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/PaymentTypeOut"
            }
          }
        }
      },
      "ResponseWrapperTravelCostCategory": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TravelCostCategory"
          }
        }
      },
      "TimesheetSalaryTypeSpecification": {
        "type": "object",
        "required": [
          "count",
          "date",
          "employee",
          "salaryType"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "salaryType": {
            "$ref": "#/components/schemas/SalaryType"
          },
          "description": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "count": {
            "type": "number"
          }
        }
      },
      "ResponseWrapperTravelExpenseRate": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TravelExpenseRate"
          }
        }
      },
      "SalaryCompilation": {
        "type": "object",
        "properties": {
          "employee": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "year": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "vacationPayBasis": {
            "type": "number",
            "readOnly": true
          },
          "wages": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/SalaryCompilationLine"
            }
          },
          "expenses": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/SalaryCompilationLine"
            }
          },
          "deductions": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/SalaryCompilationLine"
            }
          }
        }
      },
      "ResponseWrapperAutoLogin": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/AutoLogin"
          }
        }
      },
      "ResponseWrapperAltinnCompanyModule": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/AltinnCompanyModule"
          }
        }
      },
      "MessageBodyWorkers": {
        "type": "object"
      },
      "ResponseWrapperSupplier": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Supplier"
          }
        }
      },
      "LeaveOfAbsenceType": {
        "type": "object",
        "required": [
          "leaveOfAbsenceType"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "leaveOfAbsenceType": {
            "type": "string",
            "description": "Defines the leave of absence type option.",
            "enum": [
              "LEAVE_OF_ABSENCE",
              "FURLOUGH",
              "PARENTAL_BENEFITS",
              "MILITARY_SERVICE",
              "EDUCATIONAL",
              "COMPASSIONATE"
            ]
          },
          "nameNO": {
            "type": "string",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "SalesForceAccountInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "customerId": {
            "type": "integer",
            "format": "int32"
          },
          "customerCompanyId": {
            "type": "integer",
            "format": "int32"
          },
          "isReseller": {
            "type": "boolean",
            "default": false
          },
          "isAccountant": {
            "type": "boolean",
            "default": false
          },
          "isAuditor": {
            "type": "boolean",
            "default": false
          },
          "isSuspended": {
            "type": "boolean",
            "default": false
          },
          "registerDate": {
            "type": "string",
            "description": "Tripletex account register Date",
            "readOnly": true
          },
          "startDate": {
            "type": "string",
            "description": "Tripletex account start Date",
            "readOnly": true
          },
          "endDate": {
            "type": "string",
            "description": "Tripletex account end Date",
            "readOnly": true
          }
        }
      },
      "ResponseWrapperVoucherOptions": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/VoucherOptions"
          }
        }
      },
      "ResponseWrapperPurchaseOrderline": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PurchaseOrderline"
          }
        }
      },
      "ListResponseSupplier": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Supplier"
            }
          }
        }
      },
      "ListResponseDepartment": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Department"
            }
          }
        }
      },
      "ResponseWrapperDepartment": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Department"
          }
        }
      },
      "ResponseWrapperOrderOffer": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/OrderOffer"
          }
        }
      },
      "ListResponseAnnualAccount": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/AnnualAccount"
            }
          }
        }
      },
      "ProjectInvoiceDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "feeAmount": {
            "type": "number",
            "description": "Fee amount of the project. For example: 100 NOK.",
            "readOnly": true
          },
          "feeAmountCurrency": {
            "type": "number",
            "description": "Fee amount of the project in the invoice currency.",
            "readOnly": true
          },
          "markupPercent": {
            "type": "number",
            "description": "The percentage value of mark-up of amountFee. For example: 10%.",
            "readOnly": true
          },
          "markupAmount": {
            "type": "number",
            "description": "The amount value of mark-up of amountFee on the project invoice. For example: 10 NOK.",
            "readOnly": true
          },
          "markupAmountCurrency": {
            "type": "number",
            "description": "The amount value of mark-up of amountFee on the project invoice, in the invoice currency.",
            "readOnly": true
          },
          "amountOrderLinesAndReinvoicing": {
            "type": "number",
            "description": "The amount of chargeable manual order lines and vendor invoices on the project invoice.",
            "readOnly": true
          },
          "amountOrderLinesAndReinvoicingCurrency": {
            "type": "number",
            "description": "The amount of chargeable manual order lines and vendor invoices on the project invoice, in the invoice currency.",
            "readOnly": true
          },
          "amountTravelReportsAndExpenses": {
            "type": "number",
            "description": "The amount of travel costs and expenses on the project invoice.",
            "readOnly": true
          },
          "amountTravelReportsAndExpensesCurrency": {
            "type": "number",
            "description": "The amount of travel costs and expenses on the project invoice, in the invoice currency.",
            "readOnly": true
          },
          "feeInvoiceText": {
            "type": "string",
            "description": "The fee comment on the project invoice.",
            "readOnly": true
          },
          "invoiceText": {
            "type": "string",
            "description": "The comment on the project invoice.",
            "readOnly": true
          },
          "includeOrderLinesAndReinvoicing": {
            "type": "boolean",
            "description": "Determines if extra costs should be included on the project invoice.",
            "readOnly": true,
            "default": false
          },
          "includeHours": {
            "type": "boolean",
            "description": "Determines if hours should be included on the project invoice.",
            "readOnly": true,
            "default": false
          },
          "includeOnAccountBalance": {
            "type": "boolean",
            "description": "Determines if akonto should be included on the project invoice.",
            "readOnly": true,
            "default": false
          },
          "onAccountBalanceAmount": {
            "type": "number",
            "description": "The akonto amount on the project invoice.",
            "readOnly": true
          },
          "onAccountBalanceAmountCurrency": {
            "type": "number",
            "description": "The akonto amount on the project invoice in the invoice currency.",
            "readOnly": true
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "invoice": {
            "$ref": "#/components/schemas/Invoice"
          }
        }
      },
      "ListResponseProject": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          }
        }
      },
      "CompanyHoliday": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "days": {
            "type": "number"
          },
          "vacationPayPercentage1": {
            "type": "number"
          },
          "vacationPayPercentage2": {
            "type": "number"
          },
          "isMaxPercentage2Amount6G": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ResponseWrapperAppSpecific": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/AppSpecific"
          }
        }
      },
      "PersonAutoCompleteDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "alternateName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "postalArea": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "score": {
            "type": "integer",
            "format": "int32"
          },
          "sources": {
            "type": "array", "maxItems": 5,
            "items": {
              "type": "string",
              "enum": [
                "SEARCH1881",
                "TRIPLETEX",
                "NICKNAME",
                "EMPLOYEE",
                "CONTACT",
                "ACTIVITY",
                "PROJECT",
                "ORDER",
                "OFFER",
                "CUSTOMER",
                "COMPANY",
                "CONTROLSCHEMA",
                "HOUR",
                "TRAVELEXPENSE"
              ]
            }
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "phoneNumberMobile": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "countryId": {
            "type": "integer",
            "format": "int32"
          },
          "reserved": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "Posting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "voucher": {
            "$ref": "#/components/schemas/Voucher"
          },
          "date": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "supplier": {
            "$ref": "#/components/schemas/Supplier"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "amount": {
            "type": "number"
          },
          "amountCurrency": {
            "type": "number"
          },
          "amountGross": {
            "type": "number"
          },
          "amountGrossCurrency": {
            "type": "number"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "closeGroup": {
            "$ref": "#/components/schemas/CloseGroup"
          },
          "invoiceNumber": {
            "type": "string",
            "maxLength": 100
          },
          "termOfPayment": {
            "type": "string"
          },
          "row": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "systemGenerated": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          }
        }
      },
      "ResponseWrapperInventory": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Inventory"
          }
        }
      },
      "ListResponseSubscription": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          }
        }
      },
      "ResponseWrapperBankReconciliation": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/BankReconciliation"
          }
        }
      },
      "TimesheetSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "timeClock": {
            "type": "boolean",
            "default": false
          },
          "timesheetCompleted": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ResponseWrapperProject": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Project"
          }
        }
      },
      "BankTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "postedDate": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "amountCurrency": {
            "type": "number"
          },
          "bankStatement": {
            "$ref": "#/components/schemas/BankStatement"
          }
        }
      },
      "Employment": {
        "type": "object",
        "required": [
          "startDate"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "employmentId": {
            "type": "string",
            "description": "Existing employment ID used by the current accounting system",
            "maxLength": 255
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "division": {
            "$ref": "#/components/schemas/Division"
          },
          "lastSalaryChangeDate": {
            "type": "string"
          },
          "noEmploymentRelationship": {
            "type": "boolean",
            "description": "Activate pensions and other benefits with no employment relationship.",
            "default": false
          },
          "isMainEmployer": {
            "type": "boolean",
            "description": "Determines if company is main employer for the employee. Default value is true.<br />If true and deduction code is NOT send, value of tax deduction code will be set to loennFraHovedarbeidsgiver <br /> If false and deduction code is NOT send, value of tax deduction code will be set to loennFraBiarbeidsgiver.<br /> For other types of Tax Deduction Codes, isMainEmployer does not influence anything.",
            "default": false
          },
          "taxDeductionCode": {
            "type": "string",
            "description": "EMPTY - represents that a tax deduction code is not set on the employment. It is illegal to set the field to this value.  <br /> Default value of this field is loennFraHovedarbeidsgiver or loennFraBiarbeidsgiver depending on boolean isMainEmployer",
            "enum": [
              "loennFraHovedarbeidsgiver",
              "loennFraBiarbeidsgiver",
              "pensjon",
              "loennTilUtenrikstjenestemann",
              "loennKunTrygdeavgiftTilUtenlandskBorger",
              "loennKunTrygdeavgiftTilUtenlandskBorgerSomGrensegjenger",
              "introduksjonsstoenad",
              "ufoereytelserFraAndre",
              "EMPTY"
            ]
          },
          "employmentDetails": {
            "type": "array", "maxItems": 5,
            "description": "Employment types tied to the employment",
            "items": {
              "$ref": "#/components/schemas/EmploymentDetails"
            }
          }
        }
      },
      "ListResponseProjectOrderLine": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/ProjectOrderLine"
            }
          }
        }
      },
      "ListResponseLeaveOfAbsence": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/LeaveOfAbsence"
            }
          }
        }
      },
      "ListResponseTravelExpenseRateCategory": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/TravelExpenseRateCategory"
            }
          }
        }
      },
      "InternationalId": {
        "type": "object",
        "properties": {
          "intAmeldingType": {
            "type": "string",
            "description": "Define the employee's International Identificator.<br>PASSPORT_NO<br>NATIONAL_INSURANCE_NO<br>TAX_IDENTIFICATION_NO<br>VALUE_ADDED_TAX_IDENTIFICATION_NO",
            "enum": [
              "PASSPORT_NO",
              "NATIONAL_INSURANCE_NO",
              "TAX_IDENTIFICATION_NO",
              "VALUE_ADDED_TAX_IDENTIFICATION_NO"
            ]
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "number": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "ListResponseBankReconciliationPaymentType": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/BankReconciliationPaymentType"
            }
          }
        }
      },
      "ListResponseOrderLine": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/OrderLine"
            }
          }
        }
      },
      "ResponseWrapperVoucherType": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/VoucherType"
          }
        }
      },
      "ListResponseLeaveOfAbsenceType": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/LeaveOfAbsenceType"
            }
          }
        }
      },
      "ProjectOrderLine": {
        "type": "object",
        "required": [
          "date",
          "project"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "inventory": {
            "$ref": "#/components/schemas/Inventory"
          },
          "description": {
            "type": "string"
          },
          "count": {
            "type": "number",
            "format": "double"
          },
          "unitCostCurrency": {
            "type": "number",
            "description": "Unit price purchase (cost) excluding VAT in the order's currency"
          },
          "unitPriceExcludingVatCurrency": {
            "type": "number",
            "description": "Unit price of purchase excluding VAT in the order's currency"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "markup": {
            "type": "number",
            "format": "double",
            "description": "Markup given as a percentage (%)"
          },
          "discount": {
            "type": "number",
            "format": "double",
            "description": "Discount given as a percentage (%)"
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "amountExcludingVatCurrency": {
            "type": "number",
            "description": "Total amount on order line excluding VAT in the order's currency",
            "readOnly": true
          },
          "amountIncludingVatCurrency": {
            "type": "number",
            "description": "Total amount on order line including VAT in the order's currency",
            "readOnly": true
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "date": {
            "type": "string"
          },
          "isChargeable": {
            "type": "boolean",
            "default": false
          },
          "isBudget": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "invoice": {
            "$ref": "#/components/schemas/Invoice"
          }
        }
      },
      "MonthlyStatus": {
        "type": "object",
        "required": [
          "employee"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "date": {
            "type": "string"
          },
          "hoursPaid": {
            "type": "number",
            "format": "double"
          },
          "vacationTransferred": {
            "type": "number",
            "format": "double"
          },
          "vacationPaid": {
            "type": "number",
            "format": "double"
          },
          "wagePayment": {
            "$ref": "#/components/schemas/Payslip"
          },
          "completed": {
            "type": "boolean",
            "default": false
          },
          "approved": {
            "type": "boolean",
            "default": false
          },
          "approvedBy": {
            "$ref": "#/components/schemas/Employee"
          },
          "approvedDate": {
            "type": "string"
          }
        }
      },
      "ResponseWrapperSalesForceEmployee": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SalesForceEmployee"
          }
        }
      },
      "ResponseWrapperSalarySpecification": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SalarySpecification"
          }
        }
      },
      "ResponseWrapperProjectPeriodHourlyReport": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProjectPeriodHourlyReport"
          }
        }
      },
      "Entitlement": {
        "type": "object",
        "required": [
          "customer",
          "employee",
          "entitlementId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "name": {
            "type": "string",
            "description": "Descriptive name for the privilege. Might change between releases.",
            "readOnly": true
          },
          "entitlementId": {
            "type": "integer",
            "format": "int32",
            "description": "Unique id for the type of privilege."
          },
          "customer": {
            "$ref": "#/components/schemas/Company"
          }
        }
      },
      "ResponseWrapperVoucher": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Voucher"
          }
        }
      },
      "ResponseWrapperSalesForceAccountInfo": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SalesForceAccountInfo"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "addressLine1": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255
          },
          "addressLine2": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255
          },
          "postalCode": {
            "type": "string",
            "minLength": 0,
            "maxLength": 100
          },
          "city": {
            "type": "string",
            "minLength": 0,
            "maxLength": 100
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          }
        }
      },
      "ListResponseCompany": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Company"
            }
          }
        }
      },
      "BankReconciliationPaymentType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "readOnly": true,
            "maxLength": 255
          },
          "debitAccount": {
            "$ref": "#/components/schemas/Account"
          },
          "creditAccount": {
            "$ref": "#/components/schemas/Account"
          },
          "isInactive": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          }
        }
      },
      "ResponseWrapperProjectInvoiceDetails": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProjectInvoiceDetails"
          }
        }
      },
      "ResponseWrapperNextOfKin": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/NextOfKin"
          }
        }
      },
      "SalaryType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "number": {
            "type": "string",
            "maxLength": 10
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string"
          },
          "showInTimesheet": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          }
        }
      },
      "ResponseWrapperVatType": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/VatType"
          }
        }
      },
      "Stocktaking": {
        "type": "object",
        "required": [
          "date",
          "inventory",
          "typeOfStocktaking"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "date": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "typeOfStocktaking": {
            "type": "string",
            "description": "Define the type of stoctaking.<br>ALL_PRODUCTS_WITH_INVENTORIES: Create a stocktaking for all products with inventories.<br>INCLUDE_PRODUCTS: Create a stocktaking which includes all products.<br>NO_PRODUCTS: Create a stocktaking without products.<br>If not specified, the value 'ALL_PRODUCTS_WITH_INVENTORIES' is used.",
            "enum": [
              "ALL_PRODUCTS_WITH_INVENTORIES",
              "INCLUDE_PRODUCTS",
              "NO_PRODUCTS"
            ]
          },
          "inventory": {
            "$ref": "#/components/schemas/Inventory"
          },
          "isCompleted": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "CloseGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "date": {
            "type": "string"
          },
          "postings": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Posting"
            }
          }
        }
      },
      "ListResponsePaymentType": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/PaymentType"
            }
          }
        }
      },
      "ProjectSpecificRate": {
        "type": "object",
        "required": [
          "hourlyRate",
          "projectHourlyRate"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "hourlyRate": {
            "type": "number"
          },
          "hourlyCostPercentage": {
            "type": "number"
          },
          "projectHourlyRate": {
            "$ref": "#/components/schemas/ProjectHourlyRate"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "activity": {
            "$ref": "#/components/schemas/Activity"
          }
        }
      },
      "CurrencyExchangeRate": {
        "type": "object",
        "required": [
          "sourceCurrency",
          "targetCurrency"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "targetCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "sourceCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "rate": {
            "type": "number",
            "minimum": 0
          },
          "source": {
            "type": "string",
            "description": "Source of exchange rates, i.e Norges Bank",
            "enum": [
              "NORGES_BANK",
              "HALLONEN"
            ]
          },
          "date": {
            "type": "string"
          }
        }
      },
      "ResponseWrapperPaymentTypeOut": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PaymentTypeOut"
          }
        }
      },
      "ExternalProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "elNumber": {
            "type": "string",
            "maxLength": 14
          },
          "nrfNumber": {
            "type": "string",
            "maxLength": 14
          },
          "costExcludingVatCurrency": {
            "type": "number",
            "description": "Price purchase (cost) excluding VAT in the product's currency"
          },
          "priceExcludingVatCurrency": {
            "type": "number",
            "description": "Price of purchase excluding VAT in the product's currency"
          },
          "priceIncludingVatCurrency": {
            "type": "number",
            "description": "Price of purchase including VAT in the product's currency"
          },
          "isInactive": {
            "type": "boolean",
            "default": false
          },
          "productUnit": {
            "$ref": "#/components/schemas/ProductUnit"
          },
          "isStockItem": {
            "type": "boolean",
            "default": false
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "discountPrice": {
            "type": "number",
            "readOnly": true
          }
        }
      },
      "ResponseWrapperString": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "CustomerCategory": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "number": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "TriggerDTO": {
        "type": "object",
        "properties": {
          "calendarName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nextFireTime": {
            "type": "string",
            "format": "date-time"
          },
          "previousFireTime": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "NextOfKin": {
        "type": "object",
        "required": [
          "name",
          "phoneNumber"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 20
          },
          "address": {
            "type": "string",
            "maxLength": 255
          },
          "typeOfRelationship": {
            "type": "string",
            "description": "Define the employee's next of kin relationtype.<br>SPOUSE<br>PARTNER<br>PARENT<br>CHILD<br>SIBLING",
            "enum": [
              "SPOUSE",
              "PARTNER",
              "PARENT",
              "CHILD",
              "SIBLING"
            ]
          }
        }
      },
      "OrderOffer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "number": {
            "type": "string",
            "maxLength": 100
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "offerDate": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "ResponseWrapperTimeClock": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TimeClock"
          }
        }
      },
      "TimeClock": {
        "type": "object",
        "required": [
          "date",
          "employee",
          "timeStart"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "activity": {
            "$ref": "#/components/schemas/Activity"
          },
          "timesheetEntry": {
            "$ref": "#/components/schemas/TimesheetEntry"
          },
          "date": {
            "type": "string"
          },
          "timeStart": {
            "type": "string"
          },
          "timeStop": {
            "type": "string"
          },
          "hoursStart": {
            "type": "number",
            "format": "double",
            "minimum": 0
          }
        }
      },
      "ListResponseBankReconciliation": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/BankReconciliation"
            }
          }
        }
      },
      "ResponseWrapperCustomer": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "BankReconciliationMatch": {
        "type": "object",
        "required": [
          "bankReconciliation"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "bankReconciliation": {
            "$ref": "#/components/schemas/BankReconciliation"
          },
          "type": {
            "type": "string",
            "description": "Type of match, MANUAL and APPROVED_SUGGESTION are considered part of reconciliation.",
            "enum": [
              "MANUAL",
              "PENDING_SUGGESTION",
              "REJECTED_SUGGESTION",
              "APPROVED_SUGGESTION",
              "ADJUSTMENT",
              "AUTO_MATCHED",
              "REJECTED_AUTO_MATCH"
            ]
          },
          "transactions": {
            "type": "array", "maxItems": 5,
            "description": "Match transactions",
            "items": {
              "$ref": "#/components/schemas/BankTransaction"
            }
          },
          "postings": {
            "type": "array", "maxItems": 5,
            "description": "Match postings",
            "items": {
              "$ref": "#/components/schemas/Posting"
            }
          }
        }
      },
      "ListResponseOrderOffer": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/OrderOffer"
            }
          }
        }
      },
      "ListResponseTravelCostCategory": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/TravelCostCategory"
            }
          }
        }
      },
      "ResponseWrapperNotification": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Notification"
          }
        }
      },
      "FormDataContentDisposition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "fileName": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "readDate": {
            "type": "string",
            "format": "date-time"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SupplierBalance": {
        "type": "object",
        "properties": {
          "supplier": {
            "$ref": "#/components/schemas/Supplier"
          },
          "balanceIn": {
            "type": "number",
            "readOnly": true
          },
          "balanceChange": {
            "type": "number",
            "readOnly": true
          },
          "balanceOut": {
            "type": "number",
            "readOnly": true
          },
          "balanceInCurrencies": {
            "type": "array", "maxItems": 5,
            "description": "Currencies that have been used prior to this period, for the given filter",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Currency"
            }
          },
          "sumAmountNegative": {
            "type": "number",
            "readOnly": true
          }
        }
      },
      "LegacyAddress": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "addressLine1": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255
          },
          "addressLine2": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255
          },
          "postalCode": {
            "type": "string",
            "minLength": 0,
            "maxLength": 100
          },
          "city": {
            "type": "string",
            "minLength": 0,
            "maxLength": 100
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "name": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "CompanyAutoCompleteDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "alternateName": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "postalArea": {
            "type": "string"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "score": {
            "type": "integer",
            "format": "int32"
          },
          "sources": {
            "type": "array", "maxItems": 5,
            "items": {
              "type": "string",
              "enum": [
                "SEARCH1881",
                "TRIPLETEX",
                "NICKNAME",
                "EMPLOYEE",
                "CONTACT",
                "ACTIVITY",
                "PROJECT",
                "ORDER",
                "OFFER",
                "CUSTOMER",
                "COMPANY",
                "CONTROLSCHEMA",
                "HOUR",
                "TRAVELEXPENSE"
              ]
            }
          },
          "companyCode": {
            "type": "string"
          },
          "companyType": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumber": {
            "type": "string"
          },
          "phoneNumberMobile": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "countryId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ListResponseWorkingHoursScheme": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/WorkingHoursScheme"
            }
          }
        }
      },
      "ListResponseTravelExpenseRateCategoryGroup": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/TravelExpenseRateCategoryGroup"
            }
          }
        }
      },
      "LedgerAccount": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "sumAmount": {
            "type": "number",
            "readOnly": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "sumAmountCurrency": {
            "type": "number",
            "readOnly": true
          },
          "openingBalance": {
            "type": "number",
            "readOnly": true
          },
          "openingBalanceCurrency": {
            "type": "number",
            "readOnly": true
          },
          "closingBalance": {
            "type": "number",
            "readOnly": true
          },
          "closingBalanceCurrency": {
            "type": "number",
            "readOnly": true
          },
          "postings": {
            "type": "array", "maxItems": 5,
            "description": "Link to postings on this account.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Posting"
            }
          }
        }
      },
      "ResponseWrapperBankReconciliationPaymentType": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/BankReconciliationPaymentType"
          }
        }
      },
      "Division": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "organizationNumber": {
            "type": "string",
            "maxLength": 100
          },
          "municipality": {
            "$ref": "#/components/schemas/Municipality"
          }
        }
      },
      "Supplier": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "organizationNumber": {
            "type": "string",
            "maxLength": 100
          },
          "supplierNumber": {
            "type": "integer",
            "format": "int32"
          },
          "customerNumber": {
            "type": "integer",
            "format": "int32"
          },
          "isSupplier": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "isCustomer": {
            "type": "boolean",
            "description": "Determine if the supplier is also a customer",
            "default": false
          },
          "isInactive": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 0,
            "maxLength": 254
          },
          "bankAccounts": {
            "type": "array", "maxItems": 5,
            "description": "List of the bank account numbers for this supplier.  Norwegian bank account numbers only.",
            "items": {
              "type": "string"
            }
          },
          "invoiceEmail": {
            "type": "string",
            "format": "email",
            "minLength": 0,
            "maxLength": 254
          },
          "overdueNoticeEmail": {
            "type": "string",
            "format": "email",
            "description": "The email address of the customer where the noticing emails are sent in case of an overdue",
            "minLength": 0,
            "maxLength": 254
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 100
          },
          "phoneNumberMobile": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string"
          },
          "isPrivateIndividual": {
            "type": "boolean",
            "default": false
          },
          "showProducts": {
            "type": "boolean",
            "default": false
          },
          "accountManager": {
            "$ref": "#/components/schemas/Employee"
          },
          "postalAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "physicalAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/DeliveryAddress"
          },
          "category1": {
            "$ref": "#/components/schemas/CustomerCategory"
          },
          "category2": {
            "$ref": "#/components/schemas/CustomerCategory"
          },
          "category3": {
            "$ref": "#/components/schemas/CustomerCategory"
          }
        }
      },
      "ProjectParticipant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "adminAccess": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ListResponseExternalProduct": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/ExternalProduct"
            }
          }
        }
      },
      "ProjectPeriodHourlyReport": {
        "type": "object",
        "properties": {
          "chargeableHours": {
            "type": "number",
            "readOnly": true
          },
          "nonChargeableHours": {
            "type": "number",
            "readOnly": true
          },
          "approvedButUnchargedHours": {
            "type": "number",
            "readOnly": true
          },
          "nonApprovedHours": {
            "type": "number",
            "readOnly": true
          },
          "registeredHours": {
            "type": "number",
            "readOnly": true
          }
        }
      },
      "ListResponseOccupationCode": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/OccupationCode"
            }
          }
        }
      },
      "ResponseWrapperSalesModuleDTO": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SalesModuleDTO"
          }
        }
      },
      "SessionToken": {
        "type": "object",
        "required": [
          "expirationDate"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "consumerToken": {
            "$ref": "#/components/schemas/ConsumerToken"
          },
          "employeeToken": {
            "$ref": "#/components/schemas/EmployeeToken"
          },
          "expirationDate": {
            "type": "string"
          },
          "token": {
            "type": "string",
            "maxLength": 100
          },
          "encryptionKey": {
            "type": "string",
            "readOnly": true,
            "maxLength": 100
          }
        }
      },
      "Banner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "bannerType": {
            "type": "string",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "message": {
            "type": "string",
            "readOnly": true
          },
          "button": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "link": {
            "type": "string",
            "readOnly": true
          },
          "tag": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "done": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          }
        }
      },
      "ListResponseContact": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          }
        }
      },
      "ResponseWrapperTravelExpense": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TravelExpense"
          }
        }
      },
      "FormDataBodyPart": {
        "type": "object",
        "properties": {
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDisposition"
          },
          "entity": {
            "type": "object"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array", "maxItems": 5,
              "items": {
                "type": "string"
              }
            }
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "messageBodyWorkers": {
            "$ref": "#/components/schemas/MessageBodyWorkers"
          },
          "parent": {
            "$ref": "#/components/schemas/MultiPart"
          },
          "providers": {
            "$ref": "#/components/schemas/Providers"
          },
          "simple": {
            "type": "boolean",
            "default": false
          },
          "formDataContentDisposition": {
            "$ref": "#/components/schemas/FormDataContentDisposition"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "parameterizedHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "array", "maxItems": 5,
              "items": {
                "$ref": "#/components/schemas/ParameterizedHeader"
              }
            }
          }
        }
      },
      "PurchaseOrder": {
        "type": "object",
        "required": [
          "contact",
          "deliveryDate",
          "supplier"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "number": {
            "type": "string",
            "description": "Purchase order number",
            "readOnly": true,
            "maxLength": 100
          },
          "supplier": {
            "$ref": "#/components/schemas/Supplier"
          },
          "deliveryDate": {
            "type": "string"
          },
          "orderLines": {
            "type": "array", "maxItems": 5,
            "description": "Order lines tied to the purchase order",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderline"
            }
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "creationDate": {
            "type": "string"
          },
          "isClosed": {
            "type": "boolean",
            "default": false
          },
          "contact": {
            "$ref": "#/components/schemas/Employee"
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "STATUS_OPEN",
              "STATUS_SENT",
              "STATUS_CONFIRMED",
              "STATUS_RECEIVING"
            ]
          }
        }
      },
      "Prospect": {
        "type": "object",
        "required": [
          "createdDate"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string"
          },
          "createdDate": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "salesEmployee": {
            "$ref": "#/components/schemas/Employee"
          },
          "isClosed": {
            "type": "boolean",
            "default": false
          },
          "closedReason": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "closedDate": {
            "type": "string"
          },
          "competitor": {
            "type": "string",
            "maxLength": 255
          },
          "prospectType": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "projectOffer": {
            "$ref": "#/components/schemas/Project"
          },
          "finalIncomeDate": {
            "type": "string",
            "description": "The estimated start date for income on the prospect."
          },
          "finalInitialValue": {
            "type": "number",
            "description": "The estimated startup fee on this prospect."
          },
          "finalMonthlyValue": {
            "type": "number",
            "description": "The estimated monthly fee on this prospect."
          },
          "finalAdditionalServicesValue": {
            "type": "number",
            "description": "Tripletex specific."
          },
          "totalValue": {
            "type": "number",
            "description": "The estimated total fee on this prospect.",
            "readOnly": true
          }
        }
      },
      "BodyPart": {
        "type": "object",
        "properties": {
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDisposition"
          },
          "entity": {
            "type": "object"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array", "maxItems": 5,
              "items": {
                "type": "string"
              }
            }
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "messageBodyWorkers": {
            "$ref": "#/components/schemas/MessageBodyWorkers"
          },
          "parent": {
            "$ref": "#/components/schemas/MultiPart"
          },
          "providers": {
            "$ref": "#/components/schemas/Providers"
          },
          "parameterizedHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "array", "maxItems": 5,
              "items": {
                "$ref": "#/components/schemas/ParameterizedHeader"
              }
            }
          }
        }
      },
      "ResponseWrapperBoolean": {
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Inventories": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "stock": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Stock"
            }
          }
        }
      },
      "SalaryCompilationLine": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "readOnly": true
          },
          "amount": {
            "type": "number",
            "readOnly": true
          },
          "taxable": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "taxableDescription": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "TravelPaymentType": {
        "type": "object",
        "required": [
          "description"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "showOnTravelExpenses": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "showOnEmployeeExpenses": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "isInactive": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          }
        }
      },
      "OccupationCode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "nameNO": {
            "type": "string",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "maxLength": 7
          }
        }
      },
      "EmploymentType": {
        "type": "object",
        "required": [
          "employmentType"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employmentType": {
            "type": "string",
            "description": "Defines the employment type option. ",
            "enum": [
              "ORDINARY",
              "MARITIME",
              "FREELANCE"
            ]
          },
          "nameNO": {
            "type": "string",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "ResponseWrapperPerDiemCompensation": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PerDiemCompensation"
          }
        }
      },
      "TripletexAccount2": {
        "type": "object",
        "required": [
          "accountType",
          "administratorPassword",
          "company",
          "modules",
          "numberOfVouchers"
        ],
        "properties": {
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "administrator": {
            "$ref": "#/components/schemas/Employee"
          },
          "accountType": {
            "type": "string",
            "description": "Is this a test account or a paying account?",
            "enum": [
              "TEST",
              "PAYING"
            ]
          },
          "modules": {
            "type": "array", "maxItems": 5,
            "description": "Sales modules (functionality in the application) to activate for the newly created account. Some modules have extra costs.",
            "items": {
              "$ref": "#/components/schemas/SalesModuleDTO"
            }
          },
          "administratorPassword": {
            "type": "string",
            "description": "Password for the administrator user to create. Not a part of the administrator employee object since this is a value that never can be read (it is salted and hashed before storing)"
          },
          "sendEmails": {
            "type": "boolean",
            "description": "Should the regular creation emails be sent to the company created and its users? If false you probably want to set autoValidateUserLogin to true",
            "default": false
          },
          "autoValidateUserLogin": {
            "type": "boolean",
            "description": "If true, the users created will be allowed to log in without validating their email address. ONLY USE THIS IF YOU ALREADY HAVE VALIDATED THE USER EMAILS.",
            "default": false
          },
          "createAdministratorApiToken": {
            "type": "boolean",
            "description": "Create an API token for the administrator user for the consumer token used during this call. The token will be returned in the response.",
            "default": false
          },
          "createCompanyOwnedApiToken": {
            "type": "boolean",
            "description": "Create an API token for the company to use to call their clients, only possible for accounting and auditor accounts. The token will be returned in the response.",
            "default": false
          },
          "mayCreateTripletexAccounts": {
            "type": "boolean",
            "description": "Should the company we are creating be able to create new Tripletex accounts?",
            "default": false
          },
          "numberOfVouchers": {
            "type": "string",
            "description": "Used to calculate prices.",
            "enum": [
              "INTERVAL_0_100",
              "INTERVAL_101_500",
              "INTERVAL_0_500",
              "INTERVAL_501_1000",
              "INTERVAL_1001_2000",
              "INTERVAL_2001_3500",
              "INTERVAL_3501_5000",
              "INTERVAL_5001_10000",
              "INTERVAL_UNLIMITED"
            ]
          },
          "chartOfAccountsType": {
            "type": "string",
            "description": "The chart of accounts to use for the new company",
            "enum": [
              "DEFAULT",
              "MAMUT_STD_PAYROLL",
              "MAMUT_NARF_PAYROLL",
              "AGRO_FORRETNING_PAYROLL",
              "AGRO_LANDBRUK_PAYROLL",
              "AGRO_FISKE_PAYROLL",
              "AGRO_FORSOKSRING_PAYROLL",
              "AGRO_IDRETTSLAG_PAYROLL",
              "AGRO_FORENING_PAYROLL"
            ]
          },
          "auditor": {
            "type": "boolean",
            "default": false
          },
          "reseller": {
            "type": "boolean",
            "default": false
          },
          "accountingOffice": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "StandardTime": {
        "type": "object",
        "required": [
          "fromDate",
          "hoursPerDay"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "fromDate": {
            "type": "string"
          },
          "hoursPerDay": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ListResponseNotification": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          }
        }
      },
      "ResponseWrapperInvoice": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Invoice"
          }
        }
      },
      "VoucherSearchResponse": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Voucher"
            }
          },
          "totalNumberOfPostings": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Number of postings returned (if postings are returned)"
          }
        }
      },
      "EventInfoDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "payloadModel": {
            "type": "string"
          },
          "examples": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/WebHookWrapper"
            }
          }
        }
      },
      "ResponseWrapperApiConsumer": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ApiConsumer"
          }
        }
      },
      "ResponseWrapperAccount": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Account"
          }
        }
      },
      "ResponseWrapperSalaryTransaction": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SalaryTransaction"
          }
        }
      },
      "ResponseWrapperDashboardDTO": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/DashboardDTO"
          }
        }
      },
      "Payslip": {
        "type": "object",
        "required": [
          "employee"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "transaction": {
            "$ref": "#/components/schemas/SalaryTransaction"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "date": {
            "type": "string",
            "description": "Voucher date."
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "specifications": {
            "type": "array", "maxItems": 5,
            "description": "Link to salary specifications.",
            "items": {
              "$ref": "#/components/schemas/SalarySpecification"
            }
          },
          "vacationAllowanceAmount": {
            "type": "number",
            "readOnly": true
          },
          "grossAmount": {
            "type": "number",
            "readOnly": true
          },
          "amount": {
            "type": "number",
            "readOnly": true
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "minimum": 0
          }
        }
      },
      "MaventaEventDataDTO": {
        "type": "object",
        "required": [
          "destination",
          "invoice_id",
          "invoice_number",
          "recipient_bid",
          "recipient_name"
        ],
        "properties": {
          "invoice_id": {
            "type": "string",
            "readOnly": true
          },
          "invoice_number": {
            "type": "string",
            "readOnly": true
          },
          "destination": {
            "type": "string",
            "readOnly": true
          },
          "recipient_name": {
            "type": "string",
            "readOnly": true
          },
          "recipient_bid": {
            "type": "string",
            "readOnly": true
          },
          "error_message": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ResponseWrapperProductLine": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProductLine"
          }
        }
      },
      "ListResponseProductUnit": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/ProductUnit"
            }
          }
        }
      },
      "UnreadCountDTO": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "readCursor": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DocumentArchive": {
        "type": "object",
        "required": [
          "fileName",
          "mimeType"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "fileName": {
            "type": "string",
            "description": "The name of the document.",
            "maxLength": 255
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "The size of the document in readable format.",
            "readOnly": true,
            "minimum": 0
          },
          "archiveDate": {
            "type": "string"
          },
          "mimeType": {
            "type": "string",
            "description": "Type of the document",
            "maxLength": 100
          }
        }
      },
      "SalesForceEmployeeRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "employeeId": {
            "type": "integer",
            "format": "int32"
          },
          "roleId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "tripletexCustomerId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TravelExpenseSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "useRates": {
            "type": "boolean",
            "default": false
          },
          "approvalRequired": {
            "type": "boolean",
            "default": false
          },
          "taxFreePerDiemRates": {
            "type": "boolean",
            "default": false
          },
          "taxFreeMileageRates": {
            "type": "boolean",
            "default": false
          },
          "perDiemNotCompensated": {
            "type": "boolean",
            "default": false
          },
          "accommodationNotCompensated": {
            "type": "boolean",
            "default": false
          },
          "mileageNotCompensated": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ListResponseTravelExpense": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/TravelExpense"
            }
          }
        }
      },
      "ResponseWrapperSalaryCompilation": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SalaryCompilation"
          }
        }
      },
      "ListResponseSupplierBalance": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/SupplierBalance"
            }
          }
        }
      },
      "TravelExpenseRateCategory": {
        "type": "object",
        "required": [
          "fromDate",
          "toDate"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "ameldingWageCode": {
            "type": "integer",
            "format": "int32"
          },
          "wageCodeNumber": {
            "type": "string",
            "maxLength": 10
          },
          "isValidDayTrip": {
            "type": "boolean",
            "default": false
          },
          "isValidAccommodation": {
            "type": "boolean",
            "default": false
          },
          "isValidDomestic": {
            "type": "boolean",
            "default": false
          },
          "isValidForeignTravel": {
            "type": "boolean",
            "default": false
          },
          "isRequiresZone": {
            "type": "boolean",
            "default": false
          },
          "isRequiresOvernightAccommodation": {
            "type": "boolean",
            "default": false
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PER_DIEM",
              "ACCOMMODATION_ALLOWANCE",
              "MILEAGE_ALLOWANCE"
            ]
          }
        }
      },
      "EmployeeToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "apiConsumer": {
            "$ref": "#/components/schemas/ApiConsumer"
          },
          "token": {
            "type": "string",
            "maxLength": 100
          },
          "expirationDate": {
            "type": "string"
          }
        }
      },
      "ResponseWrapperTravelExpenseSettings": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TravelExpenseSettings"
          }
        }
      },
      "ResponseWrapperPosting": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Posting"
          }
        }
      },
      "PaymentType": {
        "type": "object",
        "required": [
          "description"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "debitAccount": {
            "$ref": "#/components/schemas/Account"
          },
          "creditAccount": {
            "$ref": "#/components/schemas/Account"
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "supplier": {
            "$ref": "#/components/schemas/Supplier"
          }
        }
      },
      "ListResponseRemunerationType": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/RemunerationType"
            }
          }
        }
      },
      "ResponseWrapperSessionToken": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SessionToken"
          }
        }
      },
      "ResponseWrapperProjectActivity": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProjectActivity"
          }
        }
      },
      "HourlyCostAndRate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "date": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          },
          "budgetRate": {
            "type": "number"
          },
          "hourCostRate": {
            "type": "number"
          }
        }
      },
      "ListResponseDocumentArchive": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/DocumentArchive"
            }
          }
        }
      },
      "ListResponseCustomer": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        }
      },
      "ResponseWrapperTripletexAccountReturn": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TripletexAccountReturn"
          }
        }
      },
      "ListResponseEmployeeCompanyDTO": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/EmployeeCompanyDTO"
            }
          }
        }
      },
      "ResponseWrapperProjectSpecificRate": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProjectSpecificRate"
          }
        }
      },
      "ListResponseHourlyCostAndRate": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/HourlyCostAndRate"
            }
          }
        }
      },
      "ResponseWrapperCustomerCategory": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/CustomerCategory"
          }
        }
      },
      "ResponseWrapperProjectParticipant": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProjectParticipant"
          }
        }
      },
      "ListResponseTravelPaymentType": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/TravelPaymentType"
            }
          }
        }
      },
      "ResponseWrapperWeek": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Week"
          }
        }
      },
      "ResponseWrapperExternalProduct": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ExternalProduct"
          }
        }
      },
      "Activity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "number": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string"
          },
          "activityType": {
            "type": "string",
            "description": "PROJECT_SPECIFIC_ACTIVITY are made via project/projectactivity, as they must be part of a project.",
            "enum": [
              "GENERAL_ACTIVITY",
              "PROJECT_GENERAL_ACTIVITY",
              "PROJECT_SPECIFIC_ACTIVITY",
              "TASK"
            ]
          },
          "isProjectActivity": {
            "type": "boolean",
            "description": "Manipulate these with ActivityType",
            "readOnly": true,
            "default": false
          },
          "isGeneral": {
            "type": "boolean",
            "description": "Manipulate these with ActivityType",
            "readOnly": true,
            "default": false
          },
          "isTask": {
            "type": "boolean",
            "description": "Manipulate these with ActivityType",
            "readOnly": true,
            "default": false
          },
          "isChargeable": {
            "type": "boolean",
            "default": false
          },
          "rate": {
            "type": "number"
          }
        }
      },
      "ListResponseNextOfKin": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/NextOfKin"
            }
          }
        }
      },
      "Document": {
        "type": "object",
        "required": [
          "fileName"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "fileName": {
            "type": "string",
            "description": "The name of the document.",
            "maxLength": 255
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "The size of the document in bytes.",
            "readOnly": true,
            "minimum": 0
          },
          "mimeType": {
            "type": "string",
            "example": "type/subtype of resource. E.g. application/pdf",
            "description": "Type of the document",
            "readOnly": true,
            "maxLength": 100
          }
        }
      },
      "ResponseWrapperEventInfoDTO": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/EventInfoDTO"
          }
        }
      },
      "ResponseWrapperMonthlyStatus": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/MonthlyStatus"
          }
        }
      },
      "Department": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "departmentNumber": {
            "type": "string",
            "minLength": 0,
            "maxLength": 100
          },
          "departmentManager": {
            "$ref": "#/components/schemas/Employee"
          }
        }
      },
      "ProjectPeriodInvoicingReserve": {
        "type": "object",
        "properties": {
          "invoiceFeeReserveCurrency": {
            "type": "number",
            "readOnly": true
          },
          "periodOrderLinesIncomeCurrency": {
            "type": "number",
            "readOnly": true
          },
          "invoiceExtracostsReserveCurrency": {
            "type": "number",
            "readOnly": true
          },
          "invoiceAkontoReserveAmountCurrency": {
            "type": "number",
            "readOnly": true
          },
          "invoiceReserveTotalAmountCurrency": {
            "type": "number",
            "readOnly": true
          }
        }
      },
      "ListResponseSalarySpecification": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/SalarySpecification"
            }
          }
        }
      },
      "ListResponseGoodsReceipt": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/GoodsReceipt"
            }
          }
        }
      },
      "Currency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "code": {
            "type": "string",
            "maxLength": 10
          },
          "description": {
            "type": "string",
            "maxLength": 100
          },
          "factor": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          }
        }
      },
      "ResponseWrapperProjectHourlyRate": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProjectHourlyRate"
          }
        }
      },
      "ListResponseBankStatement": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/BankStatement"
            }
          }
        }
      },
      "MediaType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "subtype": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "wildcardType": {
            "type": "boolean",
            "default": false
          },
          "wildcardSubtype": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ListResponseEmployee": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Employee"
            }
          }
        }
      },
      "ListResponseStandardTime": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/StandardTime"
            }
          }
        }
      },
      "ListResponseBank": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Bank"
            }
          }
        }
      },
      "ResponseWrapperCost": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Cost"
          }
        }
      },
      "AccountingPeriod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "minimum": 0,
            "maximum": 11
          },
          "start": {
            "type": "string",
            "readOnly": true
          },
          "end": {
            "type": "string",
            "readOnly": true
          },
          "isClosed": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          }
        }
      },
      "ProjectHourlyRate": {
        "type": "object",
        "required": [
          "hourlyRateModel",
          "startDate"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "startDate": {
            "type": "string"
          },
          "showInProjectOrder": {
            "type": "boolean",
            "description": "Show on contract confirmation/offers",
            "default": false
          },
          "hourlyRateModel": {
            "type": "string",
            "description": "Defines the model used for the hourly rate.",
            "enum": [
              "TYPE_PREDEFINED_HOURLY_RATES",
              "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
              "TYPE_FIXED_HOURLY_RATE"
            ]
          },
          "projectSpecificRates": {
            "type": "array", "maxItems": 5,
            "description": "Project specific rates if hourlyRateModel is TYPE_PROJECT_SPECIFIC_HOURLY_RATES. ",
            "items": {
              "$ref": "#/components/schemas/ProjectSpecificRate"
            }
          },
          "fixedRate": {
            "type": "number",
            "description": "Fixed Hourly rates if hourlyRateModel is TYPE_FIXED_HOURLY_RATE."
          }
        }
      },
      "ResponseWrapperProjectPeriodInvoicingReserve": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProjectPeriodInvoicingReserve"
          }
        }
      },
      "Project": {
        "type": "object",
        "required": [
          "isInternal",
          "name",
          "projectManager",
          "startDate"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "number": {
            "type": "string",
            "maxLength": 100
          },
          "displayName": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string"
          },
          "projectManager": {
            "$ref": "#/components/schemas/Employee"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "mainProject": {
            "$ref": "#/components/schemas/Project"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "isClosed": {
            "type": "boolean",
            "default": false
          },
          "isReadyForInvoicing": {
            "type": "boolean",
            "default": false
          },
          "isInternal": {
            "type": "boolean",
            "default": false
          },
          "isOffer": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "isFixedPrice": {
            "type": "boolean",
            "description": "Project is fixed price if set to true, hourly rate if set to false.",
            "default": false
          },
          "projectCategory": {
            "$ref": "#/components/schemas/ProjectCategory"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/DeliveryAddress"
          },
          "displayNameFormat": {
            "type": "string",
            "description": "Defines project name presentation in overviews.",
            "enum": [
              "NAME_STANDARD",
              "NAME_INCL_CUSTOMER_NAME",
              "NAME_INCL_PARENT_NAME",
              "NAME_INCL_PARENT_NUMBER",
              "NAME_INCL_PARENT_NAME_AND_NUMBER"
            ]
          },
          "externalAccountsNumber": {
            "type": "string",
            "maxLength": 100
          },
          "discountPercentage": {
            "type": "number",
            "description": "Project discount percentage.",
            "readOnly": true
          },
          "extraPercentOrderLines": {
            "type": "number",
            "description": "Project markup percentage.",
            "readOnly": true
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "fixedprice": {
            "type": "number",
            "description": "Fixed price amount, in the project's currency."
          },
          "contributionMarginPercent": {
            "type": "number",
            "readOnly": true
          },
          "numberOfSubProjects": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "numberOfProjectParticipants": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "orderLines": {
            "type": "array", "maxItems": 5,
            "description": "Order lines tied to the order",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/ProjectOrderLine"
            }
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "markUpOrderLines": {
            "type": "number",
            "description": "Set mark-up (%) for order lines."
          },
          "markUpFeesEarned": {
            "type": "number",
            "description": "Set mark-up (%) for fees earned."
          },
          "isPriceCeiling": {
            "type": "boolean",
            "description": "Set to true if an hourly rate project has a price ceiling.",
            "default": false
          },
          "priceCeilingAmount": {
            "type": "number",
            "description": "Price ceiling amount, in the project's currency."
          },
          "projectHourlyRates": {
            "type": "array", "maxItems": 5,
            "description": "Project Rate Types tied to the project.",
            "items": {
              "$ref": "#/components/schemas/ProjectHourlyRate"
            }
          },
          "forParticipantsOnly": {
            "type": "boolean",
            "description": "Set to true if only project participants can register information on the project",
            "default": false
          },
          "participants": {
            "type": "array", "maxItems": 5,
            "description": "Link to individual project participants.",
            "items": {
              "$ref": "#/components/schemas/ProjectParticipant"
            }
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "invoicingPlan": {
            "type": "array", "maxItems": 5,
            "description": "Invoicing plans tied to the project",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          },
          "preliminaryInvoice": {
            "$ref": "#/components/schemas/Invoice"
          },
          "generalProjectActivitiesPerProjectOnly": {
            "type": "boolean",
            "description": "Set to true if a general project activity must be linked to project to allow time tracking.",
            "default": false
          },
          "projectActivities": {
            "type": "array", "maxItems": 5,
            "description": "Project Activities",
            "items": {
              "$ref": "#/components/schemas/ProjectActivity"
            }
          }
        }
      },
      "ListResponseAccountingPeriod": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/AccountingPeriod"
            }
          }
        }
      },
      "ResponseWrapperProjectCategory": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProjectCategory"
          }
        }
      },
      "LoggedInUserInfoDTO": {
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "integer",
            "format": "int32"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "companyId": {
            "type": "integer",
            "format": "int32"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "language": {
            "type": "string"
          }
        }
      },
      "TripletexAccountReturn": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "administrator": {
            "$ref": "#/components/schemas/Employee"
          },
          "administratorApiToken": {
            "$ref": "#/components/schemas/EmployeeToken"
          },
          "companyOwnedApiToken": {
            "$ref": "#/components/schemas/EmployeeToken"
          },
          "companyOwnedApiTokenRobotId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Inventory": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "number": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "isMainInventory": {
            "type": "boolean",
            "default": false
          },
          "isInactive": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "Stock": {
        "type": "object",
        "properties": {
          "inventory": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "openingStock": {
            "type": "number",
            "readOnly": true
          },
          "changesInPeriod": {
            "type": "number",
            "readOnly": true
          },
          "closingStock": {
            "type": "number",
            "readOnly": true
          }
        }
      },
      "ListResponsePosting": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Posting"
            }
          }
        }
      },
      "ParameterizedHeader": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Bank": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Bank name",
            "readOnly": true,
            "maxLength": 255
          },
          "bankStatementFileFormatSupport": {
            "type": "array", "maxItems": 5,
            "description": "Bank statement file formats supported.",
            "readOnly": true,
            "items": {
              "type": "string",
              "enum": [
                "DNB_CSV",
                "EIKA_TELEPAY",
                "SPAREBANK1_TELEPAY",
                "VISMA_ACCOUNT_STATEMENT",
                "HANDELSBANKEN_TELEPAY",
                "SPAREBANKEN_VEST_TELEPAY",
                "NORDEA_CSV",
                "TRANSFERWISE",
                "SPAREBANKEN_SOR_TELEPAY",
                "DANSKE_BANK_CSV"
              ]
            }
          },
          "registerNumbers": {
            "type": "array", "maxItems": 5,
            "description": "Register numbers belonging to bank.",
            "readOnly": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "BankStatement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "openingBalanceCurrency": {
            "type": "number",
            "description": "Opening balance on the account.",
            "readOnly": true
          },
          "closingBalanceCurrency": {
            "type": "number",
            "description": "Closing balance on the account.",
            "readOnly": true
          },
          "fileName": {
            "type": "string",
            "description": "Bank statement file name.",
            "readOnly": true
          },
          "bank": {
            "$ref": "#/components/schemas/Bank"
          },
          "fromDate": {
            "type": "string",
            "readOnly": true
          },
          "toDate": {
            "type": "string",
            "readOnly": true
          },
          "transactions": {
            "type": "array", "maxItems": 5,
            "description": "Bank transactions tied to the bank statement",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/BankTransaction"
            }
          }
        }
      },
      "SalesForceAddressDTO": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/SalesForceCountryDTO"
          }
        }
      },
      "ResponseWrapperProductUnit": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProductUnit"
          }
        }
      },
      "AutoLoginPayloadDTO": {
        "type": "object",
        "properties": {
          "redirectPath": {
            "type": "string"
          }
        }
      },
      "DeliveryAddress": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "addressLine1": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255
          },
          "addressLine2": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255
          },
          "postalCode": {
            "type": "string",
            "minLength": 0,
            "maxLength": 100
          },
          "city": {
            "type": "string",
            "minLength": 0,
            "maxLength": 100
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "name": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "ResponseWrapperTravelExpenseRateCategoryGroup": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TravelExpenseRateCategoryGroup"
          }
        }
      },
      "ResponseWrapperBankReconciliationMatch": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/BankReconciliationMatch"
          }
        }
      },
      "Providers": {
        "type": "object"
      },
      "ApiValidationMessage": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "rootId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ListResponseReminder": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Reminder"
            }
          }
        }
      },
      "ResponseWrapperSalarySettings": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SalarySettings"
          }
        }
      },
      "FormDataMultiPart": {
        "type": "object",
        "properties": {
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDisposition"
          },
          "entity": {
            "type": "object"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array", "maxItems": 5,
              "items": {
                "type": "string"
              }
            }
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "messageBodyWorkers": {
            "$ref": "#/components/schemas/MessageBodyWorkers"
          },
          "parent": {
            "$ref": "#/components/schemas/MultiPart"
          },
          "providers": {
            "$ref": "#/components/schemas/Providers"
          },
          "bodyParts": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/BodyPart"
            }
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "type": "array", "maxItems": 5,
              "items": {
                "$ref": "#/components/schemas/FormDataBodyPart"
              }
            }
          },
          "parameterizedHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "array", "maxItems": 5,
              "items": {
                "$ref": "#/components/schemas/ParameterizedHeader"
              }
            }
          }
        }
      },
      "ListResponseProjectSpecificRate": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/ProjectSpecificRate"
            }
          }
        }
      },
      "MaritimeEmployment": {
        "type": "object",
        "properties": {
          "shipRegister": {
            "type": "string",
            "description": "Define the ship register. NIS: Norwegian International Ship Register, NOR: Norwegian Ordinary Ship Register, FOREIGN: Foreign Ship Register. ",
            "enum": [
              "NIS",
              "NOR",
              "FOREIGN"
            ]
          },
          "shipType": {
            "type": "string",
            "description": "Define the ship type.",
            "enum": [
              "OTHER",
              "DRILLING_PLATFORM",
              "TOURIST"
            ]
          },
          "tradeArea": {
            "type": "string",
            "description": "Define the trade area.",
            "enum": [
              "DOMESTIC",
              "FOREIGN"
            ]
          }
        }
      },
      "ResponseWrapperAnnualAccount": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/AnnualAccount"
          }
        }
      },
      "ResponseWrapperTripDTO": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TripDTO"
          }
        }
      },
      "ListResponseEmploymentType": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/EmploymentType"
            }
          }
        }
      },
      "ConsumerToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "apiConsumer": {
            "$ref": "#/components/schemas/ApiConsumer"
          },
          "token": {
            "type": "string",
            "maxLength": 100
          },
          "expirationDate": {
            "type": "string"
          }
        }
      },
      "ResponseWrapperTimesheetEntry": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TimesheetEntry"
          }
        }
      },
      "ResponseWrapperSalesForceEmployeeRole": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SalesForceEmployeeRole"
          }
        }
      },
      "BankReconciliationAdjustment": {
        "type": "object",
        "required": [
          "paymentType"
        ],
        "properties": {
          "paymentType": {
            "$ref": "#/components/schemas/BankReconciliationPaymentType"
          },
          "bankTransactions": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/BankTransaction"
            }
          },
          "postingDate": {
            "type": "string"
          },
          "amount": {
            "type": "number",
            "minimum": 0
          },
          "postings": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Posting"
            }
          },
          "bankReconciliationMatch": {
            "$ref": "#/components/schemas/BankReconciliationMatch"
          }
        }
      },
      "ResponseWrapperLoggedInUserInfoDTO": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/LoggedInUserInfoDTO"
          }
        }
      },
      "Credentials": {
        "type": "object",
        "required": [
          "appSecret",
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Users username (email)"
          },
          "password": {
            "type": "string",
            "description": "Users password"
          },
          "appSecret": {
            "type": "string",
            "description": "App secret"
          },
          "mfaCode": {
            "type": "integer",
            "format": "int32",
            "description": "Optional mfa auth code"
          }
        }
      },
      "RestrictedEntitlementChangeDTO": {
        "type": "object",
        "properties": {
          "change": {
            "type": "string"
          },
          "customerId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmploymentDetails": {
        "type": "object",
        "required": [
          "percentageOfFullTimeEquivalent"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employment": {
            "$ref": "#/components/schemas/Employment"
          },
          "date": {
            "type": "string"
          },
          "employmentType": {
            "type": "string",
            "description": "Define the employment type.",
            "enum": [
              "ORDINARY",
              "MARITIME",
              "FREELANCE"
            ]
          },
          "maritimeEmployment": {
            "$ref": "#/components/schemas/MaritimeEmployment"
          },
          "remunerationType": {
            "type": "string",
            "description": "Define the remuneration type.",
            "enum": [
              "MONTHLY_WAGE",
              "HOURLY_WAGE",
              "COMMISION_PERCENTAGE",
              "FEE",
              "PIECEWORK_WAGE"
            ]
          },
          "workingHoursScheme": {
            "type": "string",
            "description": "Define the working hours scheme type. If you enter a value for SHIFT WORK, you must also enter value for shiftDurationHours",
            "enum": [
              "NOT_SHIFT",
              "ROUND_THE_CLOCK",
              "SHIFT_365",
              "OFFSHORE_336",
              "CONTINUOUS",
              "OTHER_SHIFT"
            ]
          },
          "shiftDurationHours": {
            "type": "number",
            "format": "double"
          },
          "occupationCode": {
            "$ref": "#/components/schemas/OccupationCode"
          },
          "percentageOfFullTimeEquivalent": {
            "type": "number",
            "format": "double"
          },
          "annualSalary": {
            "type": "number",
            "format": "double"
          },
          "hourlyWage": {
            "type": "number",
            "format": "double"
          },
          "payrollTaxMunicipalityId": {
            "$ref": "#/components/schemas/Municipality"
          }
        }
      },
      "ListResponseBankTransaction": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/BankTransaction"
            }
          }
        }
      },
      "ListResponseInvoice": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          }
        }
      },
      "AppSpecific": {
        "type": "object",
        "properties": {
          "hourRegistrationEnabled": {
            "type": "boolean",
            "default": false
          },
          "projectEnabled": {
            "type": "boolean",
            "default": false
          },
          "userIsAllowedToRegisterHours": {
            "type": "boolean",
            "default": false
          },
          "payrollAccountingEnabled": {
            "type": "boolean",
            "default": false
          },
          "userIsAuthWageMenu": {
            "type": "boolean",
            "default": false
          },
          "userIsAuthMySalary": {
            "type": "boolean",
            "default": false
          },
          "electronicVouchersEnabled": {
            "type": "boolean",
            "default": false
          },
          "travelExpenseEnabled": {
            "type": "boolean",
            "default": false
          },
          "documentArchiveEnabled": {
            "type": "boolean",
            "default": false
          },
          "archiveReceptionEnabled": {
            "type": "boolean",
            "default": false
          },
          "userIsPayslipOnly": {
            "type": "boolean",
            "default": false
          },
          "travelExpenseRatesEnabled": {
            "type": "boolean",
            "default": false
          },
          "taxFreeMileageRatesEnabled": {
            "type": "boolean",
            "default": false
          },
          "approveTravelExpenseEnabled": {
            "type": "boolean",
            "default": false
          },
          "userIsAuthProjectInfo": {
            "type": "boolean",
            "default": false
          },
          "userIsAuthTravelAndExpenseApprove": {
            "type": "boolean",
            "default": false
          },
          "userIsAuthEmployeeInfo": {
            "type": "boolean",
            "default": false
          },
          "userIsAuthVoucherApprove": {
            "type": "boolean",
            "default": false
          },
          "userIsAuthRemitApprove": {
            "type": "boolean",
            "default": false
          },
          "vatOnForCompany": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ListResponseProduct": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "MaventaStatusDTO": {
        "type": "object",
        "required": [
          "company_id",
          "event",
          "event_data",
          "event_timestamp"
        ],
        "properties": {
          "event": {
            "type": "string",
            "readOnly": true
          },
          "company_id": {
            "type": "string",
            "readOnly": true
          },
          "event_timestamp": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "event_data": {
            "$ref": "#/components/schemas/MaventaEventDataDTO"
          }
        }
      },
      "ResponseWrapperModules": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Modules"
          }
        }
      },
      "ResponseWrapperProduct": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Product"
          }
        }
      },
      "MileageAllowance": {
        "type": "object",
        "required": [
          "date",
          "departureLocation",
          "destination"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "travelExpense": {
            "$ref": "#/components/schemas/TravelExpense"
          },
          "rateType": {
            "$ref": "#/components/schemas/TravelExpenseRate"
          },
          "rateCategory": {
            "$ref": "#/components/schemas/TravelExpenseRateCategory"
          },
          "date": {
            "type": "string"
          },
          "departureLocation": {
            "type": "string"
          },
          "destination": {
            "type": "string"
          },
          "km": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          },
          "isCompanyCar": {
            "type": "boolean",
            "default": false
          },
          "passengers": {
            "type": "array", "maxItems": 5,
            "description": "Link to individual passengers.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Passenger"
            }
          }
        }
      },
      "AccommodationAllowance": {
        "type": "object",
        "required": [
          "location"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "travelExpense": {
            "$ref": "#/components/schemas/TravelExpense"
          },
          "rateType": {
            "$ref": "#/components/schemas/TravelExpenseRate"
          },
          "rateCategory": {
            "$ref": "#/components/schemas/TravelExpenseRateCategory"
          },
          "zone": {
            "type": "string"
          },
          "location": {
            "type": "string",
            "maxLength": 255
          },
          "address": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "rate": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          }
        }
      },
      "ListResponseEmployment": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Employment"
            }
          }
        }
      },
      "ListResponsePurchaseOrder": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/PurchaseOrder"
            }
          }
        }
      },
      "ListResponseTask": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          }
        }
      },
      "ResponseWrapperEmployment": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Employment"
          }
        }
      },
      "ResponseWrapperListJob": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Job"
            }
          }
        }
      },
      "ListResponseCountry": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Country"
            }
          }
        }
      },
      "SalarySettings": {
        "type": "object",
        "required": [
          "payrollTaxCalcMethod"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "municipality": {
            "$ref": "#/components/schemas/Municipality"
          },
          "payrollTaxCalcMethod": {
            "type": "string",
            "description": "Define the Payroll Tax Calculation Method. AA General industries,BB Central government administration and health trusts, CC Exempted business sectors (and undertakings in economic difficulty),DD Agriculture and forestry, fisheries etc., EE Reporting of payroll withholding tax only,GG Road freight transport",
            "enum": [
              "AA",
              "BB",
              "CC",
              "DD",
              "EE",
              "GG",
              "JJ",
              "EMPTY"
            ]
          }
        }
      },
      "ResponseWrapperDeliveryAddress": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/DeliveryAddress"
          }
        }
      },
      "VoucherType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "ResponseWrapperBanner": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Banner"
          }
        }
      },
      "ListResponseInventories": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Inventories"
            }
          }
        }
      },
      "JobDetailDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "jobclass": {
            "type": "string"
          },
          "jobData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ListResponseCustomerCategory": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/CustomerCategory"
            }
          }
        }
      },
      "LeaveOfAbsence": {
        "type": "object",
        "required": [
          "percentage",
          "startDate"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "employment": {
            "$ref": "#/components/schemas/Employment"
          },
          "leaveOfAbsenceId": {
            "type": "string",
            "description": "Existing leave of absence ID used by the current accounting system",
            "maxLength": 255
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "percentage": {
            "type": "number",
            "format": "double"
          },
          "isWageDeduction": {
            "type": "boolean",
            "default": false
          },
          "type": {
            "type": "string",
            "description": "Define the leave of absence type.",
            "enum": [
              "LEAVE_OF_ABSENCE",
              "FURLOUGH",
              "PARENTAL_BENEFITS",
              "MILITARY_SERVICE",
              "EDUCATIONAL",
              "COMPASSIONATE"
            ]
          }
        }
      },
      "ResponseWrapperCurrency": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "ListResponseSalesForceAccountInfo": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/SalesForceAccountInfo"
            }
          }
        }
      },
      "ResponseWrapperActivity": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Activity"
          }
        }
      },
      "ResponseWrapperDocument": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Document"
          }
        }
      },
      "ListResponseCompanyHoliday": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/CompanyHoliday"
            }
          }
        }
      },
      "ResponseWrapperCountry": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Country"
          }
        }
      },
      "ResponseWrapperEmploymentDetails": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/EmploymentDetails"
          }
        }
      },
      "ProjectPeriodMonthlyStatus": {
        "type": "object",
        "properties": {
          "income": {
            "type": "number",
            "readOnly": true
          },
          "costs": {
            "type": "number",
            "readOnly": true
          },
          "dateFrom": {
            "type": "string",
            "readOnly": true
          },
          "dateTo": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ResponseWrapperCurrencyExchangeRate": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/CurrencyExchangeRate"
          }
        }
      },
      "ResponseWrapperDivision": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Division"
          }
        }
      },
      "ListResponsePersonAutoCompleteDTO": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/PersonAutoCompleteDTO"
            }
          }
        }
      },
      "HolidayAllowanceEarned": {
        "type": "object",
        "properties": {
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "amount": {
            "type": "number"
          },
          "basis": {
            "type": "number"
          },
          "amountExtraHolidayWeek": {
            "type": "number"
          }
        }
      },
      "PerDiemCompensation": {
        "type": "object",
        "required": [
          "location"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "travelExpense": {
            "$ref": "#/components/schemas/TravelExpense"
          },
          "rateType": {
            "$ref": "#/components/schemas/TravelExpenseRate"
          },
          "rateCategory": {
            "$ref": "#/components/schemas/TravelExpenseRateCategory"
          },
          "zone": {
            "type": "string"
          },
          "overnightAccommodation": {
            "type": "string",
            "description": "Set what sort of accommodation was had overnight.",
            "enum": [
              "NONE",
              "HOTEL",
              "BOARDING_HOUSE_WITHOUT_COOKING",
              "BOARDING_HOUSE_WITH_COOKING"
            ]
          },
          "location": {
            "type": "string",
            "maxLength": 255
          },
          "address": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "rate": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          },
          "isDeductionForBreakfast": {
            "type": "boolean",
            "default": false
          },
          "isDeductionForLunch": {
            "type": "boolean",
            "default": false
          },
          "isDeductionForDinner": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ResponseWrapperOrderLine": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/OrderLine"
          }
        }
      },
      "ListResponseLegacyAddress": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/LegacyAddress"
            }
          }
        }
      },
      "ContentDisposition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "fileName": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "readDate": {
            "type": "string",
            "format": "date-time"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PaymentTypeOut": {
        "type": "object",
        "required": [
          "creditAccount",
          "description"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "maxLength": 255
          },
          "isBruttoWageDeduction": {
            "type": "boolean",
            "description": "true if it should be a deduction from the wage. The module PROVISIONSALARY is required to both view and change this setting",
            "default": false
          },
          "creditAccount": {
            "$ref": "#/components/schemas/Account"
          },
          "showIncomingInvoice": {
            "type": "boolean",
            "description": "true if the payment type should be available in supplier invoices",
            "default": false
          },
          "showWagePayment": {
            "type": "boolean",
            "description": "true if the payment type should be available in wage payments. The wage module is required to both view and change this setting",
            "default": false
          },
          "showVatReturns": {
            "type": "boolean",
            "description": "true if the payment type should be available in vat returns",
            "default": false
          },
          "showWagePeriodTransaction": {
            "type": "boolean",
            "description": "true if the payment type should be available in period transactionsThe wage module is required to both view and change this setting",
            "default": false
          },
          "requiresSeparateVoucher": {
            "type": "boolean",
            "description": "true if a separate voucher is required",
            "default": false
          },
          "sequence": {
            "type": "integer",
            "format": "int32",
            "description": "determines in which order the types should be listed. No 1 is listed first"
          },
          "isInactive": {
            "type": "boolean",
            "description": "true if the payment type should be hidden from available payment types",
            "default": false
          }
        }
      },
      "ResponseWrapperContact": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Contact"
          }
        }
      },
      "ListResponseVatType": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/VatType"
            }
          }
        }
      },
      "Account": {
        "type": "object",
        "required": [
          "name",
          "number"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "ASSETS",
              "EQUITY",
              "LIABILITIES",
              "OPERATING_REVENUES",
              "OPERATING_EXPENSES",
              "INVESTMENT_INCOME",
              "COST_OF_CAPITAL",
              "TAX_ON_ORDINARY_ACTIVITIES",
              "EXTRAORDINARY_INCOME",
              "EXTRAORDINARY_COST",
              "TAX_ON_EXTRAORDINARY_ACTIVITIES",
              "ANNUAL_RESULT",
              "TRANSFERS_AND_ALLOCATIONS"
            ]
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "vatLocked": {
            "type": "boolean",
            "description": "True if all entries on this account must have the vat type given by vatType.",
            "default": false
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "isCloseable": {
            "type": "boolean",
            "description": "True if it should be possible to close entries on this account and it is possible to filter on open entries.",
            "default": false
          },
          "isApplicableForSupplierInvoice": {
            "type": "boolean",
            "description": "True if this account is applicable for supplier invoice registration.",
            "default": false
          },
          "requireReconciliation": {
            "type": "boolean",
            "description": "True if this account must be reconciled before the accounting period closure.",
            "default": false
          },
          "isInactive": {
            "type": "boolean",
            "description": "Inactive accounts will not show up in UI lists.",
            "default": false
          },
          "isBankAccount": {
            "type": "boolean",
            "default": false
          },
          "isInvoiceAccount": {
            "type": "boolean",
            "default": false
          },
          "bankAccountNumber": {
            "type": "string",
            "maxLength": 100
          },
          "bankAccountCountry": {
            "$ref": "#/components/schemas/Country"
          },
          "bankName": {
            "type": "string",
            "maxLength": 255
          },
          "bankAccountIBAN": {
            "type": "string",
            "maxLength": 100
          },
          "bankAccountSWIFT": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "ResponseWrapperTravelExpenseRateCategory": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TravelExpenseRateCategory"
          }
        }
      },
      "Invoice": {
        "type": "object",
        "required": [
          "invoiceDate",
          "invoiceDueDate",
          "orders"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "invoiceNumber": {
            "type": "integer",
            "format": "int32",
            "description": "If value is set to 0, the invoice number will be generated.",
            "minimum": 0
          },
          "invoiceDate": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "invoiceDueDate": {
            "type": "string"
          },
          "kid": {
            "type": "string",
            "description": "KID - Kundeidentifikasjonsnummer.",
            "maxLength": 25
          },
          "comment": {
            "type": "string"
          },
          "orders": {
            "type": "array", "maxItems": 5,
            "description": "Related orders. Only one order per invoice is supported at the moment.",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "projectInvoiceDetails": {
            "type": "array", "maxItems": 5,
            "description": "ProjectInvoiceDetails contains additional information about the invoice, in particular invoices for projects. It contains information about the charged project, the fee amount, extra percent and amount, extra costs, travel expenses, invoice and project comments, akonto amount and values determining if extra costs, akonto and hours should be included. ProjectInvoiceDetails is an object which represents the relation between an invoice and a Project, Orderline and OrderOut object.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/ProjectInvoiceDetails"
            }
          },
          "voucher": {
            "$ref": "#/components/schemas/Voucher"
          },
          "deliveryDate": {
            "type": "string",
            "description": "The delivery date.",
            "readOnly": true
          },
          "amount": {
            "type": "number",
            "description": "In the company’s currency, typically NOK.",
            "readOnly": true
          },
          "amountCurrency": {
            "type": "number",
            "description": "In the specified currency.",
            "readOnly": true
          },
          "amountExcludingVat": {
            "type": "number",
            "description": "Amount excluding VAT (NOK).",
            "readOnly": true
          },
          "amountExcludingVatCurrency": {
            "type": "number",
            "description": "Amount excluding VAT in the specified currency.",
            "readOnly": true
          },
          "amountRoundoff": {
            "type": "number",
            "description": "Amount of round off to nearest integer.",
            "readOnly": true
          },
          "amountRoundoffCurrency": {
            "type": "number",
            "description": "Amount of round off to nearest integer in the specified currency.",
            "readOnly": true
          },
          "amountOutstanding": {
            "type": "number",
            "description": "The amount outstanding based on the history collection, excluding reminders and any existing remits, in the invoice currency.",
            "readOnly": true
          },
          "amountOutstandingTotal": {
            "type": "number",
            "description": "The amount outstanding based on the history collection and including the last reminder and any existing remits. This is the total invoice balance including reminders and remittances, in the invoice currency.",
            "readOnly": true
          },
          "sumRemits": {
            "type": "number",
            "description": "The sum of all open remittances of the invoice. Remittances are reimbursement payments back to the customer and are therefore relevant to the bookkeeping of the invoice in the accounts.",
            "readOnly": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "isCreditNote": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "isCharged": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "isApproved": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "postings": {
            "type": "array", "maxItems": 5,
            "description": "The invoice postings, which includes a posting for the invoice with a positive amount, and one or more posting for the payments with negative amounts.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Posting"
            }
          },
          "reminders": {
            "type": "array", "maxItems": 5,
            "description": "Invoice debt collection and reminders.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Reminder"
            }
          },
          "ehfSendStatus": {
            "type": "string",
            "description": "[Deprecated] EHF (Peppol) send status. This only shows status for historic EHFs.",
            "enum": [
              "DO_NOT_SEND",
              "SEND",
              "SENT",
              "SEND_FAILURE_RECIPIENT_NOT_FOUND"
            ]
          }
        }
      },
      "TravelDetails": {
        "type": "object",
        "properties": {
          "isForeignTravel": {
            "type": "boolean",
            "default": false
          },
          "isDayTrip": {
            "type": "boolean",
            "default": false
          },
          "isCompensationFromRates": {
            "type": "boolean",
            "default": false
          },
          "departureDate": {
            "type": "string"
          },
          "returnDate": {
            "type": "string"
          },
          "detailedJourneyDescription": {
            "type": "string"
          },
          "departureFrom": {
            "type": "string",
            "maxLength": 255
          },
          "destination": {
            "type": "string",
            "maxLength": 255
          },
          "departureTime": {
            "type": "string",
            "maxLength": 20
          },
          "returnTime": {
            "type": "string",
            "maxLength": 20
          },
          "purpose": {
            "type": "string"
          }
        }
      },
      "ListResponseLedgerAccount": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/LedgerAccount"
            }
          }
        }
      },
      "ResponseWrapperEmployee": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Employee"
          }
        }
      },
      "ResponseWrapperHourlyCostAndRate": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/HourlyCostAndRate"
          }
        }
      },
      "Modules": {
        "type": "object",
        "properties": {
          "accounting": {
            "type": "boolean",
            "description": "Not readable. Only for input.",
            "default": false
          },
          "invoice": {
            "type": "boolean",
            "description": "Not readable. Only for input.",
            "default": false
          },
          "salary": {
            "type": "boolean",
            "description": "Not readable. Only for input.",
            "default": false
          },
          "salaryStartDate": {
            "type": "string",
            "format": "date"
          },
          "project": {
            "type": "boolean",
            "description": "Not readable. Only for input.",
            "default": false
          },
          "ocr": {
            "type": "boolean",
            "default": false
          },
          "remit": {
            "type": "boolean",
            "default": false
          },
          "electronicVouchers": {
            "type": "boolean",
            "description": "Not readable. Only for input.",
            "default": false
          },
          "electro": {
            "type": "boolean",
            "description": "Not readable. Only for input.",
            "default": false
          },
          "vvs": {
            "type": "boolean",
            "description": "Not readable. Only for input.",
            "default": false
          },
          "agro": {
            "type": "boolean",
            "default": false
          },
          "mamut": {
            "type": "boolean",
            "default": false
          },
          "approveVoucher": {
            "type": "boolean",
            "description": "Only readable for now",
            "readOnly": true,
            "default": false
          }
        }
      },
      "ListResponseProspect": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Prospect"
            }
          }
        }
      },
      "ResponseWrapperGoodsReceiptLine": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/GoodsReceiptLine"
          }
        }
      },
      "ResponseWrapperUnreadCountDTO": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/UnreadCountDTO"
          }
        }
      },
      "ResponseWrapperCompany": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Company"
          }
        }
      },
      "EventInfoDescription": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "payloadModel": {
            "type": "string"
          }
        }
      },
      "ResponseWrapperTimesheetSalaryTypeSpecification": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TimesheetSalaryTypeSpecification"
          }
        }
      },
      "ResponseWrapperProjectPeriodOverallStatus": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProjectPeriodOverallStatus"
          }
        }
      },
      "ResponseWrapperAccommodationAllowance": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/AccommodationAllowance"
          }
        }
      },
      "Subscription": {
        "type": "object",
        "required": [
          "event",
          "targetUrl"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "event": {
            "type": "string",
            "example": "customer.create",
            "description": "Event name (from /v2/event) you wish to subscribe to. Form should be: *subject.verb*.",
            "minLength": 1,
            "maxLength": 255
          },
          "targetUrl": {
            "type": "string",
            "example": "https://username:password@myintegration.example/tripletexCallback",
            "description": "The callback URL used for subscriptions (including authentication tokens). Must be absolute and use HTTPS. Basic authentication is supported.",
            "minLength": 1,
            "maxLength": 255
          },
          "fields": {
            "type": "string",
            "example": "id,version,number",
            "description": "The fields in the object delivered with the notification callback, nested as in other API calls.",
            "maxLength": 255
          },
          "status": {
            "type": "string",
            "description": "The status of the subscription.",
            "readOnly": true,
            "enum": [
              "ACTIVE",
              "DISABLED",
              "DISABLED_TOO_MANY_ERRORS",
              "DISABLED_RATE_LIMIT_EXCEEDED",
              "DISABLED_MISUSE"
            ]
          },
          "authHeaderName": {
            "type": "string",
            "example": "Authorization",
            "description": "Custom authentication header name",
            "maxLength": 255
          },
          "authHeaderValue": {
            "type": "string",
            "example": "Basic dXNlcm5hbWU6cGFzc3dvcmQ=",
            "description": "Custom authentication header value (write only)",
            "maxLength": 4096
          }
        }
      },
      "ProductLine": {
        "type": "object",
        "required": [
          "product",
          "stocktaking"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "stocktaking": {
            "$ref": "#/components/schemas/Stocktaking"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "count": {
            "type": "number"
          },
          "unitCostCurrency": {
            "type": "number",
            "description": "Unit price purchase (cost) excluding VAT in the order's currency"
          },
          "costCurrency": {
            "type": "number",
            "readOnly": true
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "ListResponseProjectInvoiceDetails": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/ProjectInvoiceDetails"
            }
          }
        }
      },
      "Municipality": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "number": {
            "type": "string",
            "readOnly": true,
            "maxLength": 4
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "maxLength": 100
          },
          "county": {
            "type": "string",
            "readOnly": true,
            "maxLength": 100
          },
          "payrollTaxZone": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ProjectCategory": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "number": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ListResponseInventory": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Inventory"
            }
          }
        }
      },
      "ListResponseCompanyAutoCompleteDTO": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/CompanyAutoCompleteDTO"
            }
          }
        }
      },
      "EmployeeCompanyDTO": {
        "type": "object",
        "properties": {
          "isDefault": {
            "type": "boolean",
            "default": false
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          }
        }
      },
      "ListResponseSalaryTransaction": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/SalaryTransaction"
            }
          }
        }
      },
      "ResponseWrapperBankStatement": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/BankStatement"
          }
        }
      },
      "TravelExpenseRateCategoryGroup": {
        "type": "object",
        "required": [
          "fromDate",
          "toDate"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "isForeignTravel": {
            "type": "boolean",
            "default": false
          },
          "fromDate": {
            "type": "string"
          },
          "toDate": {
            "type": "string"
          }
        }
      },
      "ResponseWrapperEntitlement": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Entitlement"
          }
        }
      },
      "ResponseWrapperStocktaking": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Stocktaking"
          }
        }
      },
      "ResponseWrapperProjectOrderLine": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ProjectOrderLine"
          }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "isoAlpha2Code": {
            "type": "string",
            "description": "The ISO 3166-1 Alpha2 code of the country (2 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
            "readOnly": true
          },
          "isoAlpha3Code": {
            "type": "string",
            "description": "The ISO 3166-1 Alpha3 code of the country (3 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
            "readOnly": true,
            "maxLength": 3
          },
          "isoNumericCode": {
            "type": "string",
            "description": "The ISO 3166-1 numeric code of the country (3 digits). https://en.wikipedia.org/wiki/ISO_3166-1",
            "readOnly": true
          }
        }
      },
      "ResponseWrapperReminder": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Reminder"
          }
        }
      },
      "ListResponseTimesheetSalaryTypeSpecification": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/TimesheetSalaryTypeSpecification"
            }
          }
        }
      },
      "WebHookWrapper": {
        "type": "object",
        "properties": {
          "value": {
            "type": "object"
          },
          "event": {
            "type": "string"
          },
          "subscriptionId": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ListResponseMileageAllowance": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/MileageAllowance"
            }
          }
        }
      },
      "ListResponseProjectPeriodMonthlyStatus": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/ProjectPeriodMonthlyStatus"
            }
          }
        }
      },
      "VNTCStatusDTO": {
        "type": "object",
        "required": [
          "ExternalMessageId",
          "ExternalSenderId",
          "MessageId",
          "Operator",
          "Status"
        ],
        "properties": {
          "MessageId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "ExternalSenderId": {
            "type": "string",
            "readOnly": true
          },
          "ExternalMessageId": {
            "type": "string",
            "readOnly": true
          },
          "PartCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Status": {
            "type": "string",
            "readOnly": true
          },
          "Operator": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ResponseWrapperOrder": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Order"
          }
        }
      },
      "ProjectActivity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "activity": {
            "$ref": "#/components/schemas/Activity"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "isClosed": {
            "type": "boolean",
            "default": false
          },
          "budgetHours": {
            "type": "number",
            "description": "Set budget hours"
          },
          "budgetHourlyRateCurrency": {
            "type": "number",
            "description": "Set budget hourly rate"
          },
          "budgetFeeCurrency": {
            "type": "number",
            "description": "Set budget fee"
          }
        }
      },
      "TripDTO": {
        "type": "object",
        "properties": {
          "distance": {
            "type": "number"
          },
          "travelTimeInMinutes": {
            "type": "number"
          },
          "sumTollNOK": {
            "type": "number"
          }
        }
      },
      "AutoPayMessageDTO": {
        "type": "object",
        "required": [
          "message",
          "messageId",
          "messageType"
        ],
        "properties": {
          "messageId": {
            "type": "string",
            "readOnly": true
          },
          "messageType": {
            "type": "string",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ListResponseSalesForceEmployee": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/SalesForceEmployee"
            }
          }
        }
      },
      "Passenger": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "mileageAllowance": {
            "$ref": "#/components/schemas/MileageAllowance"
          }
        }
      },
      "ListResponseProductLine": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/ProductLine"
            }
          }
        }
      },
      "AltinnCompanyModule": {
        "type": "object",
        "required": [
          "altInnId",
          "altInnPassword"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "altInnId": {
            "type": "integer",
            "format": "int32"
          },
          "altInnPassword": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          }
        }
      },
      "ListResponseCloseGroup": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/CloseGroup"
            }
          }
        }
      },
      "ListResponseStocktaking": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Stocktaking"
            }
          }
        }
      },
      "ListResponseDivision": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Division"
            }
          }
        }
      },
      "ResponseWrapperTimesheetSettings": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/TimesheetSettings"
          }
        }
      },
      "SalesForceOpportunity": {
        "type": "object",
        "properties": {
          "allPrices": {
            "type": "object",
            "description": "A nested map of all active sales modules. The key in the outer map is the sales module, whilest the inner map contains the different pricing types for the given sales module. A pricing type could be PER_USE(10).",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "number",
                "format": "double"
              }
            }
          },
          "sumStartupCategory1Users": {
            "type": "number",
            "format": "double",
            "description": "The total startup price for users of category 1."
          },
          "sumServiceCategory1Users": {
            "type": "number",
            "format": "double",
            "description": "The total price per monthly price for users of category 1."
          },
          "listPriceCategory1UserStartup": {
            "type": "number",
            "format": "double",
            "description": "The startup list price per user."
          },
          "listPriceCategory1UserService": {
            "type": "number",
            "format": "double",
            "description": "The monthly list price per user."
          },
          "sumStartup": {
            "type": "number",
            "format": "double",
            "description": "The startup price for the company."
          },
          "sumService": {
            "type": "number",
            "format": "double",
            "description": "The monthly price for the company."
          },
          "sumAdditionalServices": {
            "type": "number",
            "format": "double",
            "description": "The total startup price for additional services."
          },
          "accountantStartupProvision": {
            "type": "number",
            "format": "double",
            "description": "The initial provision for the accountant of the startup price (percentage)"
          },
          "accountantMonthlyProvision": {
            "type": "number",
            "format": "double",
            "description": "The monthly provision for the accountant of the monthly price (percentage)"
          },
          "noOfUsersPrepaid": {
            "type": "integer",
            "format": "int32",
            "description": "The number of users prepaid when creating the company."
          },
          "noOfUsersIncluded": {
            "type": "integer",
            "format": "int32",
            "description": "The number of users included for free in the purchased module."
          }
        }
      },
      "ListResponseOrder": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "ResponseWrapperAccountingPeriod": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/AccountingPeriod"
          }
        }
      },
      "ListResponseSearchCompletionDTO": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/SearchCompletionDTO"
            }
          }
        }
      },
      "ResponseWrapperCloseGroup": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/CloseGroup"
          }
        }
      },
      "ResponseWrapperPurchaseOrder": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PurchaseOrder"
          }
        }
      },
      "ListResponseProjectCategory": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/ProjectCategory"
            }
          }
        }
      },
      "ResponseWrapperLeaveOfAbsence": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/LeaveOfAbsence"
          }
        }
      },
      "Company": {
        "type": "object",
        "required": [
          "address",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "organizationNumber": {
            "type": "string",
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 254
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 100
          },
          "phoneNumberMobile": {
            "type": "string",
            "maxLength": 100
          },
          "faxNumber": {
            "type": "string",
            "maxLength": 100
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "type": {
            "type": "string",
            "enum": [
              "NONE",
              "ENK",
              "AS",
              "NUF",
              "ANS",
              "DA",
              "PRE",
              "KS",
              "ASA",
              "BBL",
              "BRL",
              "GFS",
              "SPA",
              "SF",
              "IKS",
              "KF_FKF",
              "FCD",
              "EOFG",
              "BA",
              "STI",
              "ORG",
              "ESEK",
              "SA",
              "SAM",
              "BO",
              "VPFO",
              "OS",
              "Other"
            ]
          }
        }
      },
      "ListResponseBankReconciliationAdjustment": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/BankReconciliationAdjustment"
            }
          }
        }
      },
      "ListResponseMunicipality": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Municipality"
            }
          }
        }
      },
      "ResponseWrapperSubscription": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Subscription"
          }
        }
      },
      "ResponseWrapperPaymentType": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PaymentType"
          }
        }
      },
      "ListResponseProjectHourlyRate": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/ProjectHourlyRate"
            }
          }
        }
      },
      "Job": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "stateful": {
            "type": "boolean",
            "default": false
          },
          "interruptable": {
            "type": "boolean",
            "default": false
          },
          "jobDetail": {
            "$ref": "#/components/schemas/JobDetailDTO"
          },
          "triggers": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/TriggerDTO"
            }
          }
        }
      },
      "Order": {
        "type": "object",
        "required": [
          "customer",
          "deliveryDate",
          "orderDate"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "attn": {
            "$ref": "#/components/schemas/Contact"
          },
          "receiverEmail": {
            "type": "string",
            "format": "email",
            "maxLength": 254
          },
          "overdueNoticeEmail": {
            "type": "string",
            "format": "email",
            "maxLength": 254
          },
          "number": {
            "type": "string",
            "maxLength": 100
          },
          "reference": {
            "type": "string",
            "maxLength": 255
          },
          "ourContact": {
            "$ref": "#/components/schemas/Contact"
          },
          "ourContactEmployee": {
            "$ref": "#/components/schemas/Employee"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "orderDate": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "invoiceComment": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "invoicesDueIn": {
            "type": "integer",
            "format": "int32",
            "description": "Number of days/months in which invoices created from this order is due",
            "minimum": 0,
            "maximum": 10000
          },
          "invoicesDueInType": {
            "type": "string",
            "description": "Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this order. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.",
            "enum": [
              "DAYS",
              "MONTHS",
              "RECURRING_DAY_OF_MONTH"
            ]
          },
          "isShowOpenPostsOnInvoices": {
            "type": "boolean",
            "description": "Show account statement - open posts on invoices created from this order",
            "default": false
          },
          "isClosed": {
            "type": "boolean",
            "description": "Denotes if this order is closed. A closed order can no longer be invoiced unless it is opened again.",
            "default": false
          },
          "deliveryDate": {
            "type": "string"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/DeliveryAddress"
          },
          "deliveryComment": {
            "type": "string"
          },
          "isPrioritizeAmountsIncludingVat": {
            "type": "boolean",
            "default": false
          },
          "orderLineSorting": {
            "type": "string",
            "enum": [
              "ID",
              "PRODUCT",
              "CUSTOM"
            ]
          },
          "orderLines": {
            "type": "array", "maxItems": 5,
            "description": "Order lines tied to the order",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/OrderLine"
            }
          },
          "isSubscription": {
            "type": "boolean",
            "description": "If true, the order is a subscription, which enables periodical invoicing of order lines. First, create an order with isSubscription=true, then approve it for subscription invoicing with the :approveSubscriptionInvoice method.",
            "default": false
          },
          "subscriptionDuration": {
            "type": "integer",
            "format": "int32",
            "description": "Number of months/years the subscription shall run",
            "minimum": 0
          },
          "subscriptionDurationType": {
            "type": "string",
            "description": "The time unit of subscriptionDuration",
            "enum": [
              "MONTHS",
              "YEAR"
            ]
          },
          "subscriptionPeriodsOnInvoice": {
            "type": "integer",
            "format": "int32",
            "description": "Number of periods on each invoice",
            "minimum": 0
          },
          "subscriptionPeriodsOnInvoiceType": {
            "type": "string",
            "description": "The time unit of subscriptionPeriodsOnInvoice",
            "readOnly": true,
            "enum": [
              "MONTHS"
            ]
          },
          "subscriptionInvoicingTimeInAdvanceOrArrears": {
            "type": "string",
            "description": "Invoicing in advance/in arrears",
            "enum": [
              "ADVANCE",
              "ARREARS"
            ]
          },
          "subscriptionInvoicingTime": {
            "type": "integer",
            "format": "int32",
            "description": "Number of days/months invoicing in advance/in arrears",
            "minimum": 0
          },
          "subscriptionInvoicingTimeType": {
            "type": "string",
            "description": "The time unit of subscriptionInvoicingTime",
            "enum": [
              "DAYS",
              "MONTHS"
            ]
          },
          "isSubscriptionAutoInvoicing": {
            "type": "boolean",
            "description": "Automatic invoicing. Starts when the subscription is approved",
            "default": false
          }
        }
      },
      "ResponseWrapperPassenger": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Passenger"
          }
        }
      },
      "RemunerationType": {
        "type": "object",
        "required": [
          "remunerationType"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "remunerationType": {
            "type": "string",
            "description": "Defines the remuneration type option. ",
            "enum": [
              "MONTHLY_WAGE",
              "HOURLY_WAGE",
              "COMMISION_PERCENTAGE",
              "FEE",
              "PIECEWORK_WAGE"
            ]
          },
          "nameNO": {
            "type": "string",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "ResponseWrapperDocumentArchive": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/DocumentArchive"
          }
        }
      },
      "AutoLogin": {
        "type": "object",
        "properties": {
          "loginUrl": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ListResponseEntitlement": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Entitlement"
            }
          }
        }
      },
      "SalarySpecification": {
        "type": "object",
        "required": [
          "count",
          "rate",
          "salaryType"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "rate": {
            "type": "number"
          },
          "count": {
            "type": "number"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          },
          "salaryType": {
            "$ref": "#/components/schemas/SalaryType"
          },
          "payslip": {
            "$ref": "#/components/schemas/Payslip"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "description": {
            "type": "string"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "amount": {
            "type": "number"
          }
        }
      },
      "SystemMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "GoodsReceipt": {
        "type": "object",
        "required": [
          "goodsReceiptLines",
          "registrationDate"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "purchaseOrder": {
            "$ref": "#/components/schemas/PurchaseOrder"
          },
          "registrationDate": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "STATUS_OPEN",
              "STATUS_CONFIRMED"
            ]
          },
          "goodsReceiptLines": {
            "type": "array", "maxItems": 5,
            "description": "Purchase Order lines tied to the goods receipt",
            "items": {
              "$ref": "#/components/schemas/GoodsReceiptLine"
            }
          }
        }
      },
      "ListResponsePassenger": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Passenger"
            }
          }
        }
      },
      "ResponseWrapperInteger": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ListResponseBanner": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Banner"
            }
          }
        }
      },
      "ProjectPeriodOverallStatus": {
        "type": "object",
        "properties": {
          "income": {
            "type": "number",
            "readOnly": true
          },
          "costs": {
            "type": "number",
            "readOnly": true
          }
        }
      },
      "TimesheetEntry": {
        "type": "object",
        "required": [
          "activity",
          "date",
          "employee",
          "hours"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "activity": {
            "$ref": "#/components/schemas/Activity"
          },
          "date": {
            "type": "string"
          },
          "hours": {
            "type": "number",
            "format": "double"
          },
          "chargeableHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "timeClocks": {
            "type": "array", "maxItems": 5,
            "description": "Link to stop watches on this hour.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/TimeClock"
            }
          },
          "comment": {
            "type": "string"
          },
          "locked": {
            "type": "boolean",
            "description": "Indicates if the hour can be changed.",
            "readOnly": true,
            "default": false
          },
          "chargeable": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "invoice": {
            "$ref": "#/components/schemas/Invoice"
          },
          "hourlyRate": {
            "type": "number",
            "readOnly": true
          },
          "hourlyCost": {
            "type": "number",
            "readOnly": true
          },
          "hourlyCostPercentage": {
            "type": "number",
            "readOnly": true
          }
        }
      },
      "ResponseWrapperEmployeeToken": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/EmployeeToken"
          }
        }
      },
      "ListResponseSalesModuleDTO": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/SalesModuleDTO"
            }
          }
        }
      },
      "Cost": {
        "type": "object",
        "required": [
          "amountCurrencyIncVat",
          "paymentType"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "travelExpense": {
            "$ref": "#/components/schemas/TravelExpense"
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "costCategory": {
            "$ref": "#/components/schemas/TravelCostCategory"
          },
          "paymentType": {
            "$ref": "#/components/schemas/TravelPaymentType"
          },
          "category": {
            "type": "string",
            "maxLength": 100
          },
          "comments": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          },
          "amountCurrencyIncVat": {
            "type": "number"
          },
          "amountNOKInclVAT": {
            "type": "number"
          },
          "amountNOKInclVATLow": {
            "type": "number",
            "readOnly": true
          },
          "amountNOKInclVATMedium": {
            "type": "number",
            "readOnly": true
          },
          "amountNOKInclVATHigh": {
            "type": "number",
            "readOnly": true
          },
          "isPaidByEmployee": {
            "type": "boolean",
            "readOnly": true,
            "default": false
          },
          "isChargeable": {
            "type": "boolean",
            "default": false
          },
          "date": {
            "type": "string"
          }
        }
      },
      "WorkingHoursScheme": {
        "type": "object",
        "required": [
          "workingHoursScheme"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "workingHoursScheme": {
            "type": "string",
            "description": "Defines the working hours scheme option.",
            "enum": [
              "NOT_SHIFT",
              "ROUND_THE_CLOCK",
              "SHIFT_365",
              "OFFSHORE_336",
              "CONTINUOUS",
              "OTHER_SHIFT"
            ]
          },
          "nameNO": {
            "type": "string",
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "ListResponseSalaryType": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/SalaryType"
            }
          }
        }
      },
      "ListResponseTimesheetEntry": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/TimesheetEntry"
            }
          }
        }
      },
      "TravelExpenseRate": {
        "type": "object",
        "required": [
          "rateCategory",
          "zone"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "rateCategory": {
            "$ref": "#/components/schemas/TravelExpenseRateCategory"
          },
          "zone": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          },
          "breakfastDeductionRate": {
            "type": "number"
          },
          "lunchDeductionRate": {
            "type": "number"
          },
          "dinnerDeductionRate": {
            "type": "number"
          }
        }
      },
      "ResponseWrapperDouble": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "MultiPart": {
        "type": "object",
        "properties": {
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDisposition"
          },
          "entity": {
            "type": "object"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array", "maxItems": 5,
              "items": {
                "type": "string"
              }
            }
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "messageBodyWorkers": {
            "$ref": "#/components/schemas/MessageBodyWorkers"
          },
          "parent": {
            "$ref": "#/components/schemas/MultiPart"
          },
          "providers": {
            "$ref": "#/components/schemas/Providers"
          },
          "bodyParts": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/BodyPart"
            }
          },
          "parameterizedHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "array", "maxItems": 5,
              "items": {
                "$ref": "#/components/schemas/ParameterizedHeader"
              }
            }
          }
        }
      },
      "SalaryTransaction": {
        "type": "object",
        "required": [
          "month",
          "payslips",
          "year"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "description": "Voucher date."
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "isHistorical": {
            "type": "boolean",
            "description": "With historical wage vouchers you can update the wage system with information dated before the opening balance.",
            "default": false
          },
          "paySlipsAvailableDate": {
            "type": "string",
            "description": "The date payslips are made available to the employee. Defaults to voucherDate."
          },
          "payslips": {
            "type": "array", "maxItems": 5,
            "description": "Link to individual payslip objects.",
            "items": {
              "$ref": "#/components/schemas/Payslip"
            }
          }
        }
      },
      "SalesModuleDTO": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "MAMUT",
              "MAMUT_WITH_WAGE",
              "AGRO_LICENCE",
              "AGRO_CLIENT",
              "AGRO_DOCUMENT_CENTER",
              "AGRO_INVOICE",
              "AGRO_WAGE"
            ]
          },
          "costStartDate": {
            "type": "string"
          }
        }
      },
      "ListResponseProjectControlForm": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/ProjectControlForm"
            }
          }
        }
      },
      "ListResponseTravelExpenseRate": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/TravelExpenseRate"
            }
          }
        }
      },
      "Change": {
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "changeType": {
            "type": "string",
            "enum": [
              "CREATE",
              "UPDATE",
              "DELETE",
              "LOCKED",
              "REOPENED",
              "DO_NOT_SHOW"
            ]
          },
          "periodLocked": {
            "type": "string"
          },
          "periodReopened": {
            "type": "string"
          }
        }
      },
      "TripletexAccount": {
        "type": "object",
        "required": [
          "accountType",
          "administratorPassword",
          "company",
          "modules",
          "numberOfVouchers"
        ],
        "properties": {
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "administrator": {
            "$ref": "#/components/schemas/Employee"
          },
          "accountType": {
            "type": "string",
            "description": "Is this a test account or a paying account?",
            "enum": [
              "TEST",
              "PAYING"
            ]
          },
          "modules": {
            "$ref": "#/components/schemas/Modules"
          },
          "administratorPassword": {
            "type": "string",
            "description": "Password for the administrator user to create. Not a part of the administrator employee object since this is a value that never can be read (it is salted and hashed before storing)"
          },
          "sendEmails": {
            "type": "boolean",
            "description": "Should the regular creation emails be sent to the company created and its users? If false you probably want to set autoValidateUserLogin to true",
            "default": false
          },
          "autoValidateUserLogin": {
            "type": "boolean",
            "description": "If true, the users created will be allowed to log in without validating their email address. ONLY USE THIS IF YOU ALREADY HAVE VALIDATED THE USER EMAILS.",
            "default": false
          },
          "createAdministratorApiToken": {
            "type": "boolean",
            "description": "Create an API token for the administrator user for the consumer token used during this call. The token will be returned in the response.",
            "default": false
          },
          "createCompanyOwnedApiToken": {
            "type": "boolean",
            "description": "Create an API token for the company to use to call their clients, only possible for accounting and auditor accounts. The token will be returned in the response.",
            "default": false
          },
          "mayCreateTripletexAccounts": {
            "type": "boolean",
            "description": "Should the company we are creating be able to create new Tripletex accounts?",
            "default": false
          },
          "numberOfVouchers": {
            "type": "string",
            "description": "Used to calculate prices.",
            "enum": [
              "INTERVAL_0_100",
              "INTERVAL_101_500",
              "INTERVAL_0_500",
              "INTERVAL_501_1000",
              "INTERVAL_1001_2000",
              "INTERVAL_2001_3500",
              "INTERVAL_3501_5000",
              "INTERVAL_5001_10000",
              "INTERVAL_UNLIMITED"
            ]
          },
          "chartOfAccountsType": {
            "type": "string",
            "description": "The chart of accounts to use for the new company",
            "enum": [
              "DEFAULT",
              "MAMUT_STD_PAYROLL",
              "MAMUT_NARF_PAYROLL",
              "AGRO_FORRETNING_PAYROLL",
              "AGRO_LANDBRUK_PAYROLL",
              "AGRO_FISKE_PAYROLL",
              "AGRO_FORSOKSRING_PAYROLL",
              "AGRO_IDRETTSLAG_PAYROLL",
              "AGRO_FORENING_PAYROLL"
            ]
          },
          "auditor": {
            "type": "boolean",
            "default": false
          },
          "reseller": {
            "type": "boolean",
            "default": false
          },
          "accountingOffice": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "firstName": {
            "type": "string",
            "minLength": 0,
            "maxLength": 100
          },
          "lastName": {
            "type": "string",
            "minLength": 0,
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 0,
            "maxLength": 100
          },
          "phoneNumberMobileCountry": {
            "$ref": "#/components/schemas/Country"
          },
          "phoneNumberMobile": {
            "type": "string",
            "maxLength": 100
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "Voucher": {
        "type": "object",
        "required": [
          "date",
          "description",
          "postings"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "changes": {
            "type": "array", "maxItems": 5,
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "date": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "description": "System generated number that cannot be changed.",
            "readOnly": true,
            "minimum": 0
          },
          "year": {
            "type": "integer",
            "format": "int32",
            "description": "System generated number that cannot be changed.",
            "readOnly": true,
            "minimum": 0
          },
          "description": {
            "type": "string"
          },
          "voucherType": {
            "$ref": "#/components/schemas/VoucherType"
          },
          "reverseVoucher": {
            "$ref": "#/components/schemas/Voucher"
          },
          "postings": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/Posting"
            }
          },
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "attachment": {
            "$ref": "#/components/schemas/Document"
          },
          "ediDocument": {
            "$ref": "#/components/schemas/Document"
          }
        }
      },
      "ListResponseVoucherType": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/VoucherType"
            }
          }
        }
      },
      "ResponseWrapperSalaryType": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SalaryType"
          }
        }
      },
      "ListResponseAccommodationAllowance": {
        "type": "object",
        "properties": {
          "fullResultSize": {
            "type": "integer",
            "format": "int32",
            "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "versionDigest": {
            "type": "string",
            "description": "Used to know if the paginated list has changed."
          },
          "values": {
            "type": "array", "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/AccommodationAllowance"
            }
          }
        }
      },
      "VoucherOptions": {
        "type": "object",
        "properties": {
          "delete": {
            "$ref": "#/components/schemas/Delete"
          }
        }
      }
    }
  }
}